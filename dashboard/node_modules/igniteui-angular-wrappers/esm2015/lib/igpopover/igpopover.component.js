/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgPopoverComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * @return {?}
     */
    option() { return; }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        var elem = jQuery(document).find("#" + this.widgetId);
        if (elem.length === 1) {
            this._el = elem;
            this._events = new Map();
            //events binding
            /** @type {?} */
            let that = this;
            /** @type {?} */
            var evtName;
            for (var propt in jQuery.ui[this._widgetName].prototype.events) {
                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
                this._events[evtName] = propt;
                jQuery(this._el).on(evtName, (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that[that._events[evt.type]].emit({ event: evt, ui: ui });
                }));
            }
            jQuery(this._el)[this._widgetName](this.options);
        }
        else {
            super.ngOnInit();
        }
    }
    /**
     * Destroys the popover widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Returns the ID of the element the popover is attached to
     * @return {?}
     */
    /* istanbul ignore next */
    id() { return; }
    ;
    /**
     * Returns the container for the popover contents
     * @return {?}
     */
    /* istanbul ignore next */
    container() { return; }
    ;
    /**
     * Shows the popover for the specified target
     *
     * @param {?=} trg     The element to show popover for.
     * @param {?=} content     The string to set for the popover to show.
     * @return {?}
     */
    /* istanbul ignore next */
    show(trg, content) { return; }
    ;
    /**
     * Hides the popover for the specified target
     * @return {?}
     */
    /* istanbul ignore next */
    hide() { return; }
    ;
    /**
     * Gets the currently set content for the popover container
     * @return {?}
     */
    /* istanbul ignore next */
    getContent() { return; }
    ;
    /**
     * Sets the content for the popover container
     *
     * @param {?} newCnt     The popover content to set.
     * @return {?}
     */
    /* istanbul ignore next */
    setContent(newCnt) { return; }
    ;
    /**
     * Gets the popover current target
     * @return {?}
     */
    /* istanbul ignore next */
    target() { return; }
    ;
    /**
     * Gets the current coordinates of the popover
     * @return {?}
     */
    /* istanbul ignore next */
    getCoordinates() { return; }
    ;
    /**
     * Sets the popover to specific coordinates.
     *
     * @param {?} pos     The popover coordinates in pixels.
     * @return {?}
     */
    /* istanbul ignore next */
    setCoordinates(pos) { return; }
    ;
}
IgPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-popover",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "closeOnBlur", "direction", "position", "width", "height", "minWidth", "maxWidth", "maxHeight", "animationDuration", "contentTemplate", "selectors", "headerTemplate", "showOn", "containment", "appendTo"],
                outputs: ["showing", "shown", "hiding", "hidden"]
            }] }
];
/** @nocollapse */
IgPopoverComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdwb3BvdmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdwb3BvdmVyL2lncG9wb3Zlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVUvRCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsYUFBd0I7Ozs7Ozs7O0lBQzVELFlBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7SUFBUSxNQUFNLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7O0lBR3ROLFFBQVE7O1lBQ0EsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDckQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDOzs7Z0JBRXJDLElBQUksR0FBRyxJQUFJOztnQkFDWCxPQUFPO1lBQ1gsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUM1RCxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPOzs7OztnQkFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFO29CQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUM5RCxDQUFDLEVBQUMsQ0FBQzthQUNOO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDSCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDcEI7SUFFTCxDQUFDOzs7Ozs7SUFNTSxPQUFPLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNNUIsRUFBRSxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTXpCLFNBQVMsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7OztJQVNoQyxJQUFJLENBQUMsR0FBYSxFQUFFLE9BQWdCLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNeEQsSUFBSSxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTXpCLFVBQVUsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUWpDLFVBQVUsQ0FBQyxNQUFjLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNN0MsTUFBTSxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTdCLGNBQWMsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUXJDLGNBQWMsQ0FBQyxHQUFXLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7WUFsR3hELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDO2dCQUM1UixPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7YUFDcEQ7Ozs7WUFWbUIsVUFBVTtZQUFFLFFBQVE7WUFBRSxlQUFlO1lBQUUsZUFBZTtZQUFFLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgUmVuZGVyZXIsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuXG5kZWNsYXJlIHZhciBqUXVlcnk6IGFueTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctcG9wb3ZlclwiLFxuICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICBpbnB1dHM6IFtcIndpZGdldElkXCIsIFwib3B0aW9uc1wiLCBcImNoYW5nZURldGVjdGlvbkludGVydmFsXCIsIFwiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJjbG9zZU9uQmx1clwiLCBcImRpcmVjdGlvblwiLCBcInBvc2l0aW9uXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJtaW5XaWR0aFwiLCBcIm1heFdpZHRoXCIsIFwibWF4SGVpZ2h0XCIsIFwiYW5pbWF0aW9uRHVyYXRpb25cIiwgXCJjb250ZW50VGVtcGxhdGVcIiwgXCJzZWxlY3RvcnNcIiwgXCJoZWFkZXJUZW1wbGF0ZVwiLCBcInNob3dPblwiLCBcImNvbnRhaW5tZW50XCIsIFwiYXBwZW5kVG9cIl0sXG4gICAgb3V0cHV0czogW1wic2hvd2luZ1wiLCBcInNob3duXCIsIFwiaGlkaW5nXCIsIFwiaGlkZGVuXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnUG9wb3ZlckNvbXBvbmVudCBleHRlbmRzIElnQ29udHJvbEJhc2U8SWdQb3BvdmVyPiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBrdmFsRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7IHN1cGVyKGVsLCByZW5kZXJlciwgZGlmZmVycywga3ZhbERpZmZlcnMsIGNkcik7IH0gcHVibGljIG9wdGlvbigpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdmFyIGVsZW0gPSBqUXVlcnkoZG9jdW1lbnQpLmZpbmQoXCIjXCIgKyB0aGlzLndpZGdldElkKTtcbiAgICAgICAgaWYgKGVsZW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9lbCA9IGVsZW07XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xuICAgICAgICAgICAgLy9ldmVudHMgYmluZGluZ1xuICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGV2dE5hbWU7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wdCBpbiBqUXVlcnkudWlbdGhpcy5fd2lkZ2V0TmFtZV0ucHJvdG90eXBlLmV2ZW50cykge1xuICAgICAgICAgICAgICAgIGV2dE5hbWUgPSB0aGlzLl93aWRnZXROYW1lLnRvTG93ZXJDYXNlKCkgKyBwcm9wdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldnROYW1lXSA9IHByb3B0O1xuICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzLl9lbCkub24oZXZ0TmFtZSwgZnVuY3Rpb24gKGV2dCwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdFt0aGF0Ll9ldmVudHNbZXZ0LnR5cGVdXS5lbWl0KHsgZXZlbnQ6IGV2dCwgdWk6IHVpIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBqUXVlcnkodGhpcy5fZWwpW3RoaXMuX3dpZGdldE5hbWVdKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcG9wb3ZlciB3aWRnZXQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIGVsZW1lbnQgdGhlIHBvcG92ZXIgaXMgYXR0YWNoZWQgdG9cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBpZCgpOiBzdHJpbmcgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb250YWluZXIgZm9yIHRoZSBwb3BvdmVyIGNvbnRlbnRzXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgY29udGFpbmVyKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBwb3BvdmVyIGZvciB0aGUgc3BlY2lmaWVkIHRhcmdldFxuICAgICAqXG4gICAgICogQHBhcmFtIHRyZyAgICAgVGhlIGVsZW1lbnQgdG8gc2hvdyBwb3BvdmVyIGZvci5cbiAgICAgKiBAcGFyYW0gY29udGVudCAgICAgVGhlIHN0cmluZyB0byBzZXQgZm9yIHRoZSBwb3BvdmVyIHRvIHNob3cuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc2hvdyh0cmc/OiBFbGVtZW50LCBjb250ZW50Pzogc3RyaW5nKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBwb3BvdmVyIGZvciB0aGUgc3BlY2lmaWVkIHRhcmdldFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGhpZGUoKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBzZXQgY29udGVudCBmb3IgdGhlIHBvcG92ZXIgY29udGFpbmVyXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0Q29udGVudCgpOiBzdHJpbmcgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjb250ZW50IGZvciB0aGUgcG9wb3ZlciBjb250YWluZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdDbnQgICAgIFRoZSBwb3BvdmVyIGNvbnRlbnQgdG8gc2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHNldENvbnRlbnQobmV3Q250OiBzdHJpbmcpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcG9wb3ZlciBjdXJyZW50IHRhcmdldFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHRhcmdldCgpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGNvb3JkaW5hdGVzIG9mIHRoZSBwb3BvdmVyXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0Q29vcmRpbmF0ZXMoKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9wb3ZlciB0byBzcGVjaWZpYyBjb29yZGluYXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb3MgICAgIFRoZSBwb3BvdmVyIGNvb3JkaW5hdGVzIGluIHBpeGVscy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzZXRDb29yZGluYXRlcyhwb3M6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19