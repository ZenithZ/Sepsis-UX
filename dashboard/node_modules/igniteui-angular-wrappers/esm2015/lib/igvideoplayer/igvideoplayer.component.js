/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgVideoPlayerComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
    }
    /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    widget() { return; }
    ;
    /**
     * Hide the add message if shown.
     * @return {?}
     */
    /* istanbul ignore next */
    hideAdMessage() { return; }
    ;
    /**
     * Play a linked commercial for this video.
     *
     * @param {?} commercial     Specify the linked commercial to play.
     * @return {?}
     */
    /* istanbul ignore next */
    playCommercial(commercial) { return; }
    ;
    /**
     * Shows the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    showBanner(index) { return; }
    ;
    /**
     * Hide the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    hideBanner(index) { return; }
    ;
    /**
     * Resets the commercials, to be shown again.
     * @return {?}
     */
    /* istanbul ignore next */
    resetCommercialsShow() { return; }
    ;
    /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     * @return {?}
     */
    /* istanbul ignore next */
    togglePlay() { return; }
    ;
    /**
     * Start playing current loaded video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    play() { return; }
    ;
    /**
     * Pause the currently playing video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    pause() { return; }
    ;
    /**
     * Gets/Sets the current time of the playing video.
     *
     * @param {?} val     Specify the playback position in seconds to navigate to.
     * @return {?}
     */
    /* istanbul ignore next */
    currentTime(val) { return; }
    ;
    /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param {?=} scaleFactor    Specify scale factor between 0 and 1.
     * @return {?}
     */
    /* istanbul ignore next */
    screenshot(scaleFactor) { return; }
    ;
    /**
     * Get whether the current browser supports video tag.
     * @return {?}
     */
    /* istanbul ignore next */
    supportsVideo() { return; }
    ;
    /**
     * Get whether the current browser supports H.264 codec.
     * @return {?}
     */
    /* istanbul ignore next */
    supportsH264BaselineVideo() { return; }
    ;
    /**
     * Get whether the current browser supports Theora codec.
     * @return {?}
     */
    /* istanbul ignore next */
    supportsOggTheoraVideo() { return; }
    ;
    /**
     * Get whether the current browser supports WEBM codec.
     * @return {?}
     */
    /* istanbul ignore next */
    supportsWebmVideo() { return; }
    ;
    /**
     * Returns whether the currently played video is paused.
     * @return {?}
     */
    /* istanbul ignore next */
    paused() { return; }
    ;
    /**
     * Get whether the current played video has ended.
     * @return {?}
     */
    /* istanbul ignore next */
    ended() { return; }
    ;
    /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     * @return {?}
     */
    /* istanbul ignore next */
    duration() { return; }
    ;
    /**
     * Get whether the player is seeking to find the new playback position specified.
     * @return {?}
     */
    /* istanbul ignore next */
    seeking() { return; }
    ;
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgVideoPlayerComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-video-player",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "sources", "width", "height", "posterUrl", "preload", "autoplay", "autohide", "volumeAutohideDelay", "centerButtonHideDelay", "loop", "browserControls", "fullscreen", "volume", "muted", "title", "showSeekTime", "progressLabelFormat", "bookmarks", "relatedVideos", "banners", "commercials"],
                outputs: ["ended", "playing", "paused", "buffering", "progress", "waiting", "bookmarkHit", "bookmarkClick", "enterFullScreen", "exitFullScreen", "relatedVideoClick", "bannerVisible", "bannerHidden", "bannerClick", "browserNotSupported"]
            }] }
];
/** @nocollapse */
IgVideoPlayerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,