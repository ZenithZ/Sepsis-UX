/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgDoughnutChartComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataSource(value) {
        this._dataSource = value;
        /** @type {?} */
        const chart = jQuery(this._el).data(this._widgetName);
        if (chart) {
            jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        super.ngOnInit();
    }
    /**
     * Adds a new series to the doughnut chart.
     *
     * @param {?} seriesObj     The series object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    addSeries(seriesObj) { return; }
    ;
    /**
     * Removes the specified series from the doughnut chart.
     *
     * @param {?} seriesObj     The series object identifying the series to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    removeSeries(seriesObj) { return; }
    ;
    /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param {?} value     The series object identifying the series to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    updateSeries(value) { return; }
    ;
    /**
     * Returns the center of the doughnut chart.
     * @return {?}
     */
    /* istanbul ignore next */
    getCenterCoordinates() { return; }
    ;
    /**
     * Returns the radius of the chart's hole.
     * @return {?}
     */
    /* istanbul ignore next */
    getHoleRadius() { return; }
    ;
    /**
     * Returns information about how the doughnut chart is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    exportVisualData() { return; }
    ;
    /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    flush() { return; }
    ;
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgDoughnutChartComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-doughnut-chart",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "series", "allowSliceSelection", "isSurfaceInteractionDisabled", "allowSliceExplosion", "innerExtent", "selectedStyle"],
                outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip", "tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "sliceClick", "holeDimensionsChanged"]
            }] }
];
/** @nocollapse */
IgDoughnutChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
IgDoughnutChartComponent.propDecorators = {
    dataSource: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgDoughnutChartComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdkb3VnaG51dGNoYXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdkb3VnaG51dGNoYXJ0L2lnZG91Z2hudXRjaGFydC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFRL0QsTUFBTSxPQUFPLHdCQUF5QixTQUFRLGFBQThCOzs7Ozs7OztJQUN4RSxZQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQixJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7OztJQUduTCxJQUNXLFVBQVUsQ0FBQyxLQUFVO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOztjQUNuQixLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNyRCxJQUFJLEtBQUssRUFBRTtZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hGO0lBQ0wsQ0FBQztJQUFBLENBQUM7Ozs7SUFJRixRQUFRO1FBQ0osSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUM3RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNqRDtRQUNELEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7Ozs7OztJQVFNLFNBQVMsQ0FBQyxTQUFpQixJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7SUFRL0MsWUFBWSxDQUFDLFNBQWlCLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVFsRCxZQUFZLENBQUMsS0FBYSxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTlDLG9CQUFvQixLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTNDLGFBQWEsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU1wQyxnQkFBZ0IsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU12QyxLQUFLLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNMUIsT0FBTyxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7O1lBbkZ0QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsMEJBQTBCLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLDhCQUE4QixFQUFFLHFCQUFxQixFQUFFLGFBQWEsRUFBRSxlQUFlLENBQUM7Z0JBQzdWLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxZQUFZLEVBQUUsdUJBQXVCLENBQUM7YUFDMU07Ozs7WUFSbUIsVUFBVTtZQUFFLFFBQVE7WUFBRSxlQUFlO1lBQUUsZUFBZTtZQUFFLGlCQUFpQjs7O3lCQWF4RixLQUFLOzs7Ozs7O0lBU04sK0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmLCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJpZy1kb3VnaG51dC1jaGFydFwiLFxuICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICBpbnB1dHM6IFtcIndpZGdldElkXCIsIFwib3B0aW9uc1wiLCBcImNoYW5nZURldGVjdGlvbkludGVydmFsXCIsIFwiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcInRvb2x0aXBUZW1wbGF0ZVwiLCBcIm1heFJlY0NvdW50XCIsIFwiZGF0YVNvdXJjZVwiLCBcImRhdGFTb3VyY2VUeXBlXCIsIFwiZGF0YVNvdXJjZVVybFwiLCBcInJlc3BvbnNlVG90YWxSZWNDb3VudEtleVwiLCBcInJlc3BvbnNlRGF0YUtleVwiLCBcInNlcmllc1wiLCBcImFsbG93U2xpY2VTZWxlY3Rpb25cIiwgXCJpc1N1cmZhY2VJbnRlcmFjdGlvbkRpc2FibGVkXCIsIFwiYWxsb3dTbGljZUV4cGxvc2lvblwiLCBcImlubmVyRXh0ZW50XCIsIFwic2VsZWN0ZWRTdHlsZVwiXSxcbiAgICBvdXRwdXRzOiBbXCJkYXRhQmluZGluZ1wiLCBcImRhdGFCb3VuZFwiLCBcInVwZGF0ZVRvb2x0aXBcIiwgXCJoaWRlVG9vbHRpcFwiLCBcInRvb2x0aXBTaG93aW5nXCIsIFwidG9vbHRpcFNob3duXCIsIFwidG9vbHRpcEhpZGluZ1wiLCBcInRvb2x0aXBIaWRkZW5cIiwgXCJicm93c2VyTm90U3VwcG9ydGVkXCIsIFwic2xpY2VDbGlja1wiLCBcImhvbGVEaW1lbnNpb25zQ2hhbmdlZFwiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ0RvdWdobnV0Q2hhcnRDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnRG91Z2hudXRDaGFydD4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpOyB9XG5cblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCBkYXRhU291cmNlKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IHZhbHVlO1xuICAgICAgICBjb25zdCBjaGFydCA9IGpRdWVyeSh0aGlzLl9lbCkuZGF0YSh0aGlzLl93aWRnZXROYW1lKTtcbiAgICAgICAgaWYgKGNoYXJ0KSB7XG4gICAgICAgICAgICBqUXVlcnkodGhpcy5fZWwpW3RoaXMuX3dpZGdldE5hbWVdKFwib3B0aW9uXCIsIFwiZGF0YVNvdXJjZVwiLCB0aGlzLl9kYXRhU291cmNlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIF9kYXRhU291cmNlOiBhbnk7XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGFTb3VyY2UgPT09IG51bGwgfHwgdGhpcy5fZGF0YVNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlID0gdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9uc1tcImRhdGFTb3VyY2VcIl0gJiYgdGhpcy5fZGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXSA9IHRoaXMuX2RhdGFTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IHNlcmllcyB0byB0aGUgZG91Z2hudXQgY2hhcnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VyaWVzT2JqICAgICBUaGUgc2VyaWVzIG9iamVjdCB0byBiZSBhZGRlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBhZGRTZXJpZXMoc2VyaWVzT2JqOiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIHNlcmllcyBmcm9tIHRoZSBkb3VnaG51dCBjaGFydC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZXJpZXNPYmogICAgIFRoZSBzZXJpZXMgb2JqZWN0IGlkZW50aWZ5aW5nIHRoZSBzZXJpZXMgdG8gYmUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyByZW1vdmVTZXJpZXMoc2VyaWVzT2JqOiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgc2VyaWVzIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lIHdpdGggdGhlIHNwZWNpZmllZCBuZXcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlICAgICBUaGUgc2VyaWVzIG9iamVjdCBpZGVudGlmeWluZyB0aGUgc2VyaWVzIHRvIGJlIHVwZGF0ZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdXBkYXRlU2VyaWVzKHZhbHVlOiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2VudGVyIG9mIHRoZSBkb3VnaG51dCBjaGFydC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRDZW50ZXJDb29yZGluYXRlcygpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByYWRpdXMgb2YgdGhlIGNoYXJ0J3MgaG9sZS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRIb2xlUmFkaXVzKCk6IG51bWJlciB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRoZSBkb3VnaG51dCBjaGFydCBpcyByZW5kZXJlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBleHBvcnRWaXN1YWxEYXRhKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIENhdXNlcyBhbGwgb2YgdGhlIHNlcmllcyB0aGF0IGhhdmUgcGVuZGluZyBjaGFuZ2VzIGUuZy4gYnkgY2hhbmdlZCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgcmVuZGVyZWQgaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZmx1c2goKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSB3aWRnZXQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xufSJdfQ==