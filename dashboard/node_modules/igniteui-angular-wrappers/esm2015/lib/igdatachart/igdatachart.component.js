/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgDataChartComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataSource(value) {
        this._dataSource = value;
        /** @type {?} */
        const chart = jQuery(this._el).data(this._widgetName);
        if (chart) {
            jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    option() { return; }
    ;
    /**
     * Returns the element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    widget() { return; }
    ;
    /**
     * Returns the ID of parent element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    id() { return; }
    ;
    /**
     * Exports the chart to a PNG image.
     *
     * @param {?=} width     The width of the image.
     * @param {?=} height     The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    exportImage(width, height) { return; }
    ;
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Notify the chart that styles it draws colors from may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    styleUpdated() { return; }
    ;
    /**
     * Resets the zoom level of the chart to default.
     * @return {?}
     */
    /* istanbul ignore next */
    resetZoom() { return; }
    ;
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param {?} item     The item that we want to add to the data source.
     * @param {?} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     * @return {?}
     */
    /* istanbul ignore next */
    addItem(item, targetName) { return; }
    ;
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that we want to insert in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @param {?} targetName     The name of the series or axis bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    insertItem(item, index, targetName) { return; }
    ;
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @param {?} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     * @return {?}
     */
    /* istanbul ignore next */
    removeItem(index, targetName) { return; }
    ;
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param {?} index     The index of the item in the data source that we want to change.
     * @param {?} item     The new item object that will be set in the data source.
     * @param {?} targetName     The name of the series or axis bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    setItem(index, item, targetName) { return; }
    ;
    /**
     * Notifies the chart that an item has been set in an associated data source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source that has been changed.
     * @param {?} newItem     the new item that has been set in the collection.
     * @param {?} oldItem     the old item that has been overwritten in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    notifySetItem(dataSource, index, newItem, oldItem) { return; }
    ;
    /**
     * Notifies the chart that the items have been cleared from an associated data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @return {?}
     */
    /* istanbul ignore next */
    notifyClearItems(dataSource) { return; }
    ;
    /**
     * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source where the new item has been inserted.
     * @param {?} newItem     the new item that has been set in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    notifyInsertItem(dataSource, index, newItem) { return; }
    ;
    /**
     * Notifies the target axis or series that an item has been removed from the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source from where the old item has been removed.
     * @param {?} oldItem     the old item that has been removed from the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    notifyRemoveItem(dataSource, index, oldItem) { return; }
    ;
    /**
     * Notifies the target axis or series that it should scroll the requested data item into view.
     *
     * @param {?} targetName     The name of the axis or series notify.
     * @param {?} item     The data item to bring into view, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    scrollIntoView(targetName, item) { return; }
    ;
    /**
     * Notifies the target axis that it should scale the requested value into chart space from axis space.
     * 				For example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @param {?} unscaledValue     The value in axis space to translate into chart space.
     * @return {?}
     */
    /* istanbul ignore next */
    scaleValue(targetName, unscaledValue) { return; }
    ;
    /**
     * Notifies the target axis that it should unscale the requested value into axis space from chart space.
     * 				For example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @param {?} scaledValue     The value in chart space to translate into axis space.
     * @return {?}
     */
    /* istanbul ignore next */
    unscaleValue(targetName, scaledValue) { return; }
    ;
    /**
     * For the target axis, if using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @return {?}
     */
    /* istanbul ignore next */
    resetCachedEnhancedInterval(targetName) { return; }
    ;
    /**
     * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.
     *
     * @param {?} targetName     The name of the series to notify.
     * @return {?}
     */
    /* istanbul ignore next */
    notifyVisualPropertiesChanged(targetName) { return; }
    ;
    /**
     * Forces any pending deferred work to render on the chart before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    flush() { return; }
    ;
    /**
     * Exports visual data from the chart to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    exportVisualData() { return; }
    ;
    /**
     * Gets the actual minimum value of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the minimum value.
     * @return {?}
     */
    /* istanbul ignore next */
    getActualMinimumValue(targetName) { return; }
    ;
    /**
     * Gets the actual maximum value of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the maximum value.
     * @return {?}
     */
    /* istanbul ignore next */
    getActualMaximumValue(targetName) { return; }
    ;
    /**
     * Gets the actual interval of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the interval.
     * @return {?}
     */
    /* istanbul ignore next */
    getActualInterval(targetName) { return; }
    ;
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    print() { return; }
    ;
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param {?} targetName     The name of the series to render.
     * @param {?} animate     Whether the change should be animated, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    renderSeries(targetName, animate) { return; }
    ;
    /**
     * Gets the item item index associated with the specified world position.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    getItemIndex(targetName, worldPoint) { return; }
    ;
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    getItem(targetName, worldPoint) { return; }
    ;
    /**
     * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    getItemSpan(targetName) { return; }
    ;
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValue(targetName, worldPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValueBoundingBox(targetName, worldPoint) { return; }
    ;
    /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for the world position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValueFineGrainedBoundingBoxes(targetName, worldPoint) { return; }
    ;
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValuePosition(targetName, worldPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValuePositionFromSeriesPixel(targetName, seriesPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValueFromSeriesPixel(targetName, seriesPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the given series pixel coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValueBoundingBoxFromSeriesPixel(targetName, seriesPoint) { return; }
    ;
    /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for series pixel position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel(targetName, worldPoint) { return; }
    ;
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesHighValue(targetName, worldPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesHighValuePosition(targetName, worldPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesHighValuePositionFromSeriesPixel(targetName, seriesPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesHighValueFromSeriesPixel(targetName, seriesPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesLowValue(targetName, worldPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesLowValuePosition(targetName, worldPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesLowValuePositionFromSeriesPixel(targetName, seriesPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesLowValueFromSeriesPixel(targetName, seriesPoint, useInterpolation, skipUnknowns) { return; }
    ;
    /**
     * Gets the item item index associated with the specified series pixel coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    getItemIndexFromSeriesPixel(targetName, seriesPoint) { return; }
    ;
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    getItemFromSeriesPixel(targetName, seriesPoint) { return; }
    ;
    /**
     * Gets the category offset for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesOffsetValue(targetName) { return; }
    ;
    /**
     * Gets the category width for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    getSeriesCategoryWidth(targetName) { return; }
    ;
    /**
     * Replays the transition in animation for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    replayTransitionIn(targetName) { return; }
    ;
    /**
     * Simulates a hover interaction over a given point in the viewport of a series.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The point at which to hover. Should have an x property with type number and a y property with type number.
     * @return {?}
     */
    /* istanbul ignore next */
    simulateHover(targetName, seriesPoint) { return; }
    ;
    /**
     * Moves the cursor point of the target annotation layer to the desired world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The point to which to move the cursor. Should have an x property with type number and a y property with type number.
     * @return {?}
     */
    /* istanbul ignore next */
    moveCursorPoint(targetName, worldPoint) { return; }
    ;
    /**
     * Manually starts a tiled zoom if one isn't already running.
     * @return {?}
     */
    /* istanbul ignore next */
    startTiledZoomingIfNecessary() { return; }
    ;
    /**
     * Manually ends a tiled zoom if one is running.
     * @return {?}
     */
    /* istanbul ignore next */
    endTiledZoomingIfRunning() { return; }
    ;
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
     * @return {?}
     */
    /* istanbul ignore next */
    clearTileZoomCache() { return; }
    ;
}
IgDataChartComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-data-chart",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "isPagePanningAllowed", "syncChannel", "synchronizeVertically", "synchronizeHorizontally", "crosshairPoint", "windowRect", "horizontalZoomable", "verticalZoomable", "windowResponse", "windowRectMinWidth", "overviewPlusDetailPaneVisibility", "crosshairVisibility", "plotAreaBackground", "defaultInteraction", "dragModifier", "panModifier", "previewRect", "windowPositionHorizontal", "windowPositionVertical", "windowScaleHorizontal", "windowScaleVertical", "circleMarkerTemplate", "triangleMarkerTemplate", "pyramidMarkerTemplate", "squareMarkerTemplate", "diamondMarkerTemplate", "pentagonMarkerTemplate", "hexagonMarkerTemplate", "tetragramMarkerTemplate", "pentagramMarkerTemplate", "hexagramMarkerTemplate", "topMargin", "leftMargin", "rightMargin", "bottomMargin", "autoMarginWidth", "autoMarginHeight", "isSquare", "gridMode", "brushes", "markerBrushes", "outlines", "markerOutlines", "width", "height", "size", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "isSurfaceInteractionDisabled", "animateSeriesWhenAxisRangeChanges", "title", "subtitle", "titleTextStyle", "titleTopMargin", "titleLeftMargin", "titleRightMargin", "titleBottomMargin", "subtitleTextStyle", "subtitleTopMargin", "subtitleLeftMargin", "subtitleRightMargin", "subtitleBottomMargin", "titleTextColor", "subtitleTextColor", "titleHorizontalAlignment", "subtitleHorizontalAlignment", "highlightingTransitionDuration", "useTiledZooming", "preferHigherResolutionTiles", "pixelScalingRatio", "zoomTileCacheSize", "contentHitTestMode", "legend", "axes", "series", "theme"],
                outputs: ["tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "seriesCursorMouseMove", "seriesMouseLeftButtonDown", "seriesMouseLeftButtonUp", "seriesMouseMove", "seriesMouseEnter", "seriesMouseLeave", "windowRectChanged", "gridAreaRectChanged", "refreshCompleted", "axisRangeChanged", "typicalBasedOn", "progressiveLoadStatusChanged", "assigningCategoryStyle", "assigningCategoryMarkerStyle"]
            }] }
];
/** @nocollapse */
IgDataChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
IgDataChartComponent.propDecorators = {
    dataSource: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgDataChartComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,