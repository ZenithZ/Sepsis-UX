/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, Optional, NgZone, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
import { NgModel } from "@angular/forms";
export class IgHtmlEditorComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} model
     * @param {?} zone
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, model, zone, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
        this.model = model;
        this.zone = zone;
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => {
        });
        this.onTouched = (/**
         * @return {?}
         */
        () => {
        });
        if (model) {
            model.valueAccessor = this;
            this._zone = zone;
            this._model = model;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        /** @type {?} */
        let that = this;
        if (this._model) {
            /** @type {?} */
            var iframe = jQuery(this._el).find("iframe")[0].contentWindow.document;
            jQuery(iframe).find("body[contenteditable=true]").on("keyup", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that._model.viewToModelUpdate(jQuery(evt.target).html());
                that._zone.run((/**
                 * @return {?}
                 */
                () => {
                    that._model.viewToModelUpdate(jQuery(evt.target).html());
                }));
            }));
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (!!jQuery(this._el).data(this._widgetName) && value !== null && value !== jQuery(this._el)[this._widgetName]("getContent", "html")) {
            jQuery(this._el)[this._widgetName]("setContent", value, "html");
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    widget() { return; }
    ;
    /**
     * Resizes the height of the workspace
     * @return {?}
     */
    /* istanbul ignore next */
    resizeWorkspace() { return; }
    ;
    /**
     * Gets the content of the html editor.
     *
     * @param {?} format Returns the content as html or plain text. Values can be "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    getContent(format) { return; }
    ;
    /**
     * Sets the content of the html editor.
     *
     * @param {?} content The content which will be set.
     * @param {?} format The content type: "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    setContent(content, format) { return; }
    ;
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Executes htmleditor commands.
     *
     * @param {?} actionName The command name.
     * @param {?=} args Additional parameter for the command.
     * @return {?}
     */
    /* istanbul ignore next */
    executeAction(actionName, args) { return; }
    ;
    /**
     * Returns true/false if the editor contents were modified or not.
     * @return {?}
     */
    /* istanbul ignore next */
    isDirty() { return; }
    ;
    /**
     * Returns the window object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    contentWindow() { return; }
    ;
    /**
     * Returns the document object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    contentDocument() { return; }
    ;
    /**
     * Returns the content editable associated with this Html Editor
     * @return {?}
     */
    /* istanbul ignore next */
    contentEditable() { return; }
    ;
    /**
     * Returns Selection object that represent the current selection in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    selection() { return; }
    ;
    /**
     * Returns Range object that represent the current range in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    range() { return; }
    ;
    /**
     * Inserts the provided content at the position of the caret.
     *
     * @param {?} element Accepts html string, DOM element or a jQuery object.
     * @return {?}
     */
    /* istanbul ignore next */
    insertAtCaret(element) { return; }
    ;
}
IgHtmlEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-html-editor",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "showFormattingToolbar", "showTextToolbar", "showInsertObjectToolbar", "showCopyPasteToolbar", "width", "height", "toolbarSettings", "customToolbars", "inputName", "value"],
                outputs: ["rendered", "rendering", "actionExecuting", "actionExecuted", "toolbarCollapsing", "toolbarCollapsed", "toolbarExpanding", "toolbarExpanded", "cut", "copy", "paste", "undo", "redo", "workspaceResized"]
            }] }
];
/** @nocollapse */
IgHtmlEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: NgModel, decorators: [{ type: Optional }] },
    { type: NgZone },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgHtmlEditorComponent.prototype._model;
    /**
     * @type {?}
     * @protected
     */
    IgHtmlEditorComponent.prototype._zone;
    /** @type {?} */
    IgHtmlEditorComponent.prototype.onChange;
    /** @type {?} */
    IgHtmlEditorComponent.prototype.onTouched;
    /** @type {?} */
    IgHtmlEditorComponent.prototype.model;
    /**
     * @type {?}
     * @private
     */
    IgHtmlEditorComponent.prototype.zone;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,