/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgRatingComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
    }
    /**
     * Gets reference to [igValidator](ui.igvalidator) used by igRating.
     *
     * @param {?=} destroy     Request to destroy validator.
     * @return {?}
     */
    /* istanbul ignore next */
    validator(destroy) { return; }
    ;
    /**
     * Triggers validation.
     * @return {?}
     */
    /* istanbul ignore next */
    validate() { return; }
    ;
    /**
     * Gets/Sets (selected) value.
     *
     * @param {?} val     New value which is rendered with selected css.
     * @return {?} number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    value(val) { return; }
    ;
    /**
     * Gets/Sets hover value.
     *
     * @param {?=} val     New value which will be rendered with hover css when rating gets mouse.
     * @return {?} number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    valueHover(val) { return; }
    ;
    /**
     * Checks if igRating has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    hasFocus() { return; }
    ;
    /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     * @return {?}
     */
    /* istanbul ignore next */
    focus() { return; }
    ;
    /**
     * Destroys igRating widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgRatingComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-rating",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "vertical", "value", "valueHover", "voteCount", "voteWidth", "voteHeight", "swapDirection", "valueAsPercent", "focusable", "precision", "precisionZeroVote", "roundedDecimalPlaces", "theme", "validatorOptions", "cssVotes"],
                outputs: ["hoverChange", "valueChange"]
            }] }
];
/** @nocollapse */
IgRatingComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdyYXRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ3JhdGluZy9pZ3JhdGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVEvRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBdUI7Ozs7Ozs7O0lBQzFELFlBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCO1FBQzFILEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7Ozs7SUFRTSxTQUFTLENBQUMsT0FBaUIsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFDLENBQUM7Ozs7OztJQU1sRCxRQUFRLEtBQWMsT0FBTyxDQUFDLENBQUM7SUFBQyxDQUFDOzs7Ozs7OztJQVNqQyxLQUFLLENBQUMsR0FBVyxJQUFtQixPQUFPLENBQUMsQ0FBQztJQUFDLENBQUM7Ozs7Ozs7O0lBUy9DLFVBQVUsQ0FBQyxHQUFZLElBQW1CLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQzs7Ozs7O0lBTXJELFFBQVEsS0FBYyxPQUFPLENBQUMsQ0FBQztJQUFDLENBQUM7Ozs7OztJQU1qQyxLQUFLLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQyxDQUFDOzs7Ozs7SUFNN0IsT0FBTyxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQzs7O1lBM0R6QyxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsT0FBTyxFQUFDLFlBQVksRUFBQyxXQUFXLEVBQUMsV0FBVyxFQUFDLFlBQVksRUFBQyxlQUFlLEVBQUMsZ0JBQWdCLEVBQUMsV0FBVyxFQUFDLFdBQVcsRUFBQyxtQkFBbUIsRUFBQyxzQkFBc0IsRUFBQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsVUFBVSxDQUFDO2dCQUM3UixPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUMsYUFBYSxDQUFDO2FBQ3pDOzs7O1lBUm1CLFVBQVU7WUFBRSxRQUFRO1lBQUUsZUFBZTtZQUFFLGVBQWU7WUFBRSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udHJvbGJhc2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctcmF0aW5nXCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czogW1wid2lkZ2V0SWRcIiwgXCJvcHRpb25zXCIsIFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIixcImRpc2FibGVkXCIsXCJjcmVhdGVcIixcInZlcnRpY2FsXCIsXCJ2YWx1ZVwiLFwidmFsdWVIb3ZlclwiLFwidm90ZUNvdW50XCIsXCJ2b3RlV2lkdGhcIixcInZvdGVIZWlnaHRcIixcInN3YXBEaXJlY3Rpb25cIixcInZhbHVlQXNQZXJjZW50XCIsXCJmb2N1c2FibGVcIixcInByZWNpc2lvblwiLFwicHJlY2lzaW9uWmVyb1ZvdGVcIixcInJvdW5kZWREZWNpbWFsUGxhY2VzXCIsXCJ0aGVtZVwiLFwidmFsaWRhdG9yT3B0aW9uc1wiLFwiY3NzVm90ZXNcIl0sXG4gICAgb3V0cHV0czogW1wiaG92ZXJDaGFuZ2VcIixcInZhbHVlQ2hhbmdlXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnUmF0aW5nQ29tcG9uZW50IGV4dGVuZHMgSWdDb250cm9sQmFzZTxJZ1JhdGluZz4geyBcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgXG4gICAgICAgIHN1cGVyKGVsLCByZW5kZXJlciwgZGlmZmVycywga3ZhbERpZmZlcnMsIGNkcik7XG4gICAgfVx0XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHJlZmVyZW5jZSB0byBbaWdWYWxpZGF0b3JdKHVpLmlndmFsaWRhdG9yKSB1c2VkIGJ5IGlnUmF0aW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlc3Ryb3kgICAgIFJlcXVlc3QgdG8gZGVzdHJveSB2YWxpZGF0b3IuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdmFsaWRhdG9yKGRlc3Ryb3k/OiBib29sZWFuKTogT2JqZWN0IHsgcmV0dXJuOyB9IDtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIHZhbGlkYXRpb24uXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdmFsaWRhdGUoKTogYm9vbGVhbiB7IHJldHVybjsgfSA7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgKHNlbGVjdGVkKSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWwgICAgIE5ldyB2YWx1ZSB3aGljaCBpcyByZW5kZXJlZCB3aXRoIHNlbGVjdGVkIGNzcy5cbiAgICAgKiBAcmV0dXJuIG51bWJlcnxvYmplY3QgICAgIElmIHBhcmFtZXRlciBpcyBub3QgJ251bWJlcicsIHRoZW4gZXhhY3QgdmFsdWUgcmVuZGVyZWQgd2l0aCBzZWxlY3RlZCBjc3MgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSwgcmVmZXJlbmNlIHRvIGlnUmF0aW5nIGlzIHJldHVybmVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHZhbHVlKHZhbDogbnVtYmVyKTogbnVtYmVyfE9iamVjdCB7IHJldHVybjsgfSA7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgaG92ZXIgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsICAgICBOZXcgdmFsdWUgd2hpY2ggd2lsbCBiZSByZW5kZXJlZCB3aXRoIGhvdmVyIGNzcyB3aGVuIHJhdGluZyBnZXRzIG1vdXNlLlxuICAgICAqIEByZXR1cm4gbnVtYmVyfG9iamVjdCAgICAgSWYgcGFyYW1ldGVyIGlzIG5vdCBcIm51bWJlclwiLCB0aGVuIGxhc3QgdmFsdWUgd2hpY2ggd2FzIHJlbmRlcmVkIHdpdGggaG92ZXIgY3NzIGlzIHJldHVybmVkLiBPdGhlcndpc2UsIHJlZmVyZW5jZSB0byBpZ1JhdGluZyBpcyByZXR1cm5lZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB2YWx1ZUhvdmVyKHZhbD86IG51bWJlcik6IG51bWJlcnxPYmplY3QgeyByZXR1cm47IH0gO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGlnUmF0aW5nIGhhcyBmb2N1cy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBoYXNGb2N1cygpOiBib29sZWFuIHsgcmV0dXJuOyB9IDtcblxuICAgIC8qKlxuICAgICAqIFNldHMgZm9jdXMgdG8gaWdSYXRpbmcuIFRoYXQgaGFzIGVmZmVjdCBvbmx5IHdoZW4gb3B0aW9ucy5mb2N1c2FibGUgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBmb2N1cygpOiBPYmplY3QgeyByZXR1cm47IH0gO1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgaWdSYXRpbmcgd2lkZ2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogT2JqZWN0IHsgcmV0dXJuOyB9IDtcbn0iXX0=