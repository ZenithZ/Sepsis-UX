/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from "@angular/core";
/**
 * @template Model
 */
export class Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        this._settings = {};
        this._el = el;
        this.name = this.normalizeName(el.nativeElement.nodeName.toLowerCase());
        this.featureName = "igGrid" + this.name;
        for (var propt in jQuery.ui["igGrid" + this.name].prototype.events) {
            this[propt] = new EventEmitter();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let self = this;
        this.initSettings = jQuery.extend(true, {}, this);
        /** @type {?} */
        let evtName;
        this._events = new Map();
        /** @type {?} */
        let grid = jQuery(this._el.nativeElement).closest("ig-grid").find("table");
        //event binding for features
        for (var propt in jQuery.ui[this.featureName].prototype.events) {
            evtName = this.featureName.toLowerCase() + propt.toLowerCase();
            this._events[evtName] = propt;
            jQuery(grid).on(evtName, (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                self[self._events[evt.type]].emit({ event: evt, ui: ui });
            }));
        }
        for (var setting in jQuery.ui[this.featureName].prototype.options) {
            Object.defineProperty(self, setting, {
                set: self.createFeatureSetter(setting),
                get: self.createFeatureGetter(setting),
                enumerable: true,
                configurable: true
            });
        }
        /** @type {?} */
        var propNames = Object.getOwnPropertyNames(jQuery.ui[this.featureName].prototype);
        for (var i = 0; i < propNames.length; i++) {
            /** @type {?} */
            var name = propNames[i];
            if (name.indexOf("_") !== 0 && typeof jQuery.ui[this.featureName].prototype[name] === "function") {
                Object.defineProperty(self, name, {
                    get: self.createMethodGetter(name)
                });
            }
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    createFeatureSetter(name) {
        return (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            let grid = jQuery(this._el.nativeElement).closest("ig-grid").find("table[role='grid']");
            this._settings[name] = value;
            if (jQuery.ui[this.featureName] &&
                jQuery.ui[this.featureName].prototype.options &&
                jQuery.ui[this.featureName].prototype.options.hasOwnProperty(name) &&
                grid.data(this.featureName)) {
                grid[this.featureName]("option", name, value);
            }
        });
    }
    /**
     * @param {?} name
     * @return {?}
     */
    createFeatureGetter(name) {
        return (/**
         * @return {?}
         */
        function () {
            return this._settings[name];
        });
    }
    /**
     * @param {?} name
     * @return {?}
     */
    createMethodGetter(name) {
        return (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            let grid = jQuery(this._el.nativeElement).closest("ig-grid").find("table[role='grid']");
            if (grid.length === 0) {
                grid = jQuery(this._el.nativeElement).closest("ig-hierarchical-grid").find("table[role='grid']");
            }
            /** @type {?} */
            var args = [];
            /** @type {?} */
            var feature = grid.data(this.featureName);
            return jQuery.proxy(feature[name], feature);
        });
    }
    /**
     * @param {?} str
     * @return {?}
     */
    normalizeName(str) {
        //convert hyphen to camelCase
        /** @type {?} */
        let name = str.replace(/-([a-z])/g, (/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            return group[1].toUpperCase();
        }));
        return name.charAt(0).toUpperCase() + name.slice(1);
    }
}
if (false) {
    /** @type {?} */
    Feature.prototype._el;
    /** @type {?} */
    Feature.prototype._settings;
    /** @type {?} */
    Feature.prototype.initSettings;
    /** @type {?} */
    Feature.prototype.name;
    /**
     * @type {?}
     * @private
     */
    Feature.prototype._events;
    /**
     * @type {?}
     * @private
     */
    Feature.prototype.featureName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2ZlYXR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBYyxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFJekQsTUFBTSxPQUFPLE9BQU87Ozs7SUFRaEIsWUFBWSxFQUFjO1FBTm5CLGNBQVMsR0FBUSxFQUFFLENBQUM7UUFPdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3hDLEtBQUssSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDaEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7U0FDcEM7SUFDTCxDQUFDOzs7O0lBRUQsUUFBUTs7WUFDQSxJQUFJLEdBQUcsSUFBSTtRQUNmLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDOztZQUM5QyxPQUFPO1FBQ1gsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQzs7WUFDckMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRTFFLDRCQUE0QjtR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MkI7O0lBQzNCLCtCQUEyQjs7SUFDM0IsdUJBQW9COzs7OztJQUNwQiwwQkFBcUI7Ozs7O0lBQ3JCLDhCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmRlY2xhcmUgdmFyIGpRdWVyeTogYW55O1xuXG5leHBvcnQgY2xhc3MgRmVhdHVyZTxNb2RlbD4ge1xuICAgIHB1YmxpYyBfZWw6IGFueTtcbiAgICBwdWJsaWMgX3NldHRpbmdzOiBhbnkgPSB7fTtcbiAgICBwdWJsaWMgaW5pdFNldHRpbmdzOiBNb2RlbDtcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX2V2ZW50czogYW55O1xuICAgIHByaXZhdGUgZmVhdHVyZU5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHRoaXMuX2VsID0gZWw7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMubm9ybWFsaXplTmFtZShlbC5uYXRpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB0aGlzLmZlYXR1cmVOYW1lID0gXCJpZ0dyaWRcIiArIHRoaXMubmFtZTtcbiAgICAgICAgZm9yICh2YXIgcHJvcHQgaW4galF1ZXJ5LnVpW1wiaWdHcmlkXCIgKyB0aGlzLm5hbWVdLnByb3RvdHlwZS5ldmVudHMpIHtcbiAgICAgICAgICAgIHRoaXNbcHJvcHRdID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5pbml0U2V0dGluZ3MgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIHt9LCB0aGlzKTtcbiAgICAgICAgbGV0IGV2dE5hbWU7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgICAgIGxldCBncmlkID0galF1ZXJ5KHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQpLmNsb3Nlc3QoXCJpZy1ncmlkXCIpLmZpbmQoXCJ0YWJsZVwiKTtcblxuICAgICAgICAvL2V2ZW50IGJpbmRpbmcgZm9yIGZlYXR1cmVzXG4gICAgICAgIGZvciAodmFyIHByb3B0IGluIGpRdWVyeS51aVt0aGlzLmZlYXR1cmVOYW1lXS5wcm90b3R5cGUuZXZlbnRzKSB7XG4gICAgICAgICAgICBldnROYW1lID0gdGhpcy5mZWF0dXJlTmFtZS50b0xvd2VyQ2FzZSgpICsgcHJvcHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldnROYW1lXSA9IHByb3B0O1xuICAgICAgICAgICAgalF1ZXJ5KGdyaWQpLm9uKGV2dE5hbWUsIGZ1bmN0aW9uIChldnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgc2VsZltzZWxmLl9ldmVudHNbZXZ0LnR5cGVdXS5lbWl0KHsgZXZlbnQ6IGV2dCwgdWk6IHVpIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgc2V0dGluZyBpbiBqUXVlcnkudWlbdGhpcy5mZWF0dXJlTmFtZV0ucHJvdG90eXBlLm9wdGlvbnMpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBzZXR0aW5nLCB7XG4gICAgICAgICAgICAgICAgc2V0OiBzZWxmLmNyZWF0ZUZlYXR1cmVTZXR0ZXIoc2V0dGluZyksXG4gICAgICAgICAgICAgICAgZ2V0OiBzZWxmLmNyZWF0ZUZlYXR1cmVHZXR0ZXIoc2V0dGluZyksXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhqUXVlcnkudWlbdGhpcy5mZWF0dXJlTmFtZV0ucHJvdG90eXBlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gcHJvcE5hbWVzW2ldO1xuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZihcIl9cIikgIT09IDAgJiYgdHlwZW9mIGpRdWVyeS51aVt0aGlzLmZlYXR1cmVOYW1lXS5wcm90b3R5cGVbbmFtZV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogc2VsZi5jcmVhdGVNZXRob2RHZXR0ZXIobmFtZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUZlYXR1cmVTZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgZ3JpZCA9IGpRdWVyeSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50KS5jbG9zZXN0KFwiaWctZ3JpZFwiKS5maW5kKFwidGFibGVbcm9sZT0nZ3JpZCddXCIpO1xuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3NbbmFtZV0gPSB2YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGpRdWVyeS51aVt0aGlzLmZlYXR1cmVOYW1lXSAmJlxuICAgICAgICAgICAgICAgIGpRdWVyeS51aVt0aGlzLmZlYXR1cmVOYW1lXS5wcm90b3R5cGUub3B0aW9ucyAmJlxuICAgICAgICAgICAgICAgIGpRdWVyeS51aVt0aGlzLmZlYXR1cmVOYW1lXS5wcm90b3R5cGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICAgICAgIGdyaWQuZGF0YSh0aGlzLmZlYXR1cmVOYW1lKSkge1xuICAgICAgICAgICAgICAgIGdyaWRbdGhpcy5mZWF0dXJlTmFtZV0oXCJvcHRpb25cIiwgbmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlRmVhdHVyZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3NbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlTWV0aG9kR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBncmlkID0galF1ZXJ5KHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQpLmNsb3Nlc3QoXCJpZy1ncmlkXCIpLmZpbmQoXCJ0YWJsZVtyb2xlPSdncmlkJ11cIik7XG4gICAgICAgICAgICBpZiAoZ3JpZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBncmlkID0galF1ZXJ5KHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQpLmNsb3Nlc3QoXCJpZy1oaWVyYXJjaGljYWwtZ3JpZFwiKS5maW5kKFwidGFibGVbcm9sZT0nZ3JpZCddXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlID0gZ3JpZC5kYXRhKHRoaXMuZmVhdHVyZU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5wcm94eShmZWF0dXJlW25hbWVdLCBmZWF0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5vcm1hbGl6ZU5hbWUoc3RyKSB7XG4gICAgICAgIC8vY29udmVydCBoeXBoZW4gdG8gY2FtZWxDYXNlXG4gICAgICAgIGxldCBuYW1lID0gc3RyLnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgcmV0dXJuIGdyb3VwWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgICB9XG59Il19