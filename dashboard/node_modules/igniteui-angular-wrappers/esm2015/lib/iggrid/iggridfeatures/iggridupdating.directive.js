/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
export class IgGridUpdatingFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
     * 			If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
     *
     * @param {?} rowId    The primary key of the row the cell is a child of.
     * @param {?} colKey    The column key of the cell.
     * @param {?} value    The new value for the cell.
     * @return {?}
     */
    /* istanbul ignore next */
    setCellValue(rowId, colKey, value) { return; }
    ;
    /**
     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
     * 			If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
     *
     * @param {?} rowId    The primary key of the row to update.
     * @param {?} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     * @return {?}
     */
    /* istanbul ignore next */
    updateRow(rowId, values) { return; }
    ;
    /**
     * Adds a new row to the grid. It also creates a transaction and updates the UI.
     *
     * @param {?} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     * @return {?}
     */
    /* istanbul ignore next */
    addRow(values) { return; }
    ;
    /**
     * Deletes a row from the grid. It also creates a transaction and updates the UI.
     *
     * @param {?} rowId    The primary key of the row to delete.
     * @return {?}
     */
    /* istanbul ignore next */
    deleteRow(rowId) { return; }
    ;
    /**
     * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
     *
     * @param {?} rowId    The row id.
     * @param {?} column    The column key or index.
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    startEdit(rowId, column, raiseEvents) { return; }
    ;
    /**
     * Starts editing for adding a new row.
     *
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    startAddRowEdit(raiseEvents) { return; }
    ;
    /**
     * Ends the currently active edit mode.
     *
     * @param {?=} update    Specifies if the edit process should accept the current changes. Default is 'false'.
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    endEdit(update, raiseEvents) { return; }
    ;
    /**
     * Finds and returns the key of the first column the editor for which has invalid value.
     * @return {?}
     */
    /* istanbul ignore next */
    findInvalid() { return; }
    ;
    /**
     * Checks if the grid is in edit mode.
     * @return {?}
     */
    /* istanbul ignore next */
    isEditing() { return; }
    ;
    /**
     * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
     *
     * @param {?} key    The key of the column.
     * @return {?}
     */
    /* istanbul ignore next */
    editorForKey(key) { return; }
    ;
    /**
     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
     *
     * @param {?} cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
     * @param {?=} create    Requests to create the editor if it has not been created yet.
     * @return {?}
     */
    /* istanbul ignore next */
    editorForCell(cell, create) { return; }
    ;
    /**
     * Destroys igGridUpdating.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Shows the delete button for specific row.
     *
     * @param {?} row    A jQuery object of the targeted row.
     * @return {?}
     */
    /* istanbul ignore next */
    showDeleteButtonFor(row) { return; }
    ;
    /**
     * Hides the delete button.
     * @return {?}
     */
    /* istanbul ignore next */
    hideDeleteButton() { return; }
    ;
}
IgGridUpdatingFeature.decorators = [
    { type: Directive, args: [{
                selector: 'updating',
                inputs: ["disabled", "create", "columnSettings", "editMode", "enableDeleteRow", "enableAddRow", "validation", "doneLabel", "doneTooltip", "cancelLabel", "cancelTooltip", "addRowLabel", "addRowTooltip", "deleteRowLabel", "deleteRowTooltip", "showDoneCancelButtons", "enableDataDirtyException", "startEditTriggers", "horizontalMoveOnEnter", "excelNavigationMode", "saveChangesSuccessHandler", "saveChangesErrorHandler", "swipeDistance", "wrapAround", "rowEditDialogOptions", "dialogWidget", "inherit"],
                outputs: ["editRowStarting", "editRowStarted", "editRowEnding", "editRowEnded", "editCellStarting", "editCellStarted", "editCellEnding", "editCellEnded", "rowAdding", "rowAdded", "rowDeleting", "rowDeleted", "dataDirty", "generatePrimaryKeyValue", "rowEditDialogBeforeOpen", "rowEditDialogAfterOpen", "rowEditDialogBeforeClose", "rowEditDialogAfterClose", "rowEditDialogContentsRendered"]
            },] }
];
/** @nocollapse */
IgGridUpdatingFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,