/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from "@angular/core";
import { Feature } from "../feature";
export class IgGridSelectionFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Destroys the selection widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     * @return {?}
     */
    /* istanbul ignore next */
    clearSelection() { return; }
    ;
    /**
     * Selects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    selectCell(row, col, isFixed) { return; }
    ;
    /**
     * Selects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    selectCellById(id, colKey) { return; }
    ;
    /**
     * Deselects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    deselectCell(row, col, isFixed) { return; }
    ;
    /**
     * Deselects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    deselectCellById(id, colKey) { return; }
    ;
    /**
     * Selects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    selectRow(index) { return; }
    ;
    /**
     * Selects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    selectRowById(id) { return; }
    ;
    /**
     * Deselects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    deselectRow(index) { return; }
    ;
    /**
     * Deselects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    deselectRowById(id) { return; }
    ;
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    selectedCells() { return; }
    ;
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    selectedRows() { return; }
    ;
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    selectedCell() { return; }
    ;
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    selectedRow() { return; }
    ;
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    activeCell() { return; }
    ;
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    activeRow() { return; }
    ;
}
IgGridSelectionFeature.decorators = [
    { type: Directive, args: [{
                selector: 'selection',
                inputs: ["disabled", "create", "multipleSelection", "mouseDragSelect", "mode", "activation", "wrapAround", "skipChildren", "multipleCellSelectOnClick", "touchDragSelect", "persist", "allowMultipleRangeSelection"],
                outputs: ["rowSelectionChanging", "rowSelectionChanged", "cellSelectionChanging", "cellSelectionChanged", "activeCellChanging", "activeCellChanged", "activeRowChanging", "activeRowChanged"]
            },] }
];
/** @nocollapse */
IgGridSelectionFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,