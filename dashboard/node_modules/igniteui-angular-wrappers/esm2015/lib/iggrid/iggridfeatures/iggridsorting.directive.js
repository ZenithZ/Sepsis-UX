/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
export class IgGridSortingFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Sorts the data in a grid column  and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} direction     Specifies sorting direction (ascending or descending)
     * @param {?} header
     * @return {?}
     */
    /* istanbul ignore next */
    sortColumn(index, direction, header) { return; }
    ;
    /**
     * Sorts the data in grid columns and updates the UI.\
     * @return {?}
     */
    /* istanbul ignore next */
    sortMultiple() { return; }
    ;
    /**
     * Removes current sorting(for all sorted columns) and updates the UI.
     * @return {?}
     */
    /* istanbul ignore next */
    clearSorting() { return; }
    ;
    /**
     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} header     - if specified client events should be fired
     * @return {?}
     */
    /* istanbul ignore next */
    unsortColumn(index, header) { return; }
    ;
    /**
     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Opens the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    openMultipleSortingDialog() { return; }
    ;
    /**
     * Closes the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    closeMultipleSortingDialog() { return; }
    ;
    /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param {?} isToCallEvents
     * @return {?}
     */
    /* istanbul ignore next */
    renderMultipleSortingDialogContent(isToCallEvents) { return; }
    ;
    /**
     * Remove clear button for multiple sorting dialog
     * @return {?}
     */
    /* istanbul ignore next */
    removeDialogClearButton() { return; }
    ;
}
IgGridSortingFeature.decorators = [
    { type: Directive, args: [{
                selector: 'sorting',
                inputs: ["disabled", "create", "type", "caseSensitive", "applySortedColumnCss", "sortUrlKey", "sortUrlKeyAscValue", "sortUrlKeyDescValue", "mode", "customSortFunction", "firstSortDirection", "sortedColumnTooltip", "modalDialogSortOnClick", "modalDialogSortByButtonText", "modalDialogResetButtonLabel", "modalDialogCaptionButtonDesc", "modalDialogCaptionButtonAsc", "modalDialogCaptionButtonUnsort", "modalDialogWidth", "modalDialogHeight", "modalDialogAnimationDuration", "featureChooserText", "unsortedColumnTooltip", "columnSettings", "modalDialogCaptionText", "modalDialogButtonApplyText", "modalDialogButtonCancelText", "featureChooserSortAsc", "featureChooserSortDesc", "persist", "sortingDialogContainment", "dialogWidget", "inherit"],
                outputs: ["columnSorting", "columnSorted", "modalDialogOpening", "modalDialogOpened", "modalDialogMoving", "modalDialogClosing", "modalDialogClosed", "modalDialogContentsRendering", "modalDialogContentsRendered", "modalDialogSortingChanged", "modalDialogButtonUnsortClick", "modalDialogSortClick", "modalDialogButtonApplyClick", "modalDialogButtonResetClick"]
            },] }
];
/** @nocollapse */
IgGridSortingFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkc29ydGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnZ3JpZC9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRzb3J0aW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQU9yQyxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsT0FBc0I7Ozs7SUFDNUQsWUFBWSxFQUFjO1FBQ3RCLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNkLENBQUM7Ozs7Ozs7Ozs7SUFVTSxVQUFVLENBQUMsS0FBYSxFQUFFLFNBQWlCLEVBQUUsTUFBYyxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTS9FLFlBQVksS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU1qQyxZQUFZLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7Ozs7SUFTakMsWUFBWSxDQUFDLEtBQWEsRUFBRSxNQUFjLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNOUQsT0FBTyxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTVCLHlCQUF5QixLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTlDLDBCQUEwQixLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7SUFRL0Msa0NBQWtDLENBQUMsY0FBc0IsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU03RSx1QkFBdUIsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7OztZQXZFdEQsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxTQUFTO2dCQUNuQixNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsc0JBQXNCLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBRSx3QkFBd0IsRUFBRSw2QkFBNkIsRUFBRSw2QkFBNkIsRUFBRSw4QkFBOEIsRUFBRSw2QkFBNkIsRUFBRSxnQ0FBZ0MsRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSw4QkFBOEIsRUFBRSxvQkFBb0IsRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSw0QkFBNEIsRUFBRSw2QkFBNkIsRUFBRSx1QkFBdUIsRUFBRSx3QkFBd0IsRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztnQkFDcHVCLE9BQU8sRUFBRSxDQUFDLGVBQWUsRUFBRSxjQUFjLEVBQUUsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsOEJBQThCLEVBQUUsNkJBQTZCLEVBQUUsMkJBQTJCLEVBQUUsOEJBQThCLEVBQUUsc0JBQXNCLEVBQUUsNkJBQTZCLEVBQUUsNkJBQTZCLENBQUM7YUFDMVc7Ozs7WUFQUSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tIFwiLi4vZmVhdHVyZVwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3NvcnRpbmcnLFxuICAgIGlucHV0czogW1wiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJ0eXBlXCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImFwcGx5U29ydGVkQ29sdW1uQ3NzXCIsIFwic29ydFVybEtleVwiLCBcInNvcnRVcmxLZXlBc2NWYWx1ZVwiLCBcInNvcnRVcmxLZXlEZXNjVmFsdWVcIiwgXCJtb2RlXCIsIFwiY3VzdG9tU29ydEZ1bmN0aW9uXCIsIFwiZmlyc3RTb3J0RGlyZWN0aW9uXCIsIFwic29ydGVkQ29sdW1uVG9vbHRpcFwiLCBcIm1vZGFsRGlhbG9nU29ydE9uQ2xpY2tcIiwgXCJtb2RhbERpYWxvZ1NvcnRCeUJ1dHRvblRleHRcIiwgXCJtb2RhbERpYWxvZ1Jlc2V0QnV0dG9uTGFiZWxcIiwgXCJtb2RhbERpYWxvZ0NhcHRpb25CdXR0b25EZXNjXCIsIFwibW9kYWxEaWFsb2dDYXB0aW9uQnV0dG9uQXNjXCIsIFwibW9kYWxEaWFsb2dDYXB0aW9uQnV0dG9uVW5zb3J0XCIsIFwibW9kYWxEaWFsb2dXaWR0aFwiLCBcIm1vZGFsRGlhbG9nSGVpZ2h0XCIsIFwibW9kYWxEaWFsb2dBbmltYXRpb25EdXJhdGlvblwiLCBcImZlYXR1cmVDaG9vc2VyVGV4dFwiLCBcInVuc29ydGVkQ29sdW1uVG9vbHRpcFwiLCBcImNvbHVtblNldHRpbmdzXCIsIFwibW9kYWxEaWFsb2dDYXB0aW9uVGV4dFwiLCBcIm1vZGFsRGlhbG9nQnV0dG9uQXBwbHlUZXh0XCIsIFwibW9kYWxEaWFsb2dCdXR0b25DYW5jZWxUZXh0XCIsIFwiZmVhdHVyZUNob29zZXJTb3J0QXNjXCIsIFwiZmVhdHVyZUNob29zZXJTb3J0RGVzY1wiLCBcInBlcnNpc3RcIiwgXCJzb3J0aW5nRGlhbG9nQ29udGFpbm1lbnRcIiwgXCJkaWFsb2dXaWRnZXRcIiwgXCJpbmhlcml0XCJdLFxuICAgIG91dHB1dHM6IFtcImNvbHVtblNvcnRpbmdcIiwgXCJjb2x1bW5Tb3J0ZWRcIiwgXCJtb2RhbERpYWxvZ09wZW5pbmdcIiwgXCJtb2RhbERpYWxvZ09wZW5lZFwiLCBcIm1vZGFsRGlhbG9nTW92aW5nXCIsIFwibW9kYWxEaWFsb2dDbG9zaW5nXCIsIFwibW9kYWxEaWFsb2dDbG9zZWRcIiwgXCJtb2RhbERpYWxvZ0NvbnRlbnRzUmVuZGVyaW5nXCIsIFwibW9kYWxEaWFsb2dDb250ZW50c1JlbmRlcmVkXCIsIFwibW9kYWxEaWFsb2dTb3J0aW5nQ2hhbmdlZFwiLCBcIm1vZGFsRGlhbG9nQnV0dG9uVW5zb3J0Q2xpY2tcIiwgXCJtb2RhbERpYWxvZ1NvcnRDbGlja1wiLCBcIm1vZGFsRGlhbG9nQnV0dG9uQXBwbHlDbGlja1wiLCBcIm1vZGFsRGlhbG9nQnV0dG9uUmVzZXRDbGlja1wiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ0dyaWRTb3J0aW5nRmVhdHVyZSBleHRlbmRzIEZlYXR1cmU8SWdHcmlkU29ydGluZz4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTb3J0cyB0aGUgZGF0YSBpbiBhIGdyaWQgY29sdW1uICBhbmQgdXBkYXRlcyB0aGUgVUkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXggICAgIENvbHVtbiBrZXkgKHN0cmluZykgb3IgaW5kZXggKG51bWJlcikgLSBmb3IgbXVsdGktcm93IGdyaWQgb25seSBjb2x1bW4ga2V5IGNhbiBiZSB1c2VkLiBTcGVjaWZpZXMgdGhlIGNvbHVtbiB3aGljaCB3ZSB3YW50IHRvIHNvcnQuIElmIHRoZSBtb2RlIGlzIG11bHRpcGxlLCBwcmV2aW91cyBzb3J0aW5nIHN0YXRlcyBhcmUgbm90IGNsZWFyZWQuXG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiAgICAgU3BlY2lmaWVzIHNvcnRpbmcgZGlyZWN0aW9uIChhc2NlbmRpbmcgb3IgZGVzY2VuZGluZylcbiAgICAgKiBAcGFyYW0gaGVhZGVyICAgICBcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzb3J0Q29sdW1uKGluZGV4OiBPYmplY3QsIGRpcmVjdGlvbjogT2JqZWN0LCBoZWFkZXI6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBTb3J0cyB0aGUgZGF0YSBpbiBncmlkIGNvbHVtbnMgYW5kIHVwZGF0ZXMgdGhlIFVJLlxcXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc29ydE11bHRpcGxlKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGN1cnJlbnQgc29ydGluZyhmb3IgYWxsIHNvcnRlZCBjb2x1bW5zKSBhbmQgdXBkYXRlcyB0aGUgVUkuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgY2xlYXJTb3J0aW5nKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHNvcnRpbmcgZm9yIHRoZSBncmlkIGNvbHVtbiB3aXRoIHRoZSBzcGVjaWZpZWQgY29sdW1uS2V5L2NvbHVtbkluZGV4IGFuZCB1cGRhdGVzIHRoZSBVSS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCAgICAgQ29sdW1uIGtleSAoc3RyaW5nKSBvciBpbmRleCAobnVtYmVyKSAtIGZvciBtdWx0aS1yb3cgZ3JpZCBvbmx5IGNvbHVtbiBrZXkgY2FuIGJlIHVzZWQuIFNwZWNpZmllcyB0aGUgY29sdW1uIGZvciB3aGljaCB3ZSB3YW50IHRvIHJlbW92ZSBzb3J0aW5nLiBJZiB0aGUgbW9kZSBpcyBtdWx0aXBsZSwgcHJldmlvdXMgc29ydGluZyBzdGF0ZXMgYXJlIG5vdCBjbGVhcmVkLlxuICAgICAqIEBwYXJhbSBoZWFkZXIgICAgIC0gaWYgc3BlY2lmaWVkIGNsaWVudCBldmVudHMgc2hvdWxkIGJlIGZpcmVkXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdW5zb3J0Q29sdW1uKGluZGV4OiBPYmplY3QsIGhlYWRlcjogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBzb3J0aW5nIGZlYXR1cmUuIFVuYmluZHMgZXZlbnRzLCByZW1vdmVzIGFkZGVkIHNvcnRpbmcgZWxlbWVudHMsIGV0Yy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgbXVsdGlwbGUgc29ydGluZyBkaWFsb2cuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgb3Blbk11bHRpcGxlU29ydGluZ0RpYWxvZygpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBtdWx0aXBsZSBzb3J0aW5nIGRpYWxvZy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBjbG9zZU11bHRpcGxlU29ydGluZ0RpYWxvZygpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBjb250ZW50IG9mIG11bHRpcGxlIHNvcnRpbmcgZGlhbG9nIC0gc29ydGVkIGFuZCB1bnNvcnRlZCBjb2x1bW5zLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlzVG9DYWxsRXZlbnRzIFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHJlbmRlck11bHRpcGxlU29ydGluZ0RpYWxvZ0NvbnRlbnQoaXNUb0NhbGxFdmVudHM6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgY2xlYXIgYnV0dG9uIGZvciBtdWx0aXBsZSBzb3J0aW5nIGRpYWxvZ1xuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHJlbW92ZURpYWxvZ0NsZWFyQnV0dG9uKCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19