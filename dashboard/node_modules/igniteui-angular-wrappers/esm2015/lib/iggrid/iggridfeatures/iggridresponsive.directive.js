/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Feature } from "../feature";
import { ElementRef, Directive } from "@angular/core";
export class IgGridResponsiveFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Destroys the responsive widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Returns the currently active responsive mode.
     * @return {?}
     */
    /* istanbul ignore next */
    getCurrentResponsiveMode() { return; }
    ;
}
IgGridResponsiveFeature.decorators = [
    { type: Directive, args: [{
                selector: 'responsive',
                inputs: ["disabled", "create", "columnSettings", "reactOnContainerWidthChanges", "forceResponsiveGridWidth", "responsiveSensitivity", "responsiveModes", "enableVerticalRendering", "windowWidthToRenderVertically", "propertiesColumnWidth", "valuesColumnWidth", "allowedColumnWidthPerType", "singleColumnTemplate", "inherit"],
                outputs: ["responsiveColumnHiding", "responsiveColumnHidden", "responsiveColumnShowing", "responsiveColumnShown", "responsiveModeChanged"]
            },] }
];
/** @nocollapse */
IgGridResponsiveFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkcmVzcG9uc2l2ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnZ3JpZC9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRyZXNwb25zaXZlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU90RCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsT0FBeUI7Ozs7SUFDbEUsWUFBWSxFQUFjO1FBQ3RCLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNkLENBQUM7Ozs7OztJQU1NLE9BQU8sS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU01Qix3QkFBd0IsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7OztZQXBCdkQsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLDhCQUE4QixFQUFFLDBCQUEwQixFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLHlCQUF5QixFQUFFLCtCQUErQixFQUFFLHVCQUF1QixFQUFFLG1CQUFtQixFQUFFLDJCQUEyQixFQUFFLHNCQUFzQixFQUFFLFNBQVMsQ0FBQztnQkFDbFUsT0FBTyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsd0JBQXdCLEVBQUUseUJBQXlCLEVBQUUsdUJBQXVCLEVBQUUsdUJBQXVCLENBQUM7YUFDN0k7Ozs7WUFOUSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gXCIuLi9mZWF0dXJlXCI7XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBEaXJlY3RpdmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3Jlc3BvbnNpdmUnLFxuICAgIGlucHV0czogW1wiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJjb2x1bW5TZXR0aW5nc1wiLCBcInJlYWN0T25Db250YWluZXJXaWR0aENoYW5nZXNcIiwgXCJmb3JjZVJlc3BvbnNpdmVHcmlkV2lkdGhcIiwgXCJyZXNwb25zaXZlU2Vuc2l0aXZpdHlcIiwgXCJyZXNwb25zaXZlTW9kZXNcIiwgXCJlbmFibGVWZXJ0aWNhbFJlbmRlcmluZ1wiLCBcIndpbmRvd1dpZHRoVG9SZW5kZXJWZXJ0aWNhbGx5XCIsIFwicHJvcGVydGllc0NvbHVtbldpZHRoXCIsIFwidmFsdWVzQ29sdW1uV2lkdGhcIiwgXCJhbGxvd2VkQ29sdW1uV2lkdGhQZXJUeXBlXCIsIFwic2luZ2xlQ29sdW1uVGVtcGxhdGVcIiwgXCJpbmhlcml0XCJdLFxuICAgIG91dHB1dHM6IFtcInJlc3BvbnNpdmVDb2x1bW5IaWRpbmdcIiwgXCJyZXNwb25zaXZlQ29sdW1uSGlkZGVuXCIsIFwicmVzcG9uc2l2ZUNvbHVtblNob3dpbmdcIiwgXCJyZXNwb25zaXZlQ29sdW1uU2hvd25cIiwgXCJyZXNwb25zaXZlTW9kZUNoYW5nZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdHcmlkUmVzcG9uc2l2ZUZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlPElnR3JpZFJlc3BvbnNpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZikge1xuICAgICAgICBzdXBlcihlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHJlc3BvbnNpdmUgd2lkZ2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnRseSBhY3RpdmUgcmVzcG9uc2l2ZSBtb2RlLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldEN1cnJlbnRSZXNwb25zaXZlTW9kZSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xufSJdfQ==