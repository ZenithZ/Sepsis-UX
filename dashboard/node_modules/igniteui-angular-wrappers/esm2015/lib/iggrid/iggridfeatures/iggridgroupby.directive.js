/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
export class IgGridGroupByFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Open groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    openGroupByDialog() { return; }
    ;
    /**
     * Close groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    closeGroupByDialog() { return; }
    ;
    /**
     * Render groupby modal dialog and its content
     * @return {?}
     */
    /* istanbul ignore next */
    renderGroupByModalDialog() { return; }
    ;
    /**
     * Open layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    openDropDown() { return; }
    ;
    /**
     * Close layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    closeDropDown() { return; }
    ;
    /**
     * Check whether column with specified key and layout is grouped
     *
     * @param {?} key    key of the column
     * @param {?} layout    layout name
     * @return {?}
     */
    /* istanbul ignore next */
    checkColumnIsGrouped(key, layout) { return; }
    ;
    /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param {?} data    data (sorted by colKey) that is used to get the records from.
     * @param {?} colKey    key of the column for which grouping will be applied.
     * @param {?=} idval    value of the column by which grouping will be applied.
     * @return {?}
     */
    /* istanbul ignore next */
    getGroupedData(data, colKey, idval) { return; }
    ;
    /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    groupByColumns() { return; }
    ;
    /**
     * Groups by a column
     *
     * @param {?} key    Column Key - group by the column with the specified key
     * @param {?=} layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param {?=} sortingDirection    if not set it is taken from option defaultSortingDirection
     * @return {?}
     */
    /* istanbul ignore next */
    groupByColumn(key, layout, sortingDirection) { return; }
    ;
    /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param {?} key    Column Key - ungroup by the column with the specified key
     * @param {?=} layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     * @return {?}
     */
    /* istanbul ignore next */
    ungroupByColumn(key, layout) { return; }
    ;
    /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    expand(rowId) { return; }
    ;
    /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    collapse(rowId) { return; }
    ;
    /**
     * Clears the group by columns list and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    ungroupAll() { return; }
    ;
    /**
     * Destroys the group by feature object.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgGridGroupByFeature.decorators = [
    { type: Directive, args: [{
                selector: 'group-by',
                inputs: ["disabled", "create", "groupByAreaVisibility", "initialExpand", "emptyGroupByAreaContent", "emptyGroupByAreaContentSelectColumns", "expansionIndicatorVisibility", "groupByLabelWidth", "labelDragHelperOpacity", "indentation", "defaultSortingDirection", "groupedColumns", "resultResponseKey", "groupedRowTextTemplate", "type", "groupByUrlKey", "groupByUrlKeyAscValue", "groupByUrlKeyDescValue", "summarySettings", "columnSettings", "expandTooltip", "collapseTooltip", "removeButtonTooltip", "modalDialogGroupByOnClick", "modalDialogGroupByButtonText", "modalDialogCaptionButtonDesc", "modalDialogCaptionButtonAsc", "modalDialogCaptionButtonUngroup", "modalDialogCaptionText", "modalDialogDropDownLabel", "modalDialogRootLevelHierarchicalGrid", "modalDialogDropDownButtonCaption", "modalDialogClearAllButtonLabel", "emptyGroupByAreaContentSelectColumnsCaption", "modalDialogDropDownWidth", "modalDialogDropDownAreaWidth", "modalDialogAnimationDuration", "modalDialogWidth", "modalDialogHeight", "modalDialogButtonApplyText", "modalDialogButtonCancelText", "useGridColumnFormatter", "persist", "groupByDialogContainment", "dialogWidget", "inherit"],
                outputs: ["groupedColumnsChanging", "groupedColumnsChanged", "modalDialogMoving", "modalDialogClosing", "modalDialogClosed", "modalDialogOpening", "modalDialogOpened", "modalDialogContentsRendering", "modalDialogContentsRendered", "modalDialogButtonApplyClick", "modalDialogButtonResetClick", "modalDialogGroupingColumn", "modalDialogGroupColumn", "modalDialogUngroupingColumn", "modalDialogUngroupColumn", "modalDialogSortGroupedColumn"]
            },] }
];
/** @nocollapse */
IgGridGroupByFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,