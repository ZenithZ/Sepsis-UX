/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
export class IgGridSummariesFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    destroy() { return; }
    ;
    /**
     * Returns whether summaries rows are hidden
     * @return {?}
     */
    /* istanbul ignore next */
    isSummariesRowsHidden() { return; }
    ;
    /**
     * Calculate summaries
     * @return {?}
     */
    /* istanbul ignore next */
    calculateSummaries() { return; }
    ;
    /**
     * Remove all summaries dropdown buttons.
     * @return {?}
     */
    /* istanbul ignore next */
    clearAllFooterIcons() { return; }
    ;
    /**
     * Toggle drop down
     *
     * @param {?} columnKey    toggle drop down for the column with the specified key
     * @param {?} event    event object. Its data should contain current columnKey, isAnimating, buttonId
     * @return {?}
     */
    /* istanbul ignore next */
    toggleDropDown(columnKey, event) { return; }
    ;
    /**
     * Show/Hide dialog
     *
     * @param {?} $dialog     jQuery object representation of dropdown div element
     * @return {?}
     */
    /* istanbul ignore next */
    showHideDialog($dialog) { return; }
    ;
    /**
     * Toggle summaries rows
     *
     * @param {?} isToShow    Specifies whether to show or not summaries
     * @param {?} isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    toggleSummariesRows(isToShow, isInternalCall) { return; }
    ;
    /**
     * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} $checkbox     Specifies the jQuery object of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    toggleCheckstate($checkbox) { return; }
    ;
    /**
     * Select/Unselect specified checkbox
     *
     * @param {?} $checkbox     Specifies the jQuery object for checkbox
     * @param {?} isToSelect     Specify whether to select or not checkbox
     * @return {?}
     */
    /* istanbul ignore next */
    selectCheckBox($checkbox, isToSelect) { return; }
    ;
    /**
     * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)
     *
     * @param {?} ck    ColumnKey
     * @param {?} columnMethods    Array of column methods objects
     * @param {?} data    Object which represents result
     * represents dataType for the current column
     * @param {?} dataType
     * @return {?}
     */
    /* istanbul ignore next */
    calculateSummaryColumn(ck, columnMethods, data, dataType) { return; }
    ;
    /**
     * Return a JQUERY object which holds all summaries for all columns
     * @return {?}
     */
    /* istanbul ignore next */
    summaryCollection() { return; }
    ;
    /**
     * Return a JQUERY object which holds all summaries for column with the specified column key
     *
     * @param {?} columnKey
     * @return {?}
     */
    /* istanbul ignore next */
    summariesFor(columnKey) { return; }
    ;
}
IgGridSummariesFeature.decorators = [
    { type: Directive, args: [{
                selector: 'summaries',
                inputs: ["disabled", "create", "type", "dialogButtonOKText", "dialogButtonCancelText", "calculateRenderMode", "featureChooserText", "featureChooserTextHide", "compactRenderingMode", "defaultDecimalDisplay", "showSummariesButton", "summariesResponseKey", "summaryExprUrlKey", "callee", "dropDownHeight", "dropDownWidth", "showDropDownButton", "summaryExecution", "dropDownDialogAnimationDuration", "emptyCellText", "summariesHeaderButtonTooltip", "resultTemplate", "isGridFormatter", "renderSummaryCellFunc", "columnSettings", "inherit"],
                outputs: ["dropDownOpening", "dropDownOpened", "dropDownClosing", "dropDownClosed", "summariesCalculating", "summariesCalculated", "summariesMethodSelectionChanged", "summariesToggling", "summariesToggled", "dropDownOKClicked", "dropDownCancelClicked"]
            },] }
];
/** @nocollapse */
IgGridSummariesFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkc3VtbWFyaWVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZHN1bW1hcmllcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFRckMsTUFBTSxPQUFPLHNCQUF1QixTQUFRLE9BQXdCOzs7O0lBQ2hFLFlBQVksRUFBYztRQUN0QixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZCxDQUFDOzs7OztJQUVNLE9BQU8sS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU01QixxQkFBcUIsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU0xQyxrQkFBa0IsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU12QyxtQkFBbUIsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7OztJQVN4QyxjQUFjLENBQUMsU0FBaUIsRUFBRSxLQUFhLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVFuRSxjQUFjLENBQUMsT0FBZSxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7O0lBU2xELG1CQUFtQixDQUFDLFFBQWlCLEVBQUUsY0FBdUIsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUWxGLGdCQUFnQixDQUFDLFNBQWlCLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7Ozs7SUFTdEQsY0FBYyxDQUFDLFNBQWlCLEVBQUUsVUFBbUIsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7Ozs7OztJQVl6RSxzQkFBc0IsQ0FBQyxFQUFVLEVBQUUsYUFBb0IsRUFBRSxJQUFZLEVBQUUsUUFBZ0IsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU0zRyxpQkFBaUIsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUXRDLFlBQVksQ0FBQyxTQUFpQixJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7O1lBakc1RCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLG9CQUFvQixFQUFFLHdCQUF3QixFQUFFLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLHdCQUF3QixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLHFCQUFxQixFQUFFLHNCQUFzQixFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUsa0JBQWtCLEVBQUUsaUNBQWlDLEVBQUUsZUFBZSxFQUFFLDhCQUE4QixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLHVCQUF1QixFQUFFLGdCQUFnQixFQUFFLFNBQVMsQ0FBQztnQkFDeGhCLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLGlDQUFpQyxFQUFFLG1CQUFtQixFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLHVCQUF1QixDQUFDO2FBQy9QOzs7O1lBUlEsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIERpcmVjdGl2ZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSBcIi4uL2ZlYXR1cmVcIjtcblxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3N1bW1hcmllcycsXG4gICAgaW5wdXRzOiBbXCJkaXNhYmxlZFwiLCBcImNyZWF0ZVwiLCBcInR5cGVcIiwgXCJkaWFsb2dCdXR0b25PS1RleHRcIiwgXCJkaWFsb2dCdXR0b25DYW5jZWxUZXh0XCIsIFwiY2FsY3VsYXRlUmVuZGVyTW9kZVwiLCBcImZlYXR1cmVDaG9vc2VyVGV4dFwiLCBcImZlYXR1cmVDaG9vc2VyVGV4dEhpZGVcIiwgXCJjb21wYWN0UmVuZGVyaW5nTW9kZVwiLCBcImRlZmF1bHREZWNpbWFsRGlzcGxheVwiLCBcInNob3dTdW1tYXJpZXNCdXR0b25cIiwgXCJzdW1tYXJpZXNSZXNwb25zZUtleVwiLCBcInN1bW1hcnlFeHByVXJsS2V5XCIsIFwiY2FsbGVlXCIsIFwiZHJvcERvd25IZWlnaHRcIiwgXCJkcm9wRG93bldpZHRoXCIsIFwic2hvd0Ryb3BEb3duQnV0dG9uXCIsIFwic3VtbWFyeUV4ZWN1dGlvblwiLCBcImRyb3BEb3duRGlhbG9nQW5pbWF0aW9uRHVyYXRpb25cIiwgXCJlbXB0eUNlbGxUZXh0XCIsIFwic3VtbWFyaWVzSGVhZGVyQnV0dG9uVG9vbHRpcFwiLCBcInJlc3VsdFRlbXBsYXRlXCIsIFwiaXNHcmlkRm9ybWF0dGVyXCIsIFwicmVuZGVyU3VtbWFyeUNlbGxGdW5jXCIsIFwiY29sdW1uU2V0dGluZ3NcIiwgXCJpbmhlcml0XCJdLFxuICAgIG91dHB1dHM6IFtcImRyb3BEb3duT3BlbmluZ1wiLCBcImRyb3BEb3duT3BlbmVkXCIsIFwiZHJvcERvd25DbG9zaW5nXCIsIFwiZHJvcERvd25DbG9zZWRcIiwgXCJzdW1tYXJpZXNDYWxjdWxhdGluZ1wiLCBcInN1bW1hcmllc0NhbGN1bGF0ZWRcIiwgXCJzdW1tYXJpZXNNZXRob2RTZWxlY3Rpb25DaGFuZ2VkXCIsIFwic3VtbWFyaWVzVG9nZ2xpbmdcIiwgXCJzdW1tYXJpZXNUb2dnbGVkXCIsIFwiZHJvcERvd25PS0NsaWNrZWRcIiwgXCJkcm9wRG93bkNhbmNlbENsaWNrZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdHcmlkU3VtbWFyaWVzRmVhdHVyZSBleHRlbmRzIEZlYXR1cmU8SWdHcmlkU3VtbWFyaWVzPiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgc3VwZXIoZWwpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgc3VtbWFyaWVzIHJvd3MgYXJlIGhpZGRlblxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGlzU3VtbWFyaWVzUm93c0hpZGRlbigpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHN1bW1hcmllc1xuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGNhbGN1bGF0ZVN1bW1hcmllcygpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBzdW1tYXJpZXMgZHJvcGRvd24gYnV0dG9ucy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBjbGVhckFsbEZvb3Rlckljb25zKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgZHJvcCBkb3duXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uS2V5ICAgIHRvZ2dsZSBkcm9wIGRvd24gZm9yIHRoZSBjb2x1bW4gd2l0aCB0aGUgc3BlY2lmaWVkIGtleVxuICAgICAqIEBwYXJhbSBldmVudCAgICBldmVudCBvYmplY3QuIEl0cyBkYXRhIHNob3VsZCBjb250YWluIGN1cnJlbnQgY29sdW1uS2V5LCBpc0FuaW1hdGluZywgYnV0dG9uSWRcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB0b2dnbGVEcm9wRG93bihjb2x1bW5LZXk6IHN0cmluZywgZXZlbnQ6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBTaG93L0hpZGUgZGlhbG9nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gJGRpYWxvZyAgICAgalF1ZXJ5IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBkcm9wZG93biBkaXYgZWxlbWVudFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHNob3dIaWRlRGlhbG9nKCRkaWFsb2c6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgc3VtbWFyaWVzIHJvd3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc1RvU2hvdyAgICBTcGVjaWZpZXMgd2hldGhlciB0byBzaG93IG9yIG5vdCBzdW1tYXJpZXNcbiAgICAgKiBAcGFyYW0gaXNJbnRlcm5hbENhbGwgICAgT3B0aW9uYWwgcGFyYW1ldGVyLlNwZWNpZmllcyB3aGV0aGVyIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGludGVybmFsbHkgYnkgdGhlIHdpZGdldC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB0b2dnbGVTdW1tYXJpZXNSb3dzKGlzVG9TaG93OiBib29sZWFuLCBpc0ludGVybmFsQ2FsbDogYm9vbGVhbik6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBjaGVja3N0YXRlIG9mIGEgY2hlY2tib3ggaWYgY2hlY2tib3hNb2RlIGlzIG5vdCBzZXQgdG8gb2ZmLCBvdGhlcndpc2UgZG9lcyBub3RoaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtICRjaGVja2JveCAgICAgU3BlY2lmaWVzIHRoZSBqUXVlcnkgb2JqZWN0IG9mIHRoZSBjaGVja2JveC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB0b2dnbGVDaGVja3N0YXRlKCRjaGVja2JveDogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFNlbGVjdC9VbnNlbGVjdCBzcGVjaWZpZWQgY2hlY2tib3hcbiAgICAgKlxuICAgICAqIEBwYXJhbSAkY2hlY2tib3ggICAgIFNwZWNpZmllcyB0aGUgalF1ZXJ5IG9iamVjdCBmb3IgY2hlY2tib3hcbiAgICAgKiBAcGFyYW0gaXNUb1NlbGVjdCAgICAgU3BlY2lmeSB3aGV0aGVyIHRvIHNlbGVjdCBvciBub3QgY2hlY2tib3hcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzZWxlY3RDaGVja0JveCgkY2hlY2tib3g6IE9iamVjdCwgaXNUb1NlbGVjdDogYm9vbGVhbik6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBTdW1tYXJ5IGNhbGN1bGF0ZSB0aGUgd2hvbGUgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCBjb2x1bW4ga2V5LCBjb2x1bW5NZXRob2RzIGFuZCBkYXRhVHlwZSAodXNlZCB3aGVuIGRhdGFzb3VyY2UgaXMgcmVtb3RlIGFuZCBkYXRhVHlwZSBpcyBkYXRlKVxuICAgICAqXG4gICAgICogQHBhcmFtIGNrICAgIENvbHVtbktleVxuICAgICAqIEBwYXJhbSBjb2x1bW5NZXRob2RzICAgIEFycmF5IG9mIGNvbHVtbiBtZXRob2RzIG9iamVjdHNcbiAgICAgKiBAcGFyYW0gZGF0YSAgICBPYmplY3Qgd2hpY2ggcmVwcmVzZW50cyByZXN1bHRcbiByZXByZXNlbnRzIGRhdGFUeXBlIGZvciB0aGUgY3VycmVudCBjb2x1bW5cbiAgICAqIEBwYXJhbSBkYXRhVHlwZSBcbiAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGNhbGN1bGF0ZVN1bW1hcnlDb2x1bW4oY2s6IHN0cmluZywgY29sdW1uTWV0aG9kczogYW55W10sIGRhdGE6IE9iamVjdCwgZGF0YVR5cGU6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBKUVVFUlkgb2JqZWN0IHdoaWNoIGhvbGRzIGFsbCBzdW1tYXJpZXMgZm9yIGFsbCBjb2x1bW5zXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc3VtbWFyeUNvbGxlY3Rpb24oKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIEpRVUVSWSBvYmplY3Qgd2hpY2ggaG9sZHMgYWxsIHN1bW1hcmllcyBmb3IgY29sdW1uIHdpdGggdGhlIHNwZWNpZmllZCBjb2x1bW4ga2V5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uS2V5IFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHN1bW1hcmllc0Zvcihjb2x1bW5LZXk6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19