/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
export class IgGridFilteringFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Destroys the filtering widget - remove fitler row, unbinds events, returns the grid to its previous state.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Returns the count of data records that match filtering conditions
     * @return {?}
     */
    /* istanbul ignore next */
    getFilteringMatchesCount() { return; }
    ;
    /**
     * Toggle filter row when mode is simple or [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is true. Otherwise show/hide advanced dialog.
     *
     * @param {?} event     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    toggleFilterRowByFeatureChooser(event) { return; }
    ;
    /**
     * Applies filtering programmatically and updates the UI by default.
     *
     * @param {?} expressions     An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
     * @param {?=} updateUI     specifies whether the filter row should be also updated once the grid is filtered
     * @param {?=} addedFromAdvanced
     * @return {?}
     */
    /* istanbul ignore next */
    filter(expressions, updateUI, addedFromAdvanced) { return; }
    ;
    /**
     * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
     *
     * @param {?} filterCondition    filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
     * @return {?}
     */
    /* istanbul ignore next */
    requiresFilteringExpression(filterCondition) { return; }
    ;
}
IgGridFilteringFeature.decorators = [
    { type: Directive, args: [{
                selector: 'filtering',
                inputs: ["disabled", "create", "caseSensitive", "filterSummaryAlwaysVisible", "renderFC", "filterSummaryTemplate", "filterDropDownAnimations", "filterDropDownAnimationDuration", "filterDropDownWidth", "filterDropDownHeight", "filterExprUrlKey", "filterDropDownItemIcons", "columnSettings", "type", "filterDelay", "mode", "advancedModeEditorsVisible", "advancedModeHeaderButtonLocation", "filterDialogWidth", "filterDialogHeight", "filterDialogFilterDropDownDefaultWidth", "filterDialogExprInputDefaultWidth", "filterDialogColumnDropDownDefaultWidth", "renderFilterButton", "filterButtonLocation", "nullTexts", "labels", "tooltipTemplate", "filterDialogAddConditionTemplate", "filterDialogAddConditionDropDownTemplate", "filterDialogFilterTemplate", "filterDialogFilterConditionTemplate", "filterDialogAddButtonWidth", "filterDialogOkCancelButtonWidth", "filterDialogMaxFilterCount", "filterDialogContainment", "showEmptyConditions", "showNullConditions", "featureChooserText", "featureChooserTextHide", "featureChooserTextAdvancedFilter", "dialogWidget", "persist", "inherit"],
                outputs: ["dataFiltering", "dataFiltered", "dropDownOpening", "dropDownOpened", "dropDownClosing", "dropDownClosed", "filterDialogOpening", "filterDialogOpened", "filterDialogMoving", "filterDialogFilterAdding", "filterDialogFilterAdded", "filterDialogClosing", "filterDialogClosed", "filterDialogContentsRendering", "filterDialogContentsRendered", "filterDialogFiltering"]
            },] }
];
/** @nocollapse */
IgGridFilteringFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkZmlsdGVyaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZGZpbHRlcmluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFPckMsTUFBTSxPQUFPLHNCQUF1QixTQUFRLE9BQXdCOzs7O0lBQ2hFLFlBQVksRUFBYztRQUN0QixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFNTSxPQUFPLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNNUIsd0JBQXdCLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVEvQywrQkFBK0IsQ0FBQyxLQUFhLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7Ozs7O0lBVWpFLE1BQU0sQ0FBQyxXQUFrQixFQUFFLFFBQWtCLEVBQUUsaUJBQTJCLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVE5RiwyQkFBMkIsQ0FBQyxlQUF1QixJQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7O1lBOUNwRixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLDRCQUE0QixFQUFFLFVBQVUsRUFBRSx1QkFBdUIsRUFBRSwwQkFBMEIsRUFBRSxpQ0FBaUMsRUFBRSxxQkFBcUIsRUFBRSxzQkFBc0IsRUFBRSxrQkFBa0IsRUFBRSx5QkFBeUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxrQ0FBa0MsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSx3Q0FBd0MsRUFBRSxtQ0FBbUMsRUFBRSx3Q0FBd0MsRUFBRSxvQkFBb0IsRUFBRSxzQkFBc0IsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLGtDQUFrQyxFQUFFLDBDQUEwQyxFQUFFLDRCQUE0QixFQUFFLHFDQUFxQyxFQUFFLDRCQUE0QixFQUFFLGlDQUFpQyxFQUFFLDRCQUE0QixFQUFFLHlCQUF5QixFQUFFLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLHdCQUF3QixFQUFFLGtDQUFrQyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO2dCQUNwakMsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSwwQkFBMEIsRUFBRSx5QkFBeUIsRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFBRSwrQkFBK0IsRUFBRSw4QkFBOEIsRUFBRSx1QkFBdUIsQ0FBQzthQUN4WDs7OztZQVBRLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBEaXJlY3RpdmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gXCIuLi9mZWF0dXJlXCI7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZmlsdGVyaW5nJyxcbiAgICBpbnB1dHM6IFtcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImZpbHRlclN1bW1hcnlBbHdheXNWaXNpYmxlXCIsIFwicmVuZGVyRkNcIiwgXCJmaWx0ZXJTdW1tYXJ5VGVtcGxhdGVcIiwgXCJmaWx0ZXJEcm9wRG93bkFuaW1hdGlvbnNcIiwgXCJmaWx0ZXJEcm9wRG93bkFuaW1hdGlvbkR1cmF0aW9uXCIsIFwiZmlsdGVyRHJvcERvd25XaWR0aFwiLCBcImZpbHRlckRyb3BEb3duSGVpZ2h0XCIsIFwiZmlsdGVyRXhwclVybEtleVwiLCBcImZpbHRlckRyb3BEb3duSXRlbUljb25zXCIsIFwiY29sdW1uU2V0dGluZ3NcIiwgXCJ0eXBlXCIsIFwiZmlsdGVyRGVsYXlcIiwgXCJtb2RlXCIsIFwiYWR2YW5jZWRNb2RlRWRpdG9yc1Zpc2libGVcIiwgXCJhZHZhbmNlZE1vZGVIZWFkZXJCdXR0b25Mb2NhdGlvblwiLCBcImZpbHRlckRpYWxvZ1dpZHRoXCIsIFwiZmlsdGVyRGlhbG9nSGVpZ2h0XCIsIFwiZmlsdGVyRGlhbG9nRmlsdGVyRHJvcERvd25EZWZhdWx0V2lkdGhcIiwgXCJmaWx0ZXJEaWFsb2dFeHBySW5wdXREZWZhdWx0V2lkdGhcIiwgXCJmaWx0ZXJEaWFsb2dDb2x1bW5Ecm9wRG93bkRlZmF1bHRXaWR0aFwiLCBcInJlbmRlckZpbHRlckJ1dHRvblwiLCBcImZpbHRlckJ1dHRvbkxvY2F0aW9uXCIsIFwibnVsbFRleHRzXCIsIFwibGFiZWxzXCIsIFwidG9vbHRpcFRlbXBsYXRlXCIsIFwiZmlsdGVyRGlhbG9nQWRkQ29uZGl0aW9uVGVtcGxhdGVcIiwgXCJmaWx0ZXJEaWFsb2dBZGRDb25kaXRpb25Ecm9wRG93blRlbXBsYXRlXCIsIFwiZmlsdGVyRGlhbG9nRmlsdGVyVGVtcGxhdGVcIiwgXCJmaWx0ZXJEaWFsb2dGaWx0ZXJDb25kaXRpb25UZW1wbGF0ZVwiLCBcImZpbHRlckRpYWxvZ0FkZEJ1dHRvbldpZHRoXCIsIFwiZmlsdGVyRGlhbG9nT2tDYW5jZWxCdXR0b25XaWR0aFwiLCBcImZpbHRlckRpYWxvZ01heEZpbHRlckNvdW50XCIsIFwiZmlsdGVyRGlhbG9nQ29udGFpbm1lbnRcIiwgXCJzaG93RW1wdHlDb25kaXRpb25zXCIsIFwic2hvd051bGxDb25kaXRpb25zXCIsIFwiZmVhdHVyZUNob29zZXJUZXh0XCIsIFwiZmVhdHVyZUNob29zZXJUZXh0SGlkZVwiLCBcImZlYXR1cmVDaG9vc2VyVGV4dEFkdmFuY2VkRmlsdGVyXCIsIFwiZGlhbG9nV2lkZ2V0XCIsIFwicGVyc2lzdFwiLCBcImluaGVyaXRcIl0sXG4gICAgb3V0cHV0czogW1wiZGF0YUZpbHRlcmluZ1wiLCBcImRhdGFGaWx0ZXJlZFwiLCBcImRyb3BEb3duT3BlbmluZ1wiLCBcImRyb3BEb3duT3BlbmVkXCIsIFwiZHJvcERvd25DbG9zaW5nXCIsIFwiZHJvcERvd25DbG9zZWRcIiwgXCJmaWx0ZXJEaWFsb2dPcGVuaW5nXCIsIFwiZmlsdGVyRGlhbG9nT3BlbmVkXCIsIFwiZmlsdGVyRGlhbG9nTW92aW5nXCIsIFwiZmlsdGVyRGlhbG9nRmlsdGVyQWRkaW5nXCIsIFwiZmlsdGVyRGlhbG9nRmlsdGVyQWRkZWRcIiwgXCJmaWx0ZXJEaWFsb2dDbG9zaW5nXCIsIFwiZmlsdGVyRGlhbG9nQ2xvc2VkXCIsIFwiZmlsdGVyRGlhbG9nQ29udGVudHNSZW5kZXJpbmdcIiwgXCJmaWx0ZXJEaWFsb2dDb250ZW50c1JlbmRlcmVkXCIsIFwiZmlsdGVyRGlhbG9nRmlsdGVyaW5nXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnR3JpZEZpbHRlcmluZ0ZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlPElnR3JpZEZpbHRlcmluZz4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgZmlsdGVyaW5nIHdpZGdldCAtIHJlbW92ZSBmaXRsZXIgcm93LCB1bmJpbmRzIGV2ZW50cywgcmV0dXJucyB0aGUgZ3JpZCB0byBpdHMgcHJldmlvdXMgc3RhdGUuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY291bnQgb2YgZGF0YSByZWNvcmRzIHRoYXQgbWF0Y2ggZmlsdGVyaW5nIGNvbmRpdGlvbnNcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRGaWx0ZXJpbmdNYXRjaGVzQ291bnQoKTogbnVtYmVyIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIGZpbHRlciByb3cgd2hlbiBtb2RlIGlzIHNpbXBsZSBvciBbYWR2YW5jZWRNb2RlRWRpdG9yc1Zpc2libGVdKHVpLmlnZ3JpZGZpbHRlcmluZyNvcHRpb25zOmFkdmFuY2VkTW9kZUVkaXRvcnNWaXNpYmxlKSBpcyB0cnVlLiBPdGhlcndpc2Ugc2hvdy9oaWRlIGFkdmFuY2VkIGRpYWxvZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCAgICAgQ29sdW1uIGtleVxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHRvZ2dsZUZpbHRlclJvd0J5RmVhdHVyZUNob29zZXIoZXZlbnQ6IHN0cmluZyk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGZpbHRlcmluZyBwcm9ncmFtbWF0aWNhbGx5IGFuZCB1cGRhdGVzIHRoZSBVSSBieSBkZWZhdWx0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV4cHJlc3Npb25zICAgICBBbiBhcnJheSBvZiBmaWx0ZXJpbmcgZXhwcmVzc2lvbnMsIGVhY2ggb25lIGhhdmluZyB0aGUgZm9ybWF0IHtmaWVsZE5hbWU6ICwgZXhwcjogLCBjb25kOiAsIGxvZ2ljOiB9IHdoZXJlICBmaWVsZE5hbWUgaXMgdGhlIGtleSBvZiB0aGUgY29sdW1uLCBleHByIGlzIHRoZSBhY3R1YWwgZXhwcmVzc2lvbiBzdHJpbmcgd2l0aCB3aGljaCB3ZSB3b3VsZCBsaWtlIHRvIGZpbHRlciwgbG9naWMgaXMgJ0FORCcgb3IgJ09SJywgYW5kIGNvbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgc3RyaW5nczogXCJlcXVhbHNcIiwgXCJkb2VzTm90RXF1YWxcIiwgXCJjb250YWluc1wiLCBcImRvZXNOb3RDb250YWluXCIsIFwiZ3JlYXRlclRoYW5cIiwgXCJsZXNzVGhhblwiLCBcImdyZWF0ZXJUaGFuT3JFcXVhbFRvXCIsIFwibGVzc1RoYW5PckVxdWFsVG9cIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIiwgXCJudWxsXCIsIFwibm90TnVsbFwiLCBcImVtcHR5XCIsIFwibm90RW1wdHlcIiwgXCJzdGFydHNXaXRoXCIsIFwiZW5kc1dpdGhcIiwgXCJ0b2RheVwiLCBcInllc3RlcmRheVwiLCBcIm9uXCIsIFwibm90T25cIiwgXCJ0aGlzTW9udGhcIiwgXCJsYXN0TW9udGhcIiwgXCJuZXh0TW9udGhcIiwgXCJiZWZvcmVcIiwgXCJhZnRlclwiLCBcInRoaXNZZWFyXCIsIFwibGFzdFllYXJcIiwgXCJuZXh0WWVhclwiLiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBlbXB0eSBhbmQgbnVsbCBmaWx0ZXJpbmcgY29uZGl0aW9ucyBpcyB0aGF0IGVtcHR5IGluY2x1ZGVzIG51bGwsIE5hTiwgYW5kIHVuZGVmaW5lZCwgYXMgd2VsbCBhcyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB1cGRhdGVVSSAgICAgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIGZpbHRlciByb3cgc2hvdWxkIGJlIGFsc28gdXBkYXRlZCBvbmNlIHRoZSBncmlkIGlzIGZpbHRlcmVkXG4gICAgICogQHBhcmFtIGFkZGVkRnJvbUFkdmFuY2VkICAgICBcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBmaWx0ZXIoZXhwcmVzc2lvbnM6IGFueVtdLCB1cGRhdGVVST86IGJvb2xlYW4sIGFkZGVkRnJvbUFkdmFuY2VkPzogYm9vbGVhbik6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIGZpbHRlckNvbmRpdGlvbiByZXF1aXJlcyBvciBub3QgZmlsdGVyaW5nIGV4cHJlc3Npb24gLSBlLmcuIGlmIGZpbHRlckNvbmRpdGlvbiBpcyBcImxhc3RNb250aFwiLCBcInRoaXNNb250aFwiLCBcIm51bGxcIiwgXCJub3ROdWxsXCIsIFwidHJ1ZVwiLCBcImZhbHNlXCIsIGV0Yy4gdGhlbiBmaWx0ZXJpbmcgZXhwcmVzc2lvbiBpcyBOT1QgcmVxdWlyZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWx0ZXJDb25kaXRpb24gICAgZmlsdGVyaW5nIGNvbmRpdGlvbiAtIGUuZy4gXCJ0cnVlXCIsIFwiZmFsc2VcIiwgIFwieWVzdGVyZGF5XCIsIFwiZW1wdHlcIiwgXCJudWxsXCIsIGV0Yy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyByZXF1aXJlc0ZpbHRlcmluZ0V4cHJlc3Npb24oZmlsdGVyQ29uZGl0aW9uOiBzdHJpbmcpOiBib29sZWFuIHsgcmV0dXJuOyB9O1xufSJdfQ==