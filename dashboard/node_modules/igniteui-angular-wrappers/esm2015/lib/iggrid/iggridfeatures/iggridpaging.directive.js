/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from "@angular/core";
import { Feature } from "../feature";
export class IgGridPagingFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
     *
     * @param {?=} index     The page index to go to.
     * @return {?}
     */
    /* istanbul ignore next */
    pageIndex(index) { return; }
    ;
    /**
     * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
     *
     * @param {?=} size     The new page size.
     * @return {?}
     */
    /* istanbul ignore next */
    pageSize(size) { return; }
    ;
    /**
     * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgGridPagingFeature.decorators = [
    { type: Directive, args: [{
                selector: 'paging',
                inputs: ["disabled", "create", "pageSize", "recordCountKey", "pageSizeUrlKey", "pageIndexUrlKey", "currentPageIndex", "type", "showPageSizeDropDown", "pageSizeDropDownLabel", "pageSizeDropDownTrailingLabel", "pageSizeDropDownLocation", "showPagerRecordsLabel", "pagerRecordsLabelTemplate", "nextPageLabelText", "prevPageLabelText", "firstPageLabelText", "lastPageLabelText", "showFirstLastPages", "showPrevNextPages", "currentPageDropDownLeadingLabel", "currentPageDropDownTrailingLabel", "currentPageDropDownTooltip", "pageSizeDropDownTooltip", "pagerRecordsLabelTooltip", "prevPageTooltip", "nextPageTooltip", "firstPageTooltip", "lastPageTooltip", "pageTooltipFormat", "pageSizeList", "pageCountLimit", "visiblePageCount", "defaultDropDownWidth", "delayOnPageChanged", "persist", "inherit"],
                outputs: ["pageIndexChanging", "pageIndexChanged", "pageSizeChanging", "pageSizeChanged", "pagerRendering", "pagerRendered"]
            },] }
];
/** @nocollapse */
IgGridPagingFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkcGFnaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZHBhZ2luZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFPckMsTUFBTSxPQUFPLG1CQUFvQixTQUFRLE9BQXFCOzs7O0lBQzFELFlBQVksRUFBYztRQUN0QixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZCxDQUFDOzs7Ozs7OztJQVFNLFNBQVMsQ0FBQyxLQUFjLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVE5QyxRQUFRLENBQUMsSUFBYSxJQUFZLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTVDLE9BQU8sS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7OztZQTlCdEMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsdUJBQXVCLEVBQUUsK0JBQStCLEVBQUUsMEJBQTBCLEVBQUUsdUJBQXVCLEVBQUUsMkJBQTJCLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsaUNBQWlDLEVBQUUsa0NBQWtDLEVBQUUsNEJBQTRCLEVBQUUseUJBQXlCLEVBQUUsMEJBQTBCLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7Z0JBQ3p4QixPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUM7YUFDL0g7Ozs7WUFQbUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSBcIi4uL2ZlYXR1cmVcIjtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdwYWdpbmcnLFxuICAgIGlucHV0czogW1wiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJwYWdlU2l6ZVwiLCBcInJlY29yZENvdW50S2V5XCIsIFwicGFnZVNpemVVcmxLZXlcIiwgXCJwYWdlSW5kZXhVcmxLZXlcIiwgXCJjdXJyZW50UGFnZUluZGV4XCIsIFwidHlwZVwiLCBcInNob3dQYWdlU2l6ZURyb3BEb3duXCIsIFwicGFnZVNpemVEcm9wRG93bkxhYmVsXCIsIFwicGFnZVNpemVEcm9wRG93blRyYWlsaW5nTGFiZWxcIiwgXCJwYWdlU2l6ZURyb3BEb3duTG9jYXRpb25cIiwgXCJzaG93UGFnZXJSZWNvcmRzTGFiZWxcIiwgXCJwYWdlclJlY29yZHNMYWJlbFRlbXBsYXRlXCIsIFwibmV4dFBhZ2VMYWJlbFRleHRcIiwgXCJwcmV2UGFnZUxhYmVsVGV4dFwiLCBcImZpcnN0UGFnZUxhYmVsVGV4dFwiLCBcImxhc3RQYWdlTGFiZWxUZXh0XCIsIFwic2hvd0ZpcnN0TGFzdFBhZ2VzXCIsIFwic2hvd1ByZXZOZXh0UGFnZXNcIiwgXCJjdXJyZW50UGFnZURyb3BEb3duTGVhZGluZ0xhYmVsXCIsIFwiY3VycmVudFBhZ2VEcm9wRG93blRyYWlsaW5nTGFiZWxcIiwgXCJjdXJyZW50UGFnZURyb3BEb3duVG9vbHRpcFwiLCBcInBhZ2VTaXplRHJvcERvd25Ub29sdGlwXCIsIFwicGFnZXJSZWNvcmRzTGFiZWxUb29sdGlwXCIsIFwicHJldlBhZ2VUb29sdGlwXCIsIFwibmV4dFBhZ2VUb29sdGlwXCIsIFwiZmlyc3RQYWdlVG9vbHRpcFwiLCBcImxhc3RQYWdlVG9vbHRpcFwiLCBcInBhZ2VUb29sdGlwRm9ybWF0XCIsIFwicGFnZVNpemVMaXN0XCIsIFwicGFnZUNvdW50TGltaXRcIiwgXCJ2aXNpYmxlUGFnZUNvdW50XCIsIFwiZGVmYXVsdERyb3BEb3duV2lkdGhcIiwgXCJkZWxheU9uUGFnZUNoYW5nZWRcIiwgXCJwZXJzaXN0XCIsIFwiaW5oZXJpdFwiXSxcbiAgICBvdXRwdXRzOiBbXCJwYWdlSW5kZXhDaGFuZ2luZ1wiLCBcInBhZ2VJbmRleENoYW5nZWRcIiwgXCJwYWdlU2l6ZUNoYW5naW5nXCIsIFwicGFnZVNpemVDaGFuZ2VkXCIsIFwicGFnZXJSZW5kZXJpbmdcIiwgXCJwYWdlclJlbmRlcmVkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnR3JpZFBhZ2luZ0ZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlPElnR3JpZFBhZ2luZz4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGN1cnJlbnQgcGFnZSBpbmRleCwgZGVsZWdhdGVzIGRhdGEgYmluZGluZyBhbmQgcGFnaW5nIHRvIFskLmlnLkRhdGFTb3VyY2VdKGlnLmRhdGFzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4ICAgICBUaGUgcGFnZSBpbmRleCB0byBnbyB0by5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBwYWdlSW5kZXgoaW5kZXg/OiBudW1iZXIpOiBudW1iZXIgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIHBhZ2Ugc2l6ZS4gSWYgbm8gcGFyYW1ldGVyIGlzIHNwZWNpZmllZCwganVzdCByZXR1cm5zIHRoZSBjdXJyZW50IHBhZ2Ugc2l6ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaXplICAgICBUaGUgbmV3IHBhZ2Ugc2l6ZS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBwYWdlU2l6ZShzaXplPzogbnVtYmVyKTogbnVtYmVyIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGlnR3JpZFBhZ2luZyBmZWF0dXJlIGJ5IHJlbW92aW5nIGFsbCBlbGVtZW50cyBpbiB0aGUgcGFnZXIgYXJlYSwgdW5iaW5kaW5nIGV2ZW50cywgYW5kIHJlc2V0dGluZyBkYXRhIHRvIGRpc2NhcmQgZGF0YSBmaWx0ZXJpbmcgb24gcGFnaW5nLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcbn0iXX0=