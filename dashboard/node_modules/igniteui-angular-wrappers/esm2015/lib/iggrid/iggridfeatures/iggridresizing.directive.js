/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
export class IgGridResizingFeature extends Feature {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * Destroys the resizing widget
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param {?=} width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
     * @return {?}
     */
    /* istanbul ignore next */
    resize(column, width) { return; }
    ;
}
IgGridResizingFeature.decorators = [
    { type: Directive, args: [{
                selector: 'resizing',
                inputs: ["disabled", "create", "allowDoubleClickToResize", "deferredResizing", "columnSettings", "handleThreshold", "inherit"],
                outputs: ["columnResizing", "columnResizingRefused", "columnResized"]
            },] }
];
/** @nocollapse */
IgGridResizingFeature.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkcmVzaXppbmcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ2dyaWQvaWdncmlkZmVhdHVyZXMvaWdncmlkcmVzaXppbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBT3JDLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxPQUF1Qjs7OztJQUM5RCxZQUFZLEVBQWM7UUFDdEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2QsQ0FBQzs7Ozs7O0lBTU0sT0FBTyxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7O0lBUzVCLE1BQU0sQ0FBQyxNQUFjLEVBQUUsS0FBYyxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7O1lBdkJuRSxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxDQUFDO2dCQUM5SCxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBRSxlQUFlLENBQUM7YUFDeEU7Ozs7WUFQUSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tIFwiLi4vZmVhdHVyZVwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3Jlc2l6aW5nJyxcbiAgICBpbnB1dHM6IFtcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwiYWxsb3dEb3VibGVDbGlja1RvUmVzaXplXCIsIFwiZGVmZXJyZWRSZXNpemluZ1wiLCBcImNvbHVtblNldHRpbmdzXCIsIFwiaGFuZGxlVGhyZXNob2xkXCIsIFwiaW5oZXJpdFwiXSxcbiAgICBvdXRwdXRzOiBbXCJjb2x1bW5SZXNpemluZ1wiLCBcImNvbHVtblJlc2l6aW5nUmVmdXNlZFwiLCBcImNvbHVtblJlc2l6ZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdHcmlkUmVzaXppbmdGZWF0dXJlIGV4dGVuZHMgRmVhdHVyZTxJZ0dyaWRSZXNpemluZz4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcmVzaXppbmcgd2lkZ2V0XG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyBhIGNvbHVtbiB0byBhIHNwZWNpZmllZCB3aWR0aCBpbiBwaXhlbHMsIHBlcmNlbnRzIG9yIGF1dG8gaWYgbm8gd2lkdGggaXMgc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAgICBBbiBpZGVudGlmaWVyIGZvciB0aGUgY29sdW1uLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgYXMgYSBjb2x1bW5JbmRleCBlbHNlIGlmIGEgc3RyaW5ncyBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgYXMgYSBjb2x1bW5LZXkuXG4gICAgICogQHBhcmFtIHdpZHRoICAgIFdpZHRoIG9mIHRoZSBjb2x1bW4gaW4gcGl4ZWxzIG9yIHBlcmNlbnRzLiBJZiBubyB3aWR0aCBvciBcIipcIiBpcyBzcGVjaWZpZWQgdGhlIGNvbHVtbiB3aWxsIGJlIGF1dG8tc2l6ZWQgdG8gdGhlIHdpZHRoIG9mIHRoZSBkYXRhIGluIGl0IChpbmNsdWRpbmcgaGVhZGVyIGFuZCBmb290ZXIgY2VsbHMpLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHJlc2l6ZShjb2x1bW46IE9iamVjdCwgd2lkdGg/OiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xufSJdfQ==