/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { IgControlBase } from '../igcontrolbase/igcontrolbase';
import { QueryList, ContentChild, ContentChildren, Input } from '@angular/core';
import { Column } from './column.directive';
import { Features } from './features.directive';
/**
 * @template Model
 */
export class IgGridBase extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataSource(value) {
        this._dataSource = value;
        /** @type {?} */
        const grid = jQuery(this._el).data(this._widgetName);
        if (grid) {
            jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._columns && this._columns.length) {
            if (this.options) {
                this.options["columns"] = this._columns.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                (c) => c._settings));
            }
        }
        if (this.featuresList) {
            if (this.options) {
                this.options["features"] = this.featuresList.allFeatures.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                (c) => { return c.initSettings; }));
            }
        }
        if (this.options && this.options["features"] && !this.featuresList) {
            this.featuresList = new Features();
            //populate featuresList
            for (var i = 0; i < this.options["features"].length; i++) {
                /** @type {?} */
                var featureName = this.options["features"][i].name.charAt(0).toLowerCase() + this.options["features"][i].name.slice(1);
                this.featuresList.addFeature(featureName, this._el);
            }
        }
        super.ngOnInit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    createDataSource(value) {
        return jQuery.extend(true, [], value);
    }
    /**
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    deleteRow(id, index) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var tr = element.find("tr[data-id='" + id + "']");
        if (tr.length > 0) {
            tr.remove();
            jQuery(this._el).data(this._widgetName).dataSource.deleteRow(id, true);
            jQuery(this._el).data(this._widgetName).dataSource._removeTransactionsByRecordId(id);
        }
        this._changes.splice(index, 1);
    }
    /**
     * @param {?} rowData
     * @param {?} index
     * @return {?}
     */
    addRow(rowData, index) {
        /** @type {?} */
        var grid;
        /** @type {?} */
        var pkKey = this["primaryKey"] || this.options["primaryKey"];
        /** @type {?} */
        var existingDomRow = jQuery(this._el).find("tr[data-id='" + rowData[pkKey] + "']");
        /** @type {?} */
        var widgetName = this._widgetName;
        /** @type {?} */
        var existingRow;
        /** @type {?} */
        var t;
        if (this._widgetName === "igHierarchicalGrid") {
            widgetName = "igGrid";
        }
        grid = jQuery(this._el).data(widgetName);
        if (existingDomRow.length === 0) {
            grid.renderNewRow(rowData, rowData[pkKey]);
        }
        existingRow = grid.dataSource.findRecordByKey(rowData[pkKey]);
        if (!existingRow) {
            // add the row without affecting the original DS (scope source) 
            // TODO: trigger rowAdded event?
            grid.dataSource._addRow(rowData, index);
            //add transaction
            t = grid.dataSource._createNewRowTransaction(rowData[pkKey], rowData);
            grid.dataSource._addTransaction(t);
            grid.dataSource._removeTransactionByTransactionId(t.tid);
        }
        this._changes.push(this.kvalDiffers.find({}).create());
    }
    /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    updateRow(rec, currValue, key) {
        /** @type {?} */
        const pkKey = this["primaryKey"] || this.options["primaryKey"];
        /** @type {?} */
        let widgetName = this._widgetName;
        if (this._widgetName === "igHierarchicalGrid") {
            widgetName = "igGrid";
        }
        /** @type {?} */
        const element = jQuery(this._el);
        /** @type {?} */
        const grid = element.data(widgetName);
        /** @type {?} */
        const tr = element.find("tr[data-id='" + rec[pkKey] + "']");
        /** @type {?} */
        const column = grid.columnByKey(key);
        /** @type {?} */
        let newFormattedVal;
        /** @type {?} */
        let td;
        if (column) {
            if (column.template) {
                newFormattedVal = grid._renderTemplatedCell(rec, column);
            }
            else {
                newFormattedVal = grid._renderCell(currValue, column, rec);
            }
            td = grid._getCellsByColKey(element.find("tr[data-id='" + rec[pkKey] + "']"), key);
            //if current cell is still in edit mode, exit it.
            if (jQuery(td).find("input.ui-igedit-input").length > 0) {
                element.data("igGridUpdating").endEdit();
            }
            jQuery(td).html(newFormattedVal);
            if (grid.options.localSchemaTransform) {
                rec = grid.dataSource.schema().transform([rec])[0];
            }
            grid.dataSource.updateRow(rec[pkKey], rec);
            grid.dataSource._commitTransactionsByRowId(rec[pkKey]);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const ds = "dataSource";
        if (ds in changes) {
            /** @type {?} */
            const value = changes[ds].currentValue;
            if (value) {
                try {
                    this._differ = this._differs.find(value).create();
                    this._changes = [];
                    for (var i = 0; i < this._dataSource.length; i++) {
                        this._changes.push(this.kvalDiffers.find({}).create());
                    }
                }
                catch (e) {
                    throw new Error("Only binding to arrays is supported.");
                }
            }
        }
        super.ngOnChanges(changes);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this._differ) {
            /** @type {?} */
            const changes = this._differ.diff(this._dataSource);
            //check if grid is initialized
            /** @type {?} */
            const grid = jQuery(this._el).data(this._widgetName);
            if (changes && grid) {
                this.dataSourceApplyChanges(changes);
            }
            if (changes && changes.isDirty && grid) {
                //data source has been changed post initialization.
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
            if (this._changes && grid) {
                /** @type {?} */
                const pkKey = this["primaryKey"] || this.options["primaryKey"];
                //check recs
                for (var i = 0; i < this._dataSource.length; i++) {
                    /** @type {?} */
                    var item = this._dataSource[i];
                    /** @type {?} */
                    var rowChanges = this._changes[i].diff(item);
                    if (rowChanges) {
                        rowChanges.forEachChangedItem((/**
                         * @param {?} change
                         * @return {?}
                         */
                        (change) => {
                            this.updateRow(item, change.currentValue, change.key);
                        }));
                    }
                }
            }
        }
        super.ngDoCheck();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    dataSourceApplyChanges(changes) {
        /** @type {?} */
        const pkKey = this["primaryKey"] || this.options["primaryKey"];
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => this.addRow(r.item, r.currentIndex)));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => { this.deleteRow(r.item[pkKey], r.previousIndex); }));
    }
    /**
     * @return {?}
     */
    allRows() { }
    ;
}
IgGridBase.propDecorators = {
    dataSource: [{ type: Input }],
    _columns: [{ type: ContentChildren, args: [Column,] }],
    featuresList: [{ type: ContentChild, args: [Features, { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgGridBase.prototype._changes;
    /** @type {?} */
    IgGridBase.prototype._columns;
    /** @type {?} */
    IgGridBase.prototype.featuresList;
    /**
     * @type {?}
     * @private
     */
    IgGridBase.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,