/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
export class Column {
    /**
     * @param {?} el
     */
    constructor(el) {
        this._settings = {};
        this._el = el;
        /** @type {?} */
        let self = this;
        /** @type {?} */
        let i;
        /** @type {?} */
        let settings = ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass'];
        for (i = 0; i < settings.length; i++) {
            Object.defineProperty(self, settings[i], {
                set: self.createColumnsSetter(settings[i]),
                get: self.createColumnsGetter(settings[i]),
                enumerable: true,
                configurable: true
            });
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    createColumnsSetter(name) {
        return (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            let grid = jQuery(this._el.nativeElement.parentElement).find("table[role='grid']");
            /** @type {?} */
            let columns = grid["igGrid"]("option", "columns");
            this._settings[name] = value;
            if (jQuery.ui["igGrid"] &&
                jQuery.ui["igGrid"].prototype.options &&
                jQuery.ui["igGrid"].prototype.options.hasOwnProperty("columns") &&
                grid.data("igGrid")) {
                //reapply all column settings when a column setting is changed
                grid["igGrid"]("option", "columns", columns);
            }
        });
    }
    /**
     * @param {?} name
     * @return {?}
     */
    createColumnsGetter(name) {
        return (/**
         * @return {?}
         */
        function () {
            return this._settings[name];
        });
    }
}
Column.decorators = [
    { type: Directive, args: [{
                selector: 'column',
                inputs: ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass']
            },] }
];
/** @nocollapse */
Column.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /** @type {?} */
    Column.prototype._settings;
    /**
     * @type {?}
     * @private
     */
    Column.prototype._el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2NvbHVtbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUXRELE1BQU0sT0FBTyxNQUFNOzs7O0lBSWxCLFlBQVksRUFBYztRQUhuQixjQUFTLEdBQVEsRUFBRSxDQUFDO1FBSTFCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDOztZQUNWLElBQUksR0FBRyxJQUFJOztZQUNYLENBQUM7O1lBQUUsUUFBUSxHQUFHLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLHlCQUF5QixFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDO1FBQ25PLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hDLEdBQUcsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxHQUFHLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFlBQVksRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQztTQUNIO0lBQ0YsQ0FBQzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxJQUFJO1FBQ3ZCOzs7O1FBQU8sVUFBVSxLQUFLOztnQkFDakIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUM7O2dCQUM5RSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7WUFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7WUFFN0IsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFDdEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTztnQkFDckMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7Z0JBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3JCLDhEQUE4RDtnQkFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDN0M7UUFDRixDQUFDLEVBQUE7SUFDRixDQUFDOzs7OztJQUVELG1CQUFtQixDQUFDLElBQUk7UUFDdkI7OztRQUFPO1lBQ04sT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsRUFBQTtJQUNGLENBQUM7OztZQTFDRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSx5QkFBeUIsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQzthQUN6Tjs7OztZQVBRLFVBQVU7Ozs7SUFTbEIsMkJBQTJCOzs7OztJQUMzQixxQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBEaXJlY3RpdmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5kZWNsYXJlIHZhciBqUXVlcnk6IGFueTtcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnY29sdW1uJyxcblx0aW5wdXRzOiBbJ2hlYWRlclRleHQnLCAna2V5JywgJ2Zvcm1hdHRlcicsICdmb3JtYXQnLCAnZGF0YVR5cGUnLCAnd2lkdGgnLCAnaGlkZGVuJywgJ3RlbXBsYXRlJywgJ3VuYm91bmQnLCAnZ3JvdXAnLCAncm93c3BhbicsICdmb3JtdWxhJywgJ3VuYm91bmRWYWx1ZXMnLCAndW5ib3VuZFZhbHVlc1VwZGF0ZU1vZGUnLCAnaGVhZGVyQ3NzQ2xhc3MnLCAnY29sdW1uQ3NzQ2xhc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBDb2x1bW4ge1xuXHRwdWJsaWMgX3NldHRpbmdzOiBhbnkgPSB7fTtcblx0cHJpdmF0ZSBfZWw6IGFueTtcblxuXHRjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZikge1xuXHRcdHRoaXMuX2VsID0gZWw7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCBpLCBzZXR0aW5ncyA9IFsnaGVhZGVyVGV4dCcsICdrZXknLCAnZm9ybWF0dGVyJywgJ2Zvcm1hdCcsICdkYXRhVHlwZScsICd3aWR0aCcsICdoaWRkZW4nLCAndGVtcGxhdGUnLCAndW5ib3VuZCcsICdncm91cCcsICdyb3dzcGFuJywgJ2Zvcm11bGEnLCAndW5ib3VuZFZhbHVlcycsICd1bmJvdW5kVmFsdWVzVXBkYXRlTW9kZScsICdoZWFkZXJDc3NDbGFzcycsICdjb2x1bW5Dc3NDbGFzcyddO1xuXHRcdGZvcihpID0gMDsgaSA8IHNldHRpbmdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgc2V0dGluZ3NbaV0sIHtcblx0XHRcdFx0c2V0OiBzZWxmLmNyZWF0ZUNvbHVtbnNTZXR0ZXIoc2V0dGluZ3NbaV0pLFxuXHRcdFx0XHRnZXQ6IHNlbGYuY3JlYXRlQ29sdW1uc0dldHRlcihzZXR0aW5nc1tpXSksXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Y3JlYXRlQ29sdW1uc1NldHRlcihuYW1lKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0bGV0IGdyaWQgPSBqUXVlcnkodGhpcy5fZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50KS5maW5kKFwidGFibGVbcm9sZT0nZ3JpZCddXCIpO1xuXHRcdFx0bGV0IGNvbHVtbnMgPSBncmlkW1wiaWdHcmlkXCJdKFwib3B0aW9uXCIsIFwiY29sdW1uc1wiKTtcblx0XHRcdHRoaXMuX3NldHRpbmdzW25hbWVdID0gdmFsdWU7XG5cblx0XHRcdGlmIChqUXVlcnkudWlbXCJpZ0dyaWRcIl0gJiZcblx0XHRcdFx0alF1ZXJ5LnVpW1wiaWdHcmlkXCJdLnByb3RvdHlwZS5vcHRpb25zICYmXG5cdFx0XHRcdGpRdWVyeS51aVtcImlnR3JpZFwiXS5wcm90b3R5cGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImNvbHVtbnNcIikgJiZcblx0XHRcdFx0Z3JpZC5kYXRhKFwiaWdHcmlkXCIpKSB7XG5cdFx0XHRcdC8vcmVhcHBseSBhbGwgY29sdW1uIHNldHRpbmdzIHdoZW4gYSBjb2x1bW4gc2V0dGluZyBpcyBjaGFuZ2VkXG5cdFx0XHRcdGdyaWRbXCJpZ0dyaWRcIl0oXCJvcHRpb25cIiwgXCJjb2x1bW5zXCIsIGNvbHVtbnMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGNyZWF0ZUNvbHVtbnNHZXR0ZXIobmFtZSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fc2V0dGluZ3NbbmFtZV07XG5cdFx0fVxuXHR9XG59Il19