/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgTreeComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataSource(value) {
        this._dataSource = value;
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        super.ngOnInit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const ds = "dataSource";
        //const options = "options";
        if (ds in changes) {
            /** @type {?} */
            const value = changes[ds].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create();
                    this._changes = [];
                    for (var i = 0; i < this._dataSource.length; i++) {
                        this._changes.push(this.kvalDiffers.find({}).create());
                    }
                }
                catch (e) {
                    throw new Error("Only binding to arrays is supported.");
                }
            }
        }
        super.ngOnChanges(changes);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this._differ) {
            /** @type {?} */
            const changes = this._differ.diff(this._dataSource);
            //check if grid is initialized
            /** @type {?} */
            const elem = jQuery(this._el).data(this._widgetName);
            if (changes && elem) {
                this.dataSourceApplyChanges(changes);
            }
            if (this._changes && elem) {
                //check recs
                for (var i = 0; i < this._dataSource.length; i++) {
                    /** @type {?} */
                    var item = this._dataSource[i];
                    /** @type {?} */
                    var rowChanges = this._changes[i].diff(item);
                    if (rowChanges) {
                        rowChanges.forEachChangedItem((/**
                         * @param {?} change
                         * @return {?}
                         */
                        (change) => {
                            this.updateItem(item, change.currentValue, change.key);
                        }));
                    }
                }
            }
        }
        super.ngDoCheck();
    }
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    addItem(item, index) {
        this.dataBind();
        this._changes.push(this.kvalDiffers.find({}).create());
    }
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    deleteItem(item, index) {
        this.dataBind();
        this._changes.splice(index, 1);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    dataSourceApplyChanges(changes) {
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => this.addItem(r.item, r.currentIndex)));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => { this.deleteItem(r.item, r.previousIndex); }));
    }
    /**
     * @param {?} item
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    updateItem(item, value, key) {
        this.dataBind();
    }
    /**
     * @return {?}
     */
    markForCheck() {
        super.markForCheck();
        /** @type {?} */
        const bindings = this["bindings"] || this.options.bindings;
        if (bindings && bindings.childDataProperty) {
            this.dataBind();
        }
    }
    // optionChange(options?) {
    // 	var opts = options || jQuery.extend(true, {}, this._config);
    // 	// Bindings are modified internally by the tree. Excluding them from the change detection
    // 	if (opts.bindings) {
    // 		delete opts.bindings;
    // 	}
    // 	super.optionChange(opts);
    // }
    /**
     * Performs databinding on the igTree.
     * @return {?}
     */
    /* istanbul ignore next */
    dataBind() { return; }
    ;
    /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    toggleCheckstate(node, event) { return; }
    ;
    /**
     * Toggles the collapse/expand state for the specified node.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    toggle(node, event) { return; }
    ;
    /**
     * Expands the tree down to the specified node and selects the node if specified.
     *
     * @param {?} node     Specifies the node element down to which the tree would be expanded.
     * @param {?=} toSelect     Specifies the whether to select the node after expanding to it.
     * @return {?}
     */
    /* istanbul ignore next */
    expandToNode(node, toSelect) { return; }
    ;
    /**
     * Expands the specified node.
     *
     * @param {?} node     Specifies the node element to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    expand(node) { return; }
    ;
    /**
     * Collapses the specified node.
     *
     * @param {?} node     Specifies the node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    collapse(node) { return; }
    ;
    /**
     * Retrieves the parent node element of the specified node element.
     *
     * @param {?} node     Specifies the jQuery selected node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    parentNode(node) { return; }
    ;
    /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param {?} nodePath     Specifies the path to the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    nodeByPath(nodePath) { return; }
    ;
    /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param {?} value     Specifies the value of the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    nodesByValue(value) { return; }
    ;
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes checked.
     * @return {?}
     */
    /* istanbul ignore next */
    checkedNodes() { return; }
    ;
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
     * @return {?}
     */
    /* istanbul ignore next */
    uncheckedNodes() { return; }
    ;
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
     * @return {?}
     */
    /* istanbul ignore next */
    partiallyCheckedNodes() { return; }
    ;
    /**
     * Selects a node.
     *
     * @param {?} node     Specifies the node element to be selected.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    select(node, event) { return; }
    ;
    /**
     * Deselects the specified node.
     *
     * @param {?} node     Specifies the node element to be deselected.
     * @return {?}
     */
    /* istanbul ignore next */
    deselect(node) { return; }
    ;
    /**
     * Deselects all the selected nodes.
     * @return {?}
     */
    /* istanbul ignore next */
    clearSelection() { return; }
    ;
    /**
     * Retrieves the node object for the selected node.
     * @return {?}
     */
    /* istanbul ignore next */
    selectedNode() { return; }
    ;
    /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element to start the search from. If not specified then search would start from the root of the tree.
     * @return {?}
     */
    /* istanbul ignore next */
    findNodesByText(text, parent) { return; }
    ;
    /**
     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element the children of which would be searched.
     * @return {?}
     */
    /* istanbul ignore next */
    findImmediateNodesByText(text, parent) { return; }
    ;
    /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param {?} index     Specifies the index the node at which to be retrieved.
     * @param {?=} parent     The parent node element to start the search from.
     * @return {?}
     */
    /* istanbul ignore next */
    nodeByIndex(index, parent) { return; }
    ;
    /**
     * Retrieves a node object for the specified node element.
     *
     * @param {?} element     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    nodeFromElement(element) { return; }
    ;
    /**
     * Retrieves a node object collection of the immediate children of the provided node element.
     *
     * @param {?} parent     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    children(parent) { return; }
    ;
    /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param {?} path     Specifies the path of the node the children of which are to be retrieved.
     * @return {?}
     */
    /* istanbul ignore next */
    childrenByPath(path) { return; }
    ;
    /**
     * Returns true if the provided node element is selected and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    isSelected(node) { return; }
    ;
    /**
     * Returns true if the provided node element is expanded and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    isExpanded(node) { return; }
    ;
    /**
     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    isChecked(node) { return; }
    ;
    /**
     * Returns the specified node checkstate.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    checkState(node) { return; }
    ;
    /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
     *
     * @param {?} node     Specifies the data used to create the new nodeс.
     * @param {?=} parent     Specifies the element of the parent node the nodes are to be appended to.
     * @param {?=} nodeIndex     Specifies the index at which the nodes to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    addNode(node, parent, nodeIndex) { return; }
    ;
    /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param {?} path     Specifies the path of the node to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    removeAt(path) { return; }
    ;
    /**
     * Removing all the nodes with the specified value.
     *
     * @param {?} value     Specifies the value of the nodes to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    removeNodesByValue(value) { return; }
    ;
    /**
     * Performs a UI update on the provided node element with the provided data.
     *
     * @param {?} element     Specifies the node to be updated.
     * @param {?} data     Specifies the new data item the node would update according to.
     * @return {?}
     */
    /* istanbul ignore next */
    applyChangesToNode(element, data) { return; }
    ;
    /**
     * Returns the transaction log stack.
     * @return {?}
     */
    /* istanbul ignore next */
    transactionLog() { return; }
    ;
    /**
     * Returns the data for the node with specified path.
     *
     * @param {?} path     Specifies the node path for which the data is returned.
     * @return {?}
     */
    /* istanbul ignore next */
    nodeDataFor(path) { return; }
    ;
    /**
     * Destructor for the igTree widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgTreeComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-tree",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "checkboxMode", "singleBranchExpand", "hotTracking", "parentNodeImageUrl", "parentNodeImageClass", "parentNodeImageTooltip", "leafNodeImageUrl", "leafNodeImageClass", "leafNodeImageTooltip", "animationDuration", "pathSeparator", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "responseDataType", "requestType", "responseContentType", "initialExpandDepth", "loadOnDemand", "bindings", "defaultNodeTarget", "dragAndDrop", "updateUrl", "dragAndDropSettings"],
                outputs: ["dataBinding", "dataBound", "rendering", "rendered", "selectionChanging", "selectionChanged", "nodeCheckstateChanging", "nodeCheckstateChanged", "nodePopulating", "nodePopulated", "nodeCollapsing", "nodeCollapsed", "nodeExpanding", "nodeExpanded", "nodeClick", "nodeDoubleClick", "dragStart", "drag", "dragStop", "nodeDropping", "nodeDropped"]
            }] }
];
/** @nocollapse */
IgTreeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
IgTreeComponent.propDecorators = {
    dataSource: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgTreeComponent.prototype._dataSource;
    /**
     * @type {?}
     * @private
     */
    IgTreeComponent.prototype._changes;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,