/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgContentControlBase } from "../igcontrolbase/igcontentcontrolbase";
export class IgLayoutManagerComponent extends IgContentControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    reflow(forceReflow, animationDuration, event) { return; }
    ;
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                     1. Remove custom CSS classes that were added.
     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     *                     3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgLayoutManagerComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-layout-manager",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "borderLayout", "gridLayout", "height", "itemCount", "items", "layoutMode", "width"],
                outputs: ["internalResized", "internalResizing", "itemRendered", "itemRendering", "rendered"]
            }] }
];
/** @nocollapse */
IgLayoutManagerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdsYXlvdXRtYW5hZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdsYXlvdXRtYW5hZ2VyL2lnbGF5b3V0bWFuYWdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBUTdFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxvQkFBcUM7Ozs7Ozs7O0lBQy9FLFlBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Ozs7O0lBWTVLLE1BQU0sQ0FBQyxXQUFxQixFQUFFLGlCQUEwQixFQUFFLEtBQWMsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7OztJQVM1RixPQUFPLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7WUE1QnRDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QixRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDO2dCQUNySyxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQzthQUNoRzs7OztZQVJRLFVBQVU7WUFBRSxRQUFRO1lBQUUsZUFBZTtZQUFhLGVBQWU7WUFBRSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBDb21wb25lbnQsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdDb250ZW50Q29udHJvbEJhc2UgfSBmcm9tIFwiLi4vaWdjb250cm9sYmFzZS9pZ2NvbnRlbnRjb250cm9sYmFzZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJpZy1sYXlvdXQtbWFuYWdlclwiLFxuICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICBpbnB1dHM6IFtcIndpZGdldElkXCIsIFwib3B0aW9uc1wiLCBcImNoYW5nZURldGVjdGlvbkludGVydmFsXCIsIFwiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJib3JkZXJMYXlvdXRcIiwgXCJncmlkTGF5b3V0XCIsIFwiaGVpZ2h0XCIsIFwiaXRlbUNvdW50XCIsIFwiaXRlbXNcIiwgXCJsYXlvdXRNb2RlXCIsIFwid2lkdGhcIl0sXG4gICAgb3V0cHV0czogW1wiaW50ZXJuYWxSZXNpemVkXCIsIFwiaW50ZXJuYWxSZXNpemluZ1wiLCBcIml0ZW1SZW5kZXJlZFwiLCBcIml0ZW1SZW5kZXJpbmdcIiwgXCJyZW5kZXJlZFwiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ0xheW91dE1hbmFnZXJDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRlbnRDb250cm9sQmFzZTxJZ0xheW91dE1hbmFnZXI+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyKTsgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VycyByZWNhbGN1bGF0aW9uIG9mIHRoZSBsYXlvdXQgZGltZW5zaW9ucy4gTGF5b3V0cyBtYXkgbm90IG5lZWQgdG8gYmUgcmVmbG93ZWQgbWFudWFsbHksIGlmIHRoZWlyIHNpemVzIGFyZSBpbiBwZXJjZW50YWdlcyAoaS5lLiB0aGV5IGFyZSByZXNwb25zaXZlIGJ5IGRlZmF1bHQpXG4gICAgICogICAgICAgICAgICAgICAgICAgICB0aGlzIGNhbiBiZSBwYXJ0aWN1bGFybHkgdXNlZnVsIHdpdGggYSBncmlkIGxheW91dCwgd2hlbiB0aGUgY29udGFpbmVyIGhhcyBwZXJjZW50YWdlIHNpemVzLCBidXQgaXRlbXMgYXJlIGNhbGN1bGF0ZWQgaW4gcGl4ZWxzIGFuZCBwb3NpdGlvbmVkIGFic29sdXRlbHkgaW4gdGhlIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb3JjZVJlZmxvdyBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcmVmbG93IHNob3VsZCBiZSBmb3JjZWQuIFVzZWZ1bCBpbiBjYXNlcyB3aGVyZSB0aGUgaXRlbXMgc2l6ZSBhbmQgcG9zaXRpb24gd2FzIGNoYW5nZWQgbWFudWFsbHkuXG4gICAgICogQHBhcmFtIGFuaW1hdGlvbkR1cmF0aW9uIFRoZSBhbmltYXRpb24gZHVyYXRpb24gdG8gYmUgdXNlZCBmb3IgdGhpcyByZWZsb3cgb25seS4gU3VwcG9ydGVkIG9ubHkgZm9yIEdyaWQgTGF5b3V0IG1vZGUuXG4gICAgICogQHBhcmFtIGV2ZW50IEluZGljYXRlcyB0aGUgYnJvd3NlciBldmVuIHdoaWNoIHRyaWdnZXJlZCB0aGlzIGFjdGlvbiAobm90IEFQSSkuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgcmVmbG93KGZvcmNlUmVmbG93PzogYm9vbGVhbiwgYW5pbWF0aW9uRHVyYXRpb24/OiBudW1iZXIsIGV2ZW50PzogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgaXMgcGFydCBvZiB0aGUgalF1ZXJ5IFVJIHdpZGdldCBBUEkgYW5kIGRvZXMgdGhlIGZvbGxvd2luZzpcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIDEuIFJlbW92ZSBjdXN0b20gQ1NTIGNsYXNzZXMgdGhhdCB3ZXJlIGFkZGVkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgMi4gUmVtb3ZlIGFueSBlbGVtZW50cyB0aGF0IHdlcmUgYWRkZWQgYXQgd2lkZ2V0J3MgaW5pdGlhbGl6YXRpb24gYW5kIGFmdGVyIHRoYXQsIHdoaWNoIGRpZG4ndCBiZWxvdyB0byB0aGUgb3JpZ2luYWwgbWFya3VwXG4gICAgICogICAgICAgICAgICAgICAgICAgICAzLiBVbmJpbmQgYWxsIGV2ZW50cyB0aGF0IHdlcmUgYm91bmQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xufSJdfQ==