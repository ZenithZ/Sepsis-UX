/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer, ElementRef, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
export class IgPercentEditorComponent extends IgEditorBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     * @param {?} model
     */
    constructor(el, renderer, differs, kvalDiffers, cdr, model) {
        super(el, renderer, differs, kvalDiffers, cdr, model);
        this.model = model;
    }
    /**
     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    insert(string) { return; }
    ;
    /**
     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
     *
     * @param {?=} symbol New percent symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    percentSymbol(symbol) { return; }
    ;
    /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    value(newValue) { return; }
    ;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    findListItemIndex(number) { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    getSelectedText() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    getSelectionStart() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    getSelectionEnd() { return; }
    ;
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    spinUp(delta) { return; }
    ;
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    spinDown(delta) { return; }
    ;
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    selectListIndexUp() { return; }
    ;
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    selectListIndexDown() { return; }
    ;
    /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    getRegionalOption() { return; }
    ;
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    changeRegional() { return; }
    ;
}
IgPercentEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-percent-editor",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "negativeSign", "negativePattern", "decimalSeparator", "groupSeparator", "groups", "maxDecimals", "minDecimals", "dataMode", "minValue", "maxValue", "spinDelta", "scientificFormat", "positivePattern", "percentSymbol", "displayFactor"],
                outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
            }] }
];
/** @nocollapse */
IgPercentEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef },
    { type: NgModel, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    IgPercentEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,