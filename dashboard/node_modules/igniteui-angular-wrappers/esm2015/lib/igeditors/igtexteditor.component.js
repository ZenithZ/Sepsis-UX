/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
export class IgTextEditorComponent extends IgEditorBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     * @param {?} model
     */
    constructor(el, renderer, differs, kvalDiffers, cdr, model) {
        super(el, renderer, differs, kvalDiffers, cdr, model);
        this.model = model;
    }
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    changeLocale() { return; }
    ;
    /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    displayValue() { return; }
    ;
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    dropDownContainer() { return; }
    ;
    /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    showDropDown() { return; }
    ;
    /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    hideDropDown() { return; }
    ;
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    dropDownButton() { return; }
    ;
    /**
     * Returns if the drop-down list is visible.
     * @return {?}
     */
    /* istanbul ignore next */
    dropDownVisible() { return; }
    ;
    /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    clearButton() { return; }
    ;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    findListItemIndex(text, matchType) { return; }
    ;
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    selectedListIndex(index) { return; }
    ;
    /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectedListItem() { return; }
    ;
    /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectedText() { return; }
    ;
    /**
     * Gets the start index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectionStart() { return; }
    ;
    /**
     * Gets the end index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectionEnd() { return; }
    ;
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    insert(string) { return; }
    ;
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    select(start, end) { return; }
    ;
    /**
     * Selects the previous item from the drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    spinUp() { return; }
    ;
    /**
     * Selects the next item from the drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    spinDown() { return; }
    ;
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    spinUpButton() { return; }
    ;
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    spinDownButton() { return; }
    ;
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    inputName(newValue) { return; }
    ;
    /**
     * @param {?} newValue
     * @return {?}
     */
    value(newValue) { return; }
    ;
    /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    field() { return; }
    ;
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    editorContainer() { return; }
    ;
    /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    hasFocus() { return; }
    ;
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    setFocus(delay) { return; }
    ;
    /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    hide() { return; }
    ;
    /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    show() { return; }
    ;
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    validator() { return; }
    ;
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    isValid() { return; }
    ;
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    validate() { return; }
    ;
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgTextEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-text-editor",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications"],
                outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
            }] }
];
/** @nocollapse */
IgTextEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef },
    { type: NgModel, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    IgTextEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,