/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
export class IgTimePickerComponent extends IgEditorBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     * @param {?} model
     */
    constructor(el, renderer, differs, kvalDiffers, cdr, model) {
        super(el, renderer, differs, kvalDiffers, cdr, model);
        this.model = model;
    }
    /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectedListItem() { return; }
    ;
    /**
     * Returns the visibility state of the calendar.
     * @return {?}
     */
    /* istanbul ignore next */
    dropDownVisible() { return; }
    ;
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    dropDownButton() { return; }
    ;
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    dropDownContainer() { return; }
    ;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    findListItemIndex(text, matchType) { return; }
    ;
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    selectedListIndex(index) { return; }
    ;
    /* istanbul ignore next */
    /**
     * @param {?} newValue
     * @return {?}
     */
    value(newValue) { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    selectDate() { return; }
    ;
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    changeRegional() { return; }
    ;
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectedDate() { return; }
    ;
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    spinUp(delta) { return; }
    ;
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    spinDown(delta) { return; }
    ;
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    spinUpButton() { return; }
    ;
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    spinDownButton() { return; }
    ;
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    isValid() { return; }
    ;
}
IgTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-time-picker",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "disabled", "create", "locale", "language", "regional", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "suppressNotifications", "suppressKeyboard", "inputMask", "dataMode", "unfilledCharsPrompt", "padChar", "emptyChar", "minValue", "maxValue", "dateDisplayFormat", "dateInputFormat", "displayTimeOffset", "spinDelta", "limitSpinToCurrentField", "enableUTCDates", "centuryThreshold", "yearShift", "itemsDelta", "timeInputFormat", "timeDisplayFormat"],
                outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
            }] }
];
/** @nocollapse */
IgTimePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef },
    { type: NgModel, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    IgTimePickerComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,