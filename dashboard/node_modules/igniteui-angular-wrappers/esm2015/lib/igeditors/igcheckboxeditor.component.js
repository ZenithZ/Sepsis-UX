/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
export class IgCheckboxEditorComponent extends IgEditorBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     * @param {?} model
     */
    constructor(el, renderer, differs, kvalDiffers, cdr, model) {
        super(el, renderer, differs, kvalDiffers, cdr, model);
        this.model = model;
    }
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    isValid() { return; }
    ;
    /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param {?} newValue
     * @return {?}
     */
    /* istanbul ignore next */
    value(newValue) { return; }
    ;
    /**
     * Toggles the state of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    toggle() { return; }
    ;
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    inputName(newValue) { return; }
    ;
    /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    field() { return; }
    ;
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    editorContainer() { return; }
    ;
    /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    hasFocus() { return; }
    ;
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    setFocus(delay) { return; }
    ;
    /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    hide() { return; }
    ;
    /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    show() { return; }
    ;
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    validator() { return; }
    ;
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    validate() { return; }
    ;
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgCheckboxEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-checkbox-editor",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "checked", "size", "iconClass"],
                outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged"]
            }] }
];
/** @nocollapse */
IgCheckboxEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef },
    { type: NgModel, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    IgCheckboxEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdjaGVja2JveGVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnZWRpdG9ycy9pZ2NoZWNrYm94ZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFRekMsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFlBQThCOzs7Ozs7Ozs7SUFDekUsWUFBWSxFQUFjLEVBQUUsUUFBa0IsRUFBRSxPQUF3QixFQUFFLFdBQTRCLEVBQUUsR0FBc0IsRUFBcUIsS0FBYztRQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQXhFLFVBQUssR0FBTCxLQUFLLENBQVM7SUFBMkQsQ0FBQzs7Ozs7O0lBTXROLE9BQU8sS0FBYyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7Ozs7OztJQVkvQixLQUFLLENBQUMsUUFBZ0IsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU01QyxNQUFNLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVEzQixTQUFTLENBQUMsUUFBaUIsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU1qRCxLQUFLLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNNUIsZUFBZSxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTXRDLFFBQVEsS0FBYyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUWhDLFFBQVEsQ0FBQyxLQUFjLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNM0MsSUFBSSxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTXpCLElBQUksS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU16QixTQUFTLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNaEMsUUFBUSxLQUFjLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTWhDLE9BQU8sS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7OztZQS9GdEMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUM7Z0JBQ3BPLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLENBQUM7YUFDckw7Ozs7WUFUbUIsVUFBVTtZQUFFLFFBQVE7WUFBRSxlQUFlO1lBQVksZUFBZTtZQUFFLGlCQUFpQjtZQUU5RixPQUFPLHVCQVNxSCxRQUFROzs7O0lBQVQsMENBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBPcHRpb25hbCwgS2V5VmFsdWVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0VkaXRvckJhc2UgfSBmcm9tIFwiLi9pZ2VkaXRvcmJhc2VcIjtcbmltcG9ydCB7IE5nTW9kZWwgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctY2hlY2tib3gtZWRpdG9yXCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czogW1wid2lkZ2V0SWRcIiwgXCJvcHRpb25zXCIsIFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIiwgXCJkaXNhYmxlZFwiLCBcImNyZWF0ZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwidmFsdWVcIiwgXCJ0YWJJbmRleFwiLCBcImFsbG93TnVsbFZhbHVlXCIsIFwibnVsbFZhbHVlXCIsIFwiaW5wdXROYW1lXCIsIFwicmVhZE9ubHlcIiwgXCJ2YWxpZGF0b3JPcHRpb25zXCIsIFwiY2hlY2tlZFwiLCBcInNpemVcIiwgXCJpY29uQ2xhc3NcIl0sXG4gICAgb3V0cHV0czogW1wicmVuZGVyaW5nXCIsIFwicmVuZGVyZWRcIiwgXCJtb3VzZWRvd25cIiwgXCJtb3VzZXVwXCIsIFwibW91c2Vtb3ZlXCIsIFwibW91c2VvdmVyXCIsIFwibW91c2VvdXRcIiwgXCJibHVyXCIsIFwiZm9jdXNcIiwgXCJrZXlkb3duXCIsIFwia2V5cHJlc3NcIiwgXCJrZXl1cFwiLCBcInZhbHVlQ2hhbmdpbmdcIiwgXCJ2YWx1ZUNoYW5nZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdDaGVja2JveEVkaXRvckNvbXBvbmVudCBleHRlbmRzIElnRWRpdG9yQmFzZTxJZ0NoZWNrYm94RWRpdG9yPiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBrdmFsRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBAT3B0aW9uYWwoKSBwdWJsaWMgbW9kZWw6IE5nTW9kZWwpIHsgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyLCBtb2RlbCk7IH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgdmFsdWUgaW4gdGhlIGVkaXRvciBpcyB2YWxpZC4gTm90ZTogVGhpcyBmdW5jdGlvbiB3aWxsIG5vdCB0cmlnZ2VyIGF1dG9tYXRpYyBub3RpZmljYXRpb25zLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGlzVmFsaWQoKTogYm9vbGVhbiB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyBDdXJyZW50IGNoZWNrZWQgc3RhdGUvVmFsdWUgb2YgdGhlIGlnQ2hlY2tib3hFZGl0b3IgdGhhdCB3aWxsIGJlIHN1Ym1pdHRlZCBieSB0aGUgSFRNTCBmb3JtLlxuICAgICAqIDEuIElmIHRoZSBbdmFsdWVdKHVpLmlnY2hlY2tib3hlZGl0b3Ijb3B0aW9uczp2YWx1ZSkgb3B0aW9uIElTIE5PVCBkZWZpbmVkLCB0aGVuICd2YWx1ZScgbWV0aG9kIHdpbGwgbWF0Y2ggdGhlIGNoZWNrZWQgc3RhdGUgb2YgdGhlIGVkaXRvci5cbiAgICAgKiBUaGlzIG9wdGlvbiBpcyB1c2VkIHdoZW4gdGhlIGNoZWNrYm94IGlzIGludGVuZGVkIHRvIG9wZXJhdGUgYXMgYSBCb29sZWFuIGVkaXRvci4gSW4gdGhhdCBjYXNlIHRoZSByZXR1cm4gdHlwZSBpcyBib29sLlxuICAgICAqIDIuIElmIHRoZSBbdmFsdWVdKHVpLmlnY2hlY2tib3hlZGl0b3Ijb3B0aW9uczp2YWx1ZSkgb3B0aW9uIElTIGRlZmluZWQsIHRoZW4gJ3ZhbHVlJyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIHZhbHVlIHRoYXQgd2lsbCBiZSBzdWJtaXR0ZWQgd2hlbiB0aGUgZWRpdG9yIGlzIGNoZWNrZWQgYW5kIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZC5cbiAgICAgKiBUbyBnZXQgY2hlY2tlZCBzdGF0ZSByZWdhcmRsZXNzIG9mIHRoZSAndmFsdWUnIG9wdGlvbiwgdXNlICQoXCIuc2VsZWN0b3JcIikuaWdDaGVja2JveEVkaXRvcihcIm9wdGlvblwiLCBcImNoZWNrZWRcIik7XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3VmFsdWVcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB2YWx1ZShuZXdWYWx1ZTogT2JqZWN0KTogc3RyaW5nIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgc3RhdGUgb2YgdGhlIGNoZWNrYm94LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHRvZ2dsZSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIG5hbWUgYXR0cmlidXRlIGFwcGxpZWQgdG8gdGhlIGVkaXRvciBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ld1ZhbHVlIFRoZSBuZXcgaW5wdXQgbmFtZS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBpbnB1dE5hbWUobmV3VmFsdWU/OiBzdHJpbmcpOiBzdHJpbmcgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbnB1dCBlbGVtZW50IG9mIHRoZSBlZGl0b3IuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZmllbGQoKTogc3RyaW5nIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJlZmVyZW5jZSB0byB0aGUgalF1ZXJ5IGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGVkaXRvckNvbnRhaW5lcigpOiBzdHJpbmcgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHdoZXRoZXIgdGhlIGVkaXRvciBoYXMgZm9jdXMuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgaGFzRm9jdXMoKTogYm9vbGVhbiB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgZm9jdXMgdG8gdGhlIGVkaXRvciBhZnRlciB0aGUgc3BlY2lmaWVkIGRlbGF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlbGF5IFRoZSBkZWxheSBiZWZvcmUgZm9jdXNpbmcgdGhlIGVkaXRvci5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzZXRGb2N1cyhkZWxheT86IG51bWJlcik6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgZWRpdG9yLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGhpZGUoKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBlZGl0b3IuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc2hvdygpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJlZmVyZW5jZSB0byBbaWdWYWxpZGF0b3JdKHVpLmlndmFsaWRhdG9yKSB1c2VkIGJ5IHRoZSBlZGl0b3IuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdmFsaWRhdG9yKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIHZhbGlkYXRpb24gZm9yIHRoZSBlZGl0b3IuIElmIHZhbGlkYXRvck9wdGlvbnMgYXJlIHNldCB3aWxsIGFsc28gY2FsbCB2YWxpZGF0ZSBvbiB0aGUgW2lnVmFsaWRhdG9yXSh1aS5pZ3ZhbGlkYXRvcikuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdmFsaWRhdGUoKTogYm9vbGVhbiB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSB3aWRnZXRcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19