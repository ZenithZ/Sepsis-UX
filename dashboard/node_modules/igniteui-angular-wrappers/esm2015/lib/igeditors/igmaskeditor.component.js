/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { IgEditorBase } from "./igeditorbase";
import { Renderer, IterableDiffers, Optional, ElementRef, Component, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { NgModel } from "@angular/forms";
export class IgMaskEditorComponent extends IgEditorBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     * @param {?} model
     */
    constructor(el, renderer, differs, kvalDiffers, cdr, model) {
        super(el, renderer, differs, kvalDiffers, cdr, model);
        this.model = model;
    }
    /**
     * Gets/Sets mask editor value.
     *
     * @param {?=} newValue New mask editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    value(newValue) { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    dropDownContainer() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    showDropDown() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    hideDropDown() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    dropDownButton() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    spinUpButton() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    spinDownButton() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    dropDownVisible() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    findListItemIndex() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    selectedListIndex() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    getSelectedListItem() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    spinUp() { return; }
    ;
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    spinDown() { return; }
    ;
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    isValid() { return; }
    ;
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    changeLocale() { return; }
    ;
    /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    displayValue() { return; }
    ;
    /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    clearButton() { return; }
    ;
    /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectedText() { return; }
    ;
    /**
     * Gets the start index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectionStart() { return; }
    ;
    /**
     * Gets the end index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    getSelectionEnd() { return; }
    ;
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    insert(string) { return; }
    ;
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    select(start, end) { return; }
    ;
}
IgMaskEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-mask-editor",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "inputMask", "dataMode", "unfilledCharsPrompt", "padChar", "emptyChar"],
                outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
            }] }
];
/** @nocollapse */
IgMaskEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef },
    { type: NgModel, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    IgMaskEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,