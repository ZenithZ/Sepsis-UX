/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgSchedulerComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
    }
    /**
     * Gets reference to appointment by id
     *
     * @param {?} id
     * @return {?}
     */
    /* istanbul ignore next */
    getAppointmentById(id) { return; }
    ;
    /**
     * Creates a new appointment and renders it to the scheduler
     *
     * @param {?} appointment
     * @return {?}
     */
    /* istanbul ignore next */
    createAppointment(appointment) { return; }
    ;
    /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @return {?}
     */
    /* istanbul ignore next */
    deleteAppointment(appointment) { return; }
    ;
    /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @param {?} updateAppoinment 	updateAppoinment
     * @return {?}
     */
    /* istanbul ignore next */
    editAppointment(appointment, updateAppoinment) { return; }
    ;
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Gets reference to the today UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    todayButton() { return; }
    ;
    /**
     * Gets reference to the previous UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    previousButton() { return; }
    ;
    /**
     * Gets reference to the date range UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    dateRangeButton() { return; }
    ;
    /**
     * Gets reference to the next UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    nextButton() { return; }
    ;
    /**
     * Gets reference to the jQuery calendar UI control.
     * @return {?}
     */
    /* istanbul ignore next */
    getCalendar() { return; }
    ;
}
IgSchedulerComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-scheduler",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "views", "viewMode", "selectedDate", "enableTodayButton", "width", "height", "agendaViewSettings", "monthViewSettings", "appointmentDialogSuppress"],
                outputs: ["agendaRangeChanging", "agendaRangeChanged", "daySelected", "monthChanging", "monthChanged", "rendering", "rendered", "viewChanging", "viewChanged", "appointmentDialogOpening", "appointmentDialogOpened", "appointmentDialogClosing", "appointmentDialogClosed", "appointmentCreating", "appointmentCreated", "appointmentDeleting", "appointmentDeleted", "appointmentEditing", "appointmentEdited"]
            }] }
];
/** @nocollapse */
IgSchedulerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdzY2hlZHVsZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ3NjaGVkdWxlci9pZ3NjaGVkdWxlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVEvRCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsYUFBMEI7Ozs7Ozs7O0lBQ2hFLFlBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCO1FBQzFILEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7Ozs7SUFRTSxrQkFBa0IsQ0FBQyxFQUFVLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVFuRCxpQkFBaUIsQ0FBQyxXQUFtQixJQUFZLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7SUFRM0QsaUJBQWlCLENBQUMsV0FBbUIsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7OztJQVMzRCxlQUFlLENBQUMsV0FBbUIsRUFBRSxnQkFBd0IsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU1uRixPQUFPLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNNUIsV0FBVyxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTWxDLGNBQWMsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU1yQyxlQUFlLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNdEMsVUFBVSxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTWpDLFdBQVcsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7OztZQTlFNUMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUMsQ0FBQyxVQUFVLEVBQUMsU0FBUyxFQUFDLHlCQUF5QixFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLFVBQVUsRUFBQyxjQUFjLEVBQUMsbUJBQW1CLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxvQkFBb0IsRUFBQyxtQkFBbUIsRUFBQywyQkFBMkIsQ0FBQztnQkFDdk4sT0FBTyxFQUFDLENBQUMscUJBQXFCLEVBQUMsb0JBQW9CLEVBQUMsYUFBYSxFQUFDLGVBQWUsRUFBQyxjQUFjLEVBQUMsV0FBVyxFQUFDLFVBQVUsRUFBQyxjQUFjLEVBQUMsYUFBYSxFQUFDLDBCQUEwQixFQUFDLHlCQUF5QixFQUFDLDBCQUEwQixFQUFDLHlCQUF5QixFQUFDLHFCQUFxQixFQUFDLG9CQUFvQixFQUFDLHFCQUFxQixFQUFDLG9CQUFvQixFQUFDLG9CQUFvQixFQUFDLG1CQUFtQixDQUFDO2FBQ2pZOzs7O1lBUm1CLFVBQVU7WUFBRSxRQUFRO1lBQUUsZUFBZTtZQUFFLGVBQWU7WUFBRSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udHJvbGJhc2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctc2NoZWR1bGVyXCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czpbXCJ3aWRnZXRJZFwiLFwib3B0aW9uc1wiLFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIixcImRpc2FibGVkXCIsXCJjcmVhdGVcIixcInZpZXdzXCIsXCJ2aWV3TW9kZVwiLFwic2VsZWN0ZWREYXRlXCIsXCJlbmFibGVUb2RheUJ1dHRvblwiLFwid2lkdGhcIixcImhlaWdodFwiLFwiYWdlbmRhVmlld1NldHRpbmdzXCIsXCJtb250aFZpZXdTZXR0aW5nc1wiLFwiYXBwb2ludG1lbnREaWFsb2dTdXBwcmVzc1wiXSxcbiAgICBvdXRwdXRzOltcImFnZW5kYVJhbmdlQ2hhbmdpbmdcIixcImFnZW5kYVJhbmdlQ2hhbmdlZFwiLFwiZGF5U2VsZWN0ZWRcIixcIm1vbnRoQ2hhbmdpbmdcIixcIm1vbnRoQ2hhbmdlZFwiLFwicmVuZGVyaW5nXCIsXCJyZW5kZXJlZFwiLFwidmlld0NoYW5naW5nXCIsXCJ2aWV3Q2hhbmdlZFwiLFwiYXBwb2ludG1lbnREaWFsb2dPcGVuaW5nXCIsXCJhcHBvaW50bWVudERpYWxvZ09wZW5lZFwiLFwiYXBwb2ludG1lbnREaWFsb2dDbG9zaW5nXCIsXCJhcHBvaW50bWVudERpYWxvZ0Nsb3NlZFwiLFwiYXBwb2ludG1lbnRDcmVhdGluZ1wiLFwiYXBwb2ludG1lbnRDcmVhdGVkXCIsXCJhcHBvaW50bWVudERlbGV0aW5nXCIsXCJhcHBvaW50bWVudERlbGV0ZWRcIixcImFwcG9pbnRtZW50RWRpdGluZ1wiLFwiYXBwb2ludG1lbnRFZGl0ZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdTY2hlZHVsZXJDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnU2NoZWR1bGVyPiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBrdmFsRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7IFxuICAgICAgICBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpO1xuICAgIH1cdFxuXG4gICAgLyoqXG4gICAgICogR2V0cyByZWZlcmVuY2UgdG8gYXBwb2ludG1lbnQgYnkgaWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRBcHBvaW50bWVudEJ5SWQoaWQ6IE9iamVjdCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXBwb2ludG1lbnQgYW5kIHJlbmRlcnMgaXQgdG8gdGhlIHNjaGVkdWxlclxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcG9pbnRtZW50IFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGNyZWF0ZUFwcG9pbnRtZW50KGFwcG9pbnRtZW50OiBPYmplY3QpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGFwcG9pbnRtZW50IGZyb20gdGhlIGFwcG9pbnRtZW50IGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHBvaW50bWVudFx0YXBwb2ludG1lbnRcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZWxldGVBcHBvaW50bWVudChhcHBvaW50bWVudDogT2JqZWN0KTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhcHBvaW50bWVudCBmcm9tIHRoZSBhcHBvaW50bWVudCBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXBwb2ludG1lbnRcdGFwcG9pbnRtZW50XG4gICAgICogQHBhcmFtIHVwZGF0ZUFwcG9pbm1lbnRcdHVwZGF0ZUFwcG9pbm1lbnRcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBlZGl0QXBwb2ludG1lbnQoYXBwb2ludG1lbnQ6IE9iamVjdCwgdXBkYXRlQXBwb2lubWVudDogT2JqZWN0KTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHdpZGdldFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgcmVmZXJlbmNlIHRvIHRoZSB0b2RheSBVSSBidXR0b24uXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdG9kYXlCdXR0b24oKTogc3RyaW5nIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyByZWZlcmVuY2UgdG8gdGhlIHByZXZpb3VzIFVJIGJ1dHRvbi5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBwcmV2aW91c0J1dHRvbigpOiBzdHJpbmcgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHJlZmVyZW5jZSB0byB0aGUgZGF0ZSByYW5nZSBVSSBidXR0b24uXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGF0ZVJhbmdlQnV0dG9uKCk6IHN0cmluZyB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgcmVmZXJlbmNlIHRvIHRoZSBuZXh0IFVJIGJ1dHRvbi5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBuZXh0QnV0dG9uKCk6IHN0cmluZyB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgcmVmZXJlbmNlIHRvIHRoZSBqUXVlcnkgY2FsZW5kYXIgVUkgY29udHJvbC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRDYWxlbmRhcigpOiBzdHJpbmcgeyByZXR1cm47IH07XG59Il19