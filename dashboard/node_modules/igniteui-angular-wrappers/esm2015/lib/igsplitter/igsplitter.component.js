/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgContentControlBase } from "../igcontrolbase/igcontentcontrolbase";
export class IgSplitterComponent extends IgContentControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    widget() { return; }
    ;
    /**
     * Expand the specified panel by index.
     *
     * @param {?} index Specifies the index of the panel to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    expandAt(index) { return; }
    ;
    /**
     * Collapse the specified panel.
     *
     * @param {?} index Specifies the index of the panel to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    collapseAt(index) { return; }
    ;
    /**
     * Retrieves the jQuery element of the first panel.
     * @return {?}
     */
    /* istanbul ignore next */
    firstPanel() { return; }
    ;
    /**
     * Retrieves the jQuery element of the second panel.
     * @return {?}
     */
    /* istanbul ignore next */
    secondPanel() { return; }
    ;
    /**
     * Refresh splitter layout, use this method to re-render the splitter if some changes to the layout are applied.
     * @return {?}
     */
    /* istanbul ignore next */
    refreshLayout() { return; }
    ;
    /**
     * You can set new size of the first panel after the splitter is rendered.
     *
     * @param {?} size Specifies the new size of the first panel.
     * @return {?}
     */
    /* istanbul ignore next */
    setFirstPanelSize(size) { return; }
    ;
    /**
     * You can set new size of the second panel after the splitter is rendered.
     *
     * @param {?} size Specifies the new size of the second panel.
     * @return {?}
     */
    /* istanbul ignore next */
    setSecondPanelSize(size) { return; }
    ;
    /**
     * Destroys the igSplitter widget
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgSplitterComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-splitter",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "orientation", "panels", "dragDelta", "resizeOtherSplitters"],
                outputs: ["collapsed", "expanded", "resizeStarted", "resizing", "resizeEnded", "layoutRefreshing", "layoutRefreshed"]
            }] }
];
/** @nocollapse */
IgSplitterComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdzcGxpdHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnc3BsaXR0ZXIvaWdzcGxpdHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBUTdFLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxvQkFBZ0M7Ozs7Ozs7O0lBQ3JFLFlBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7OztJQU81SyxNQUFNLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVM3QixRQUFRLENBQUMsS0FBYSxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7SUFTMUMsVUFBVSxDQUFDLEtBQWEsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU81QyxVQUFVLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFPakMsV0FBVyxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBT2xDLGFBQWEsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBU2xDLGlCQUFpQixDQUFDLElBQVksSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBU2xELGtCQUFrQixDQUFDLElBQVksSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU1uRCxPQUFPLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7WUE3RXRDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLENBQUM7Z0JBQ2pLLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLENBQUM7YUFDeEg7Ozs7WUFSUSxVQUFVO1lBQUUsUUFBUTtZQUFFLGVBQWU7WUFBYSxlQUFlO1lBQUUsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIsIEl0ZXJhYmxlRGlmZmVycywgQ29tcG9uZW50LCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElnQ29udGVudENvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250ZW50Y29udHJvbGJhc2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctc3BsaXR0ZXJcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLCBcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJvcmllbnRhdGlvblwiLCBcInBhbmVsc1wiLCBcImRyYWdEZWx0YVwiLCBcInJlc2l6ZU90aGVyU3BsaXR0ZXJzXCJdLFxuICAgIG91dHB1dHM6IFtcImNvbGxhcHNlZFwiLCBcImV4cGFuZGVkXCIsIFwicmVzaXplU3RhcnRlZFwiLCBcInJlc2l6aW5nXCIsIFwicmVzaXplRW5kZWRcIiwgXCJsYXlvdXRSZWZyZXNoaW5nXCIsIFwibGF5b3V0UmVmcmVzaGVkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnU3BsaXR0ZXJDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRlbnRDb250cm9sQmFzZTxJZ1NwbGl0dGVyPiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBrdmFsRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7IHN1cGVyKGVsLCByZW5kZXJlciwgZGlmZmVycywga3ZhbERpZmZlcnMsIGNkcik7IH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZWxlbWVudCB0aGF0IHJlcHJlc2VudHMgdGhpcyB3aWRnZXQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgd2lkZ2V0KCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuXG4gICAgLyoqXG4gICAgICogRXhwYW5kIHRoZSBzcGVjaWZpZWQgcGFuZWwgYnkgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXggU3BlY2lmaWVzIHRoZSBpbmRleCBvZiB0aGUgcGFuZWwgdG8gZXhwYW5kLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGV4cGFuZEF0KGluZGV4OiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZSB0aGUgc3BlY2lmaWVkIHBhbmVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4IFNwZWNpZmllcyB0aGUgaW5kZXggb2YgdGhlIHBhbmVsIHRvIGNvbGxhcHNlLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGNvbGxhcHNlQXQoaW5kZXg6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgalF1ZXJ5IGVsZW1lbnQgb2YgdGhlIGZpcnN0IHBhbmVsLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGZpcnN0UGFuZWwoKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGpRdWVyeSBlbGVtZW50IG9mIHRoZSBzZWNvbmQgcGFuZWwuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc2Vjb25kUGFuZWwoKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoIHNwbGl0dGVyIGxheW91dCwgdXNlIHRoaXMgbWV0aG9kIHRvIHJlLXJlbmRlciB0aGUgc3BsaXR0ZXIgaWYgc29tZSBjaGFuZ2VzIHRvIHRoZSBsYXlvdXQgYXJlIGFwcGxpZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgcmVmcmVzaExheW91dCgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBZb3UgY2FuIHNldCBuZXcgc2l6ZSBvZiB0aGUgZmlyc3QgcGFuZWwgYWZ0ZXIgdGhlIHNwbGl0dGVyIGlzIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpemUgU3BlY2lmaWVzIHRoZSBuZXcgc2l6ZSBvZiB0aGUgZmlyc3QgcGFuZWwuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc2V0Rmlyc3RQYW5lbFNpemUoc2l6ZTogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuXG4gICAgLyoqXG4gICAgICogWW91IGNhbiBzZXQgbmV3IHNpemUgb2YgdGhlIHNlY29uZCBwYW5lbCBhZnRlciB0aGUgc3BsaXR0ZXIgaXMgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2l6ZSBTcGVjaWZpZXMgdGhlIG5ldyBzaXplIG9mIHRoZSBzZWNvbmQgcGFuZWwuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc2V0U2Vjb25kUGFuZWxTaXplKHNpemU6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgaWdTcGxpdHRlciB3aWRnZXRcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19