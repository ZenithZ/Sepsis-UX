/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer, IterableDiffers, ElementRef, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgBulletGraphComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    getRangeNames() { return; }
    ;
    /**
     * Adds a new range to the bullet graph.
     *
     * @param {?} value     The range object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    addRange(value) { return; }
    ;
    /**
     * Removes a range from the bullet graph.
     *
     * @param {?} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     * @return {?}
     */
    /* istanbul ignore next */
    removeRange(value) { return; }
    ;
    /**
     * Updates the specified range of the bullet graph.
     *
     * @param {?} value     The range object to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    updateRange(value) { return; }
    ;
    /**
     * Returns information about how the bullet graph is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    exportVisualData() { return; }
    ;
    /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    flush() { return; }
    ;
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    styleUpdated() { return; }
    ;
}
IgBulletGraphComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-bullet-graph",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "ranges", "rangeToolTipTemplate", "valueToolTipTemplate", "targetValueToolTipTemplate", "orientation", "rangeBrushes", "rangeOutlines", "minimumValue", "maximumValue", "targetValue", "targetValueName", "value", "valueName", "rangeInnerExtent", "rangeOuterExtent", "valueInnerExtent", "valueOuterExtent", "interval", "ticksPostInitial", "ticksPreTerminal", "labelInterval", "labelExtent", "labelsPostInitial", "labelsPreTerminal", "minorTickCount", "tickStartExtent", "tickEndExtent", "tickStrokeThickness", "tickBrush", "fontBrush", "valueBrush", "valueOutline", "valueStrokeThickness", "minorTickStartExtent", "minorTickEndExtent", "minorTickStrokeThickness", "minorTickBrush", "isScaleInverted", "backingBrush", "backingOutline", "backingStrokeThickness", "backingInnerExtent", "backingOuterExtent", "scaleStartExtent", "scaleEndExtent", "targetValueBrush", "targetValueBreadth", "targetValueInnerExtent", "targetValueOuterExtent", "targetValueOutline", "targetValueStrokeThickness", "transitionDuration", "showToolTipTimeout", "showToolTip", "font", "pixelScalingRatio"],
                outputs: ["formatLabel", "alignLabel"]
            }] }
];
/** @nocollapse */
IgBulletGraphComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdidWxsZXRncmFwaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnYnVsbGV0Z3JhcGgvaWdidWxsZXRncmFwaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVMvRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsYUFBNEI7Ozs7Ozs7O0lBQ3BFLFlBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7OztJQU81SyxhQUFhLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVFsQyxRQUFRLENBQUMsS0FBYSxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7SUFRMUMsV0FBVyxDQUFDLEtBQWEsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUTdDLFdBQVcsQ0FBQyxLQUFhLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNN0MsZ0JBQWdCLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNdkMsS0FBSyxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTFCLE9BQU8sS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU01QixZQUFZLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7WUE5RDNDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQUUsNEJBQTRCLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUscUJBQXFCLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFFLG9CQUFvQixFQUFFLDBCQUEwQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxvQkFBb0IsRUFBRSw0QkFBNEIsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLG1CQUFtQixDQUFDO2dCQUNycEMsT0FBTyxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQzthQUN6Qzs7OztZQVQ4QyxVQUFVO1lBQXJDLFFBQVE7WUFBRSxlQUFlO1lBQWMsZUFBZTtZQUFFLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgUmVuZGVyZXIsIEl0ZXJhYmxlRGlmZmVycywgRWxlbWVudFJlZiwgS2V5VmFsdWVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImlnLWJ1bGxldC1ncmFwaFwiLFxuICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICBpbnB1dHM6IFtcIndpZGdldElkXCIsIFwib3B0aW9uc1wiLCBcImNoYW5nZURldGVjdGlvbkludGVydmFsXCIsIFwiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcInJhbmdlc1wiLCBcInJhbmdlVG9vbFRpcFRlbXBsYXRlXCIsIFwidmFsdWVUb29sVGlwVGVtcGxhdGVcIiwgXCJ0YXJnZXRWYWx1ZVRvb2xUaXBUZW1wbGF0ZVwiLCBcIm9yaWVudGF0aW9uXCIsIFwicmFuZ2VCcnVzaGVzXCIsIFwicmFuZ2VPdXRsaW5lc1wiLCBcIm1pbmltdW1WYWx1ZVwiLCBcIm1heGltdW1WYWx1ZVwiLCBcInRhcmdldFZhbHVlXCIsIFwidGFyZ2V0VmFsdWVOYW1lXCIsIFwidmFsdWVcIiwgXCJ2YWx1ZU5hbWVcIiwgXCJyYW5nZUlubmVyRXh0ZW50XCIsIFwicmFuZ2VPdXRlckV4dGVudFwiLCBcInZhbHVlSW5uZXJFeHRlbnRcIiwgXCJ2YWx1ZU91dGVyRXh0ZW50XCIsIFwiaW50ZXJ2YWxcIiwgXCJ0aWNrc1Bvc3RJbml0aWFsXCIsIFwidGlja3NQcmVUZXJtaW5hbFwiLCBcImxhYmVsSW50ZXJ2YWxcIiwgXCJsYWJlbEV4dGVudFwiLCBcImxhYmVsc1Bvc3RJbml0aWFsXCIsIFwibGFiZWxzUHJlVGVybWluYWxcIiwgXCJtaW5vclRpY2tDb3VudFwiLCBcInRpY2tTdGFydEV4dGVudFwiLCBcInRpY2tFbmRFeHRlbnRcIiwgXCJ0aWNrU3Ryb2tlVGhpY2tuZXNzXCIsIFwidGlja0JydXNoXCIsIFwiZm9udEJydXNoXCIsIFwidmFsdWVCcnVzaFwiLCBcInZhbHVlT3V0bGluZVwiLCBcInZhbHVlU3Ryb2tlVGhpY2tuZXNzXCIsIFwibWlub3JUaWNrU3RhcnRFeHRlbnRcIiwgXCJtaW5vclRpY2tFbmRFeHRlbnRcIiwgXCJtaW5vclRpY2tTdHJva2VUaGlja25lc3NcIiwgXCJtaW5vclRpY2tCcnVzaFwiLCBcImlzU2NhbGVJbnZlcnRlZFwiLCBcImJhY2tpbmdCcnVzaFwiLCBcImJhY2tpbmdPdXRsaW5lXCIsIFwiYmFja2luZ1N0cm9rZVRoaWNrbmVzc1wiLCBcImJhY2tpbmdJbm5lckV4dGVudFwiLCBcImJhY2tpbmdPdXRlckV4dGVudFwiLCBcInNjYWxlU3RhcnRFeHRlbnRcIiwgXCJzY2FsZUVuZEV4dGVudFwiLCBcInRhcmdldFZhbHVlQnJ1c2hcIiwgXCJ0YXJnZXRWYWx1ZUJyZWFkdGhcIiwgXCJ0YXJnZXRWYWx1ZUlubmVyRXh0ZW50XCIsIFwidGFyZ2V0VmFsdWVPdXRlckV4dGVudFwiLCBcInRhcmdldFZhbHVlT3V0bGluZVwiLCBcInRhcmdldFZhbHVlU3Ryb2tlVGhpY2tuZXNzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwic2hvd1Rvb2xUaXBUaW1lb3V0XCIsIFwic2hvd1Rvb2xUaXBcIiwgXCJmb250XCIsIFwicGl4ZWxTY2FsaW5nUmF0aW9cIl0sXG4gICAgb3V0cHV0czogW1wiZm9ybWF0TGFiZWxcIiwgXCJhbGlnbkxhYmVsXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnQnVsbGV0R3JhcGhDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnQnVsbGV0R3JhcGg+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyKTsgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIGFsbCB0aGUgcmFuZ2VzIGRlbGltaXRlZCB3aXRoIGEgXFxuIHN5bWJvbC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRSYW5nZU5hbWVzKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IHJhbmdlIHRvIHRoZSBidWxsZXQgZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgICAgIFRoZSByYW5nZSBvYmplY3QgdG8gYmUgYWRkZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgYWRkUmFuZ2UodmFsdWU6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcmFuZ2UgZnJvbSB0aGUgYnVsbGV0IGdyYXBoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlICAgICBBIEpTIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgc2V0IGFzIGZvbGxvd3M6IG5hbWU6IG5hbWVPZlRoZVJhbmdlVG9SZW1vdmUsIHJlbW92ZTogdHJ1ZVxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHJlbW92ZVJhbmdlKHZhbHVlOiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgc3BlY2lmaWVkIHJhbmdlIG9mIHRoZSBidWxsZXQgZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgICAgIFRoZSByYW5nZSBvYmplY3QgdG8gYmUgdXBkYXRlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB1cGRhdGVSYW5nZSh2YWx1ZTogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRoZSBidWxsZXQgZ3JhcGggaXMgcmVuZGVyZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZXhwb3J0VmlzdWFsRGF0YSgpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBDYXVzZXMgYWxsIHBlbmRpbmcgY2hhbmdlcyBvZiB0aGUgYnVsbGV0IGdyYXBoIGUuZy4gYnkgY2hhbmdlZCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgcmVuZGVyZWQgaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZmx1c2goKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHdpZGdldC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZS1wb2xscyB0aGUgY3NzIHN0eWxlcyBmb3IgdGhlIHdpZGdldC4gVXNlIHRoaXMgbWV0aG9kIHdoZW4gdGhlIGNzcyBzdHlsZXMgaGF2ZSBiZWVuIG1vZGlmaWVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHN0eWxlVXBkYXRlZCgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG59Il19