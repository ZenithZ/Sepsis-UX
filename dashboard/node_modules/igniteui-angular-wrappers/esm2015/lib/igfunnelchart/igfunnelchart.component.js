/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgFunnelChartComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataSource(value) {
        this._dataSource = value;
        /** @type {?} */
        const chart = jQuery(this._el).data(this._widgetName);
        if (chart) {
            jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        super.ngOnInit();
    }
    /**
     * Gets array of selected slice items.
     *
     * @param {?=} selection     Array or selected slice items.
     * @return {?} array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    selectedSliceItems(selection) { return; }
    ;
    /**
     * Gets sets array of indexes of selected slices.
     *
     * @param {?=} selection     Array or selected slice indexes.
     * @return {?} array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    selectedSliceIndexes(selection) { return; }
    ;
    /**
     * Checks if slice is selected.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    isSelected(slice) { return; }
    ;
    /**
     * Toggles selected state of slice.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    toggleSelection(slice) { return; }
    ;
    /**
     * @return {?}
     */
    exportVisualData() { return; }
    ;
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgFunnelChartComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-funnel-chart",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "bezierPoints", "legend", "valueMemberPath", "brushes", "outlines", "bottomEdgeWidth", "innerLabelMemberPath", "outerLabelMemberPath", "innerLabelVisibility", "outerLabelVisibility", "outerLabelAlignment", "funnelSliceDisplay", "formatInnerLabel", "formatOuterLabel", "transitionDuration", "isInverted", "useBezierCurve", "allowSliceSelection", "useUnselectedStyle", "selectedSliceStyle", "unselectedSliceStyle", "legendItemBadgeTemplate", "useOuterLabelsForLegend", "textStyle", "outerLabelTextStyle", "outlineThickness", "pixelScalingRatio", "outerLabelTextColor", "textColor"],
                outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip", "sliceClicked"]
            }] }
];
/** @nocollapse */
IgFunnelChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
IgFunnelChartComponent.propDecorators = {
    dataSource: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgFunnelChartComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdmdW5uZWxjaGFydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnZnVubmVsY2hhcnQvaWdmdW5uZWxjaGFydC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFRL0QsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGFBQTRCOzs7Ozs7OztJQUNwRSxZQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQixJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7OztJQUVuTCxJQUNXLFVBQVUsQ0FBQyxLQUFVO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOztjQUNuQixLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNyRCxJQUFJLEtBQUssRUFBRTtZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hGO0lBQ0wsQ0FBQztJQUFBLENBQUM7Ozs7SUFJRixRQUFRO1FBQ0osSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUM3RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNqRDtRQUNELEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7Ozs7OztJQVNNLGtCQUFrQixDQUFDLFNBQWlCLElBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7OztJQVN6RCxvQkFBb0IsQ0FBQyxTQUFpQixJQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7SUFRM0QsVUFBVSxDQUFDLEtBQWEsSUFBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUS9DLGVBQWUsQ0FBQyxLQUFhLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7O0lBQ25ELGdCQUFnQixLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTXJDLE9BQU8sS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7OztZQXJFdEMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLDBCQUEwQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxzQkFBc0IsRUFBRSxzQkFBc0IsRUFBRSxzQkFBc0IsRUFBRSxzQkFBc0IsRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsc0JBQXNCLEVBQUUseUJBQXlCLEVBQUUseUJBQXlCLEVBQUUsV0FBVyxFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLFdBQVcsQ0FBQztnQkFDenlCLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxjQUFjLENBQUM7YUFDeEY7Ozs7WUFSbUIsVUFBVTtZQUFFLFFBQVE7WUFBRSxlQUFlO1lBQUUsZUFBZTtZQUFFLGlCQUFpQjs7O3lCQVl4RixLQUFLOzs7Ozs7O0lBU04sNkNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmLCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJpZy1mdW5uZWwtY2hhcnRcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLCBcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJ0b29sdGlwVGVtcGxhdGVcIiwgXCJtYXhSZWNDb3VudFwiLCBcImRhdGFTb3VyY2VcIiwgXCJkYXRhU291cmNlVHlwZVwiLCBcImRhdGFTb3VyY2VVcmxcIiwgXCJyZXNwb25zZVRvdGFsUmVjQ291bnRLZXlcIiwgXCJyZXNwb25zZURhdGFLZXlcIiwgXCJiZXppZXJQb2ludHNcIiwgXCJsZWdlbmRcIiwgXCJ2YWx1ZU1lbWJlclBhdGhcIiwgXCJicnVzaGVzXCIsIFwib3V0bGluZXNcIiwgXCJib3R0b21FZGdlV2lkdGhcIiwgXCJpbm5lckxhYmVsTWVtYmVyUGF0aFwiLCBcIm91dGVyTGFiZWxNZW1iZXJQYXRoXCIsIFwiaW5uZXJMYWJlbFZpc2liaWxpdHlcIiwgXCJvdXRlckxhYmVsVmlzaWJpbGl0eVwiLCBcIm91dGVyTGFiZWxBbGlnbm1lbnRcIiwgXCJmdW5uZWxTbGljZURpc3BsYXlcIiwgXCJmb3JtYXRJbm5lckxhYmVsXCIsIFwiZm9ybWF0T3V0ZXJMYWJlbFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcImlzSW52ZXJ0ZWRcIiwgXCJ1c2VCZXppZXJDdXJ2ZVwiLCBcImFsbG93U2xpY2VTZWxlY3Rpb25cIiwgXCJ1c2VVbnNlbGVjdGVkU3R5bGVcIiwgXCJzZWxlY3RlZFNsaWNlU3R5bGVcIiwgXCJ1bnNlbGVjdGVkU2xpY2VTdHlsZVwiLCBcImxlZ2VuZEl0ZW1CYWRnZVRlbXBsYXRlXCIsIFwidXNlT3V0ZXJMYWJlbHNGb3JMZWdlbmRcIiwgXCJ0ZXh0U3R5bGVcIiwgXCJvdXRlckxhYmVsVGV4dFN0eWxlXCIsIFwib3V0bGluZVRoaWNrbmVzc1wiLCBcInBpeGVsU2NhbGluZ1JhdGlvXCIsIFwib3V0ZXJMYWJlbFRleHRDb2xvclwiLCBcInRleHRDb2xvclwiXSxcbiAgICBvdXRwdXRzOiBbXCJkYXRhQmluZGluZ1wiLCBcImRhdGFCb3VuZFwiLCBcInVwZGF0ZVRvb2x0aXBcIiwgXCJoaWRlVG9vbHRpcFwiLCBcInNsaWNlQ2xpY2tlZFwiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ0Z1bm5lbENoYXJ0Q29tcG9uZW50IGV4dGVuZHMgSWdDb250cm9sQmFzZTxJZ0Z1bm5lbENoYXJ0PiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBrdmFsRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7IHN1cGVyKGVsLCByZW5kZXJlciwgZGlmZmVycywga3ZhbERpZmZlcnMsIGNkcik7IH1cblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCBkYXRhU291cmNlKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IHZhbHVlO1xuICAgICAgICBjb25zdCBjaGFydCA9IGpRdWVyeSh0aGlzLl9lbCkuZGF0YSh0aGlzLl93aWRnZXROYW1lKTtcbiAgICAgICAgaWYgKGNoYXJ0KSB7XG4gICAgICAgICAgICBqUXVlcnkodGhpcy5fZWwpW3RoaXMuX3dpZGdldE5hbWVdKFwib3B0aW9uXCIsIFwiZGF0YVNvdXJjZVwiLCB0aGlzLl9kYXRhU291cmNlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIF9kYXRhU291cmNlOiBhbnk7XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGFTb3VyY2UgPT09IG51bGwgfHwgdGhpcy5fZGF0YVNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlID0gdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9uc1tcImRhdGFTb3VyY2VcIl0gJiYgdGhpcy5fZGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXSA9IHRoaXMuX2RhdGFTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFycmF5IG9mIHNlbGVjdGVkIHNsaWNlIGl0ZW1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlbGVjdGlvbiAgICAgQXJyYXkgb3Igc2VsZWN0ZWQgc2xpY2UgaXRlbXMuXG4gICAgICogQHJldHVybiBhcnJheXxvYmplY3QgICAgIElmIHBhcmFtZXRlciBpcyB1bmRlZmluZWQsIHRoZW4gYXJyYXkgb2Ygc2VsZWN0ZWQgaXRlbXMgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSwgaXQgcmV0dXJucyByZWZlcmVuY2UgdG8gaWdGdW5uZWxDaGFydC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzZWxlY3RlZFNsaWNlSXRlbXMoc2VsZWN0aW9uPzogYW55W10pOiBhbnlbXSB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgc2V0cyBhcnJheSBvZiBpbmRleGVzIG9mIHNlbGVjdGVkIHNsaWNlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZWxlY3Rpb24gICAgIEFycmF5IG9yIHNlbGVjdGVkIHNsaWNlIGluZGV4ZXMuXG4gICAgICogQHJldHVybiBhcnJheXxvYmplY3QgICAgIElmIHBhcmFtZXRlciBpcyB1bmRlZmluZWQsIHRoZW4gYXJyYXkgb2Ygc2VsZWN0ZWQgaW5kZXhlcyBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlLCBpdCByZXR1cm5zIHJlZmVyZW5jZSB0byBpZ0Z1bm5lbENoYXJ0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHNlbGVjdGVkU2xpY2VJbmRleGVzKHNlbGVjdGlvbj86IGFueVtdKTogYW55W10geyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgc2xpY2UgaXMgc2VsZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2xpY2UgICAgIEluZGV4IG9mIHNsaWNlIG9yIHJlZmVyZW5jZSB0byBzbGljZS1kYXRhLWl0ZW0uXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgaXNTZWxlY3RlZChzbGljZTogT2JqZWN0KTogYm9vbGVhbiB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgc2VsZWN0ZWQgc3RhdGUgb2Ygc2xpY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2xpY2UgICAgIEluZGV4IG9mIHNsaWNlIG9yIHJlZmVyZW5jZSB0byBzbGljZS1kYXRhLWl0ZW0uXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdG9nZ2xlU2VsZWN0aW9uKHNsaWNlOiBPYmplY3QpOiBPYmplY3QgeyByZXR1cm47IH07XG4gICAgcHVibGljIGV4cG9ydFZpc3VhbERhdGEoKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHdpZGdldC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19