/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgSparklineComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataSource(value) {
        this._dataSource = value;
        /** @type {?} */
        const widget = jQuery(this._el).data(this._widgetName);
        if (widget) {
            jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        super.ngOnInit();
    }
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    destroy() { return; }
    ;
}
IgSparklineComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-sparkline",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "brush", "negativeBrush", "markerBrush", "negativeMarkerBrush", "firstMarkerBrush", "lastMarkerBrush", "highMarkerBrush", "lowMarkerBrush", "trendLineBrush", "horizontalAxisBrush", "verticalAxisBrush", "normalRangeFill", "horizontalAxisVisibility", "verticalAxisVisibility", "markerVisibility", "negativeMarkerVisibility", "firstMarkerVisibility", "lastMarkerVisibility", "lowMarkerVisibility", "highMarkerVisibility", "normalRangeVisibility", "displayNormalRangeInFront", "markerSize", "firstMarkerSize", "lastMarkerSize", "highMarkerSize", "lowMarkerSize", "negativeMarkerSize", "lineThickness", "valueMemberPath", "labelMemberPath", "trendLineType", "trendLinePeriod", "trendLineThickness", "normalRangeMinimum", "normalRangeMaximum", "displayType", "unknownValuePlotting", "verticalAxisLabel", "horizontalAxisLabel", "formatLabel", "pixelScalingRatio"],
                outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip"]
            }] }
];
/** @nocollapse */
IgSparklineComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
IgSparklineComponent.propDecorators = {
    dataSource: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgSparklineComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdzcGFya2xpbmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ3NwYXJrbGluZS9pZ3NwYXJrbGluZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFRL0QsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGFBQTBCOzs7Ozs7OztJQUNoRSxZQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtRQUMxSCxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBRUQsSUFDVyxVQUFVLENBQUMsS0FBVTtRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQzs7Y0FDbkIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDdEQsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNoRjtJQUNMLENBQUM7SUFBQSxDQUFDOzs7O0lBSUYsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDakQ7UUFDRCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFHTSxPQUFPLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQyxDQUFDOzs7WUFqQ3ZDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsaUJBQWlCLEVBQUMsYUFBYSxFQUFDLFlBQVksRUFBQyxnQkFBZ0IsRUFBQyxlQUFlLEVBQUMsMEJBQTBCLEVBQUMsaUJBQWlCLEVBQUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxhQUFhLEVBQUMscUJBQXFCLEVBQUMsa0JBQWtCLEVBQUMsaUJBQWlCLEVBQUMsaUJBQWlCLEVBQUMsZ0JBQWdCLEVBQUMsZ0JBQWdCLEVBQUMscUJBQXFCLEVBQUMsbUJBQW1CLEVBQUMsaUJBQWlCLEVBQUMsMEJBQTBCLEVBQUMsd0JBQXdCLEVBQUMsa0JBQWtCLEVBQUMsMEJBQTBCLEVBQUMsdUJBQXVCLEVBQUMsc0JBQXNCLEVBQUMscUJBQXFCLEVBQUMsc0JBQXNCLEVBQUMsdUJBQXVCLEVBQUMsMkJBQTJCLEVBQUMsWUFBWSxFQUFDLGlCQUFpQixFQUFDLGdCQUFnQixFQUFDLGdCQUFnQixFQUFDLGVBQWUsRUFBQyxvQkFBb0IsRUFBQyxlQUFlLEVBQUMsaUJBQWlCLEVBQUMsaUJBQWlCLEVBQUMsZUFBZSxFQUFDLGlCQUFpQixFQUFDLG9CQUFvQixFQUFDLG9CQUFvQixFQUFDLG9CQUFvQixFQUFDLGFBQWEsRUFBQyxzQkFBc0IsRUFBQyxtQkFBbUIsRUFBQyxxQkFBcUIsRUFBQyxhQUFhLEVBQUMsbUJBQW1CLENBQUM7Z0JBQ3pnQyxPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUMsV0FBVyxFQUFDLGVBQWUsRUFBQyxhQUFhLENBQUM7YUFDckU7Ozs7WUFSbUIsVUFBVTtZQUFFLFFBQVE7WUFBRSxlQUFlO1lBQUUsZUFBZTtZQUFFLGlCQUFpQjs7O3lCQWN4RixLQUFLOzs7Ozs7O0lBU04sMkNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmLCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJpZy1zcGFya2xpbmVcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLFwiZGlzYWJsZWRcIixcImNyZWF0ZVwiLFwid2lkdGhcIixcImhlaWdodFwiLFwidG9vbHRpcFRlbXBsYXRlXCIsXCJtYXhSZWNDb3VudFwiLFwiZGF0YVNvdXJjZVwiLFwiZGF0YVNvdXJjZVR5cGVcIixcImRhdGFTb3VyY2VVcmxcIixcInJlc3BvbnNlVG90YWxSZWNDb3VudEtleVwiLFwicmVzcG9uc2VEYXRhS2V5XCIsXCJicnVzaFwiLFwibmVnYXRpdmVCcnVzaFwiLFwibWFya2VyQnJ1c2hcIixcIm5lZ2F0aXZlTWFya2VyQnJ1c2hcIixcImZpcnN0TWFya2VyQnJ1c2hcIixcImxhc3RNYXJrZXJCcnVzaFwiLFwiaGlnaE1hcmtlckJydXNoXCIsXCJsb3dNYXJrZXJCcnVzaFwiLFwidHJlbmRMaW5lQnJ1c2hcIixcImhvcml6b250YWxBeGlzQnJ1c2hcIixcInZlcnRpY2FsQXhpc0JydXNoXCIsXCJub3JtYWxSYW5nZUZpbGxcIixcImhvcml6b250YWxBeGlzVmlzaWJpbGl0eVwiLFwidmVydGljYWxBeGlzVmlzaWJpbGl0eVwiLFwibWFya2VyVmlzaWJpbGl0eVwiLFwibmVnYXRpdmVNYXJrZXJWaXNpYmlsaXR5XCIsXCJmaXJzdE1hcmtlclZpc2liaWxpdHlcIixcImxhc3RNYXJrZXJWaXNpYmlsaXR5XCIsXCJsb3dNYXJrZXJWaXNpYmlsaXR5XCIsXCJoaWdoTWFya2VyVmlzaWJpbGl0eVwiLFwibm9ybWFsUmFuZ2VWaXNpYmlsaXR5XCIsXCJkaXNwbGF5Tm9ybWFsUmFuZ2VJbkZyb250XCIsXCJtYXJrZXJTaXplXCIsXCJmaXJzdE1hcmtlclNpemVcIixcImxhc3RNYXJrZXJTaXplXCIsXCJoaWdoTWFya2VyU2l6ZVwiLFwibG93TWFya2VyU2l6ZVwiLFwibmVnYXRpdmVNYXJrZXJTaXplXCIsXCJsaW5lVGhpY2tuZXNzXCIsXCJ2YWx1ZU1lbWJlclBhdGhcIixcImxhYmVsTWVtYmVyUGF0aFwiLFwidHJlbmRMaW5lVHlwZVwiLFwidHJlbmRMaW5lUGVyaW9kXCIsXCJ0cmVuZExpbmVUaGlja25lc3NcIixcIm5vcm1hbFJhbmdlTWluaW11bVwiLFwibm9ybWFsUmFuZ2VNYXhpbXVtXCIsXCJkaXNwbGF5VHlwZVwiLFwidW5rbm93blZhbHVlUGxvdHRpbmdcIixcInZlcnRpY2FsQXhpc0xhYmVsXCIsXCJob3Jpem9udGFsQXhpc0xhYmVsXCIsXCJmb3JtYXRMYWJlbFwiLFwicGl4ZWxTY2FsaW5nUmF0aW9cIl0sXG4gICAgb3V0cHV0czogW1wiZGF0YUJpbmRpbmdcIixcImRhdGFCb3VuZFwiLFwidXBkYXRlVG9vbHRpcFwiLFwiaGlkZVRvb2x0aXBcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdTcGFya2xpbmVDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnU3BhcmtsaW5lPiB7IFxuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBcbiAgICAgICAgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBzZXQgZGF0YVNvdXJjZSh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSB2YWx1ZTtcbiAgICAgICAgY29uc3Qgd2lkZ2V0ID0galF1ZXJ5KHRoaXMuX2VsKS5kYXRhKHRoaXMuX3dpZGdldE5hbWUpO1xuICAgICAgICBpZiAod2lkZ2V0KSB7XG4gICAgICAgICAgICBqUXVlcnkodGhpcy5fZWwpW3RoaXMuX3dpZGdldE5hbWVdKFwib3B0aW9uXCIsIFwiZGF0YVNvdXJjZVwiLCB0aGlzLl9kYXRhU291cmNlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIF9kYXRhU291cmNlOiBhbnk7XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGFTb3VyY2UgPT09IG51bGwgfHwgdGhpcy5fZGF0YVNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlID0gdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9uc1tcImRhdGFTb3VyY2VcIl0gJiYgdGhpcy5fZGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXSA9IHRoaXMuX2RhdGFTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH0gO1xufSJdfQ==