/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
//TODO: change the model from any to IgNotifier when added to igniteui typescript definitions
export class IgNotifierComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) { super(el, renderer, differs, kvalDiffers, cdr); }
    /**
     * @return {?}
     */
    option() { return; }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        var elem = jQuery(document).find("#" + this.widgetId);
        if (elem.length === 1) {
            this._el = elem;
            this._events = new Map();
            //events binding
            /** @type {?} */
            let that = this;
            /** @type {?} */
            var evtName;
            for (var propt in jQuery.ui[this._widgetName].prototype.events) {
                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
                this._events[evtName] = propt;
                jQuery(this._el).on(evtName, (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that[that._events[evt.type]].emit({ event: evt, ui: ui });
                }));
            }
            jQuery(this._el)[this._widgetName](this.options);
        }
        else {
            super.ngOnInit();
        }
    }
    /**
     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
     *
     * @param {?} state    The state to show notification for.
     * @param {?=} message    Optional message to show, overrides defaults.
     * @return {?}
     */
    /* istanbul ignore next */
    notify(state, message) { return; }
    ;
    /**
     * Returns true if the notification is currently visible
     * @return {?}
     */
    /* istanbul ignore next */
    isVisible() { return; }
    ;
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgNotifierComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-notifier",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "closeOnBlur", "direction", "position", "width", "height", "minWidth", "maxWidth", "maxHeight", "animationDuration", "contentTemplate", "selectors", "headerTemplate", "showOn", "containment", "appendTo", "state", "notifyLevel", "mode", "allowCSSOnTarget", "messages", "showIcon", "animationSlideDistance"],
                outputs: ["showing", "shown", "hiding", "hidden"]
            }] }
];
/** @nocollapse */
IgNotifierComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdub3RpZmllci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnbm90aWZpZXIvaWdub3RpZmllci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVUvRCw2RkFBNkY7QUFDN0YsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGFBQXlCOzs7Ozs7OztJQUM5RCxZQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQixJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7O0lBQVEsTUFBTSxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7OztJQUd0TixRQUFROztZQUNBLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3JELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7WUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQzs7O2dCQUVyQyxJQUFJLEdBQUcsSUFBSTs7Z0JBQ1gsT0FBTztZQUNYLEtBQUssSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDNUQsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUMvRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTzs7Ozs7Z0JBQUUsVUFBVSxHQUFHLEVBQUUsRUFBRTtvQkFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDOUQsQ0FBQyxFQUFDLENBQUM7YUFDTjtZQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0gsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3BCO0lBQ0wsQ0FBQzs7Ozs7Ozs7O0lBU00sTUFBTSxDQUFDLEtBQWEsRUFBRSxPQUFnQixJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTFELFNBQVMsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU05QixPQUFPLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7WUFwRHRDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsd0JBQXdCLENBQUM7Z0JBQ2xZLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQzthQUNwRDs7OztZQVZtQixVQUFVO1lBQUUsUUFBUTtZQUFFLGVBQWU7WUFBRSxlQUFlO1lBQUUsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElnQ29udHJvbEJhc2UgfSBmcm9tIFwiLi4vaWdjb250cm9sYmFzZS9pZ2NvbnRyb2xiYXNlXCI7XG5cbmRlY2xhcmUgdmFyIGpRdWVyeTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctbm90aWZpZXJcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLCBcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwiY2xvc2VPbkJsdXJcIiwgXCJkaXJlY3Rpb25cIiwgXCJwb3NpdGlvblwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwibWluV2lkdGhcIiwgXCJtYXhXaWR0aFwiLCBcIm1heEhlaWdodFwiLCBcImFuaW1hdGlvbkR1cmF0aW9uXCIsIFwiY29udGVudFRlbXBsYXRlXCIsIFwic2VsZWN0b3JzXCIsIFwiaGVhZGVyVGVtcGxhdGVcIiwgXCJzaG93T25cIiwgXCJjb250YWlubWVudFwiLCBcImFwcGVuZFRvXCIsIFwic3RhdGVcIiwgXCJub3RpZnlMZXZlbFwiLCBcIm1vZGVcIiwgXCJhbGxvd0NTU09uVGFyZ2V0XCIsIFwibWVzc2FnZXNcIiwgXCJzaG93SWNvblwiLCBcImFuaW1hdGlvblNsaWRlRGlzdGFuY2VcIl0sXG4gICAgb3V0cHV0czogW1wic2hvd2luZ1wiLCBcInNob3duXCIsIFwiaGlkaW5nXCIsIFwiaGlkZGVuXCJdXG59KVxuLy9UT0RPOiBjaGFuZ2UgdGhlIG1vZGVsIGZyb20gYW55IHRvIElnTm90aWZpZXIgd2hlbiBhZGRlZCB0byBpZ25pdGV1aSB0eXBlc2NyaXB0IGRlZmluaXRpb25zXG5leHBvcnQgY2xhc3MgSWdOb3RpZmllckNvbXBvbmVudCBleHRlbmRzIElnQ29udHJvbEJhc2U8SWdOb3RpZmllcj4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpOyB9IHB1YmxpYyBvcHRpb24oKTogdm9pZCB7IHJldHVybjsgfTtcblxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHZhciBlbGVtID0galF1ZXJ5KGRvY3VtZW50KS5maW5kKFwiI1wiICsgdGhpcy53aWRnZXRJZCk7XG4gICAgICAgIGlmIChlbGVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5fZWwgPSBlbGVtO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgICAgICAgICAgIC8vZXZlbnRzIGJpbmRpbmdcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBldnROYW1lO1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcHQgaW4galF1ZXJ5LnVpW3RoaXMuX3dpZGdldE5hbWVdLnByb3RvdHlwZS5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICBldnROYW1lID0gdGhpcy5fd2lkZ2V0TmFtZS50b0xvd2VyQ2FzZSgpICsgcHJvcHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZ0TmFtZV0gPSBwcm9wdDtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGhpcy5fZWwpLm9uKGV2dE5hbWUsIGZ1bmN0aW9uIChldnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXRbdGhhdC5fZXZlbnRzW2V2dC50eXBlXV0uZW1pdCh7IGV2ZW50OiBldnQsIHVpOiB1aSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgalF1ZXJ5KHRoaXMuX2VsKVt0aGlzLl93aWRnZXROYW1lXSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIGEgbm90aWZpY2F0aW9uIHdpdGggYSBjZXJ0YWluIHN0YXRlIGFuZCBvcHRpb25hbCBtZXNzYWdlLiBUaGUgW25vdGlmeUxldmVsXSh1aS5pZ25vdGlmaWVyI29wdGlvbnM6bm90aWZ5TGV2ZWwpIG9wdGlvbiBkZXRlcm1pbmVzIGlmIHRoZSBub3RpZmljYXRpb24gd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhdGUgICAgVGhlIHN0YXRlIHRvIHNob3cgbm90aWZpY2F0aW9uIGZvci5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAgICBPcHRpb25hbCBtZXNzYWdlIHRvIHNob3csIG92ZXJyaWRlcyBkZWZhdWx0cy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBub3RpZnkoc3RhdGU6IE9iamVjdCwgbWVzc2FnZT86IHN0cmluZyk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG5vdGlmaWNhdGlvbiBpcyBjdXJyZW50bHkgdmlzaWJsZVxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGlzVmlzaWJsZSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHdpZGdldC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19