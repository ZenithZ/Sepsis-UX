/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export class IgSpreadsheetComponent extends IgControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
    }
    /**
     * Returns an object that represents the pane with the focus.
     * @return {?}
     */
    /* istanbul ignore next */
    getActivePane() { return; }
    ;
    /**
     * Returns an object that represents the current selection of the active pane.
     * @return {?}
     */
    /* istanbul ignore next */
    getActiveSelection() { return; }
    ;
    /**
     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
     * 				Any changes made to this object will affect all the objects in the selection. So for example, the
     * 				Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
     * 				cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
     * 				affected by the selection will have their Font.Name updated to that value.
     * @return {?}
     */
    /* istanbul ignore next */
    getActiveSelectionCellRangeFormat() { return; }
    ;
    /**
     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
     * @return {?}
     */
    /* istanbul ignore next */
    getIsRenamingWorksheet() { return; }
    ;
    /**
     * Returns an array of the panes for the activeWorksheet.
     *
     * 				 returnType="ig.spreadsheet.SpreadsheetPane[]"
     * @return {?}
     */
    /* istanbul ignore next */
    getPanes() { return; }
    ;
    /**
     * Executes the action associated with the specified id.
     *
     * @param {?} action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
     * @return {?}
     */
    /* istanbul ignore next */
    executeAction(action) { return; }
    ;
    /**
     * Forces any pending deferred work to render on the spreadsheet before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    flush() { return; }
    ;
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
    /**
     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    styleUpdated() { return; }
    ;
}
IgSpreadsheetComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-spreadsheet",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "activeCell", "isScrollLocked", "activeWorksheet", "allowAddWorksheet", "allowDeleteWorksheet", "areGridlinesVisible", "areHeadersVisible", "enterKeyNavigationDirection", "isEnterKeyNavigationEnabled", "isFormulaBarVisible", "isInEndMode", "isUndoEnabled", "nameBoxWidth", "selectionMode", "selectedWorksheets", "validationInputMessagePosition", "workbook", "zoomLevel"],
                outputs: ["actionExecuted", "actionExecuting", "activeCellChanged", "activePaneChanged", "activeWorksheetChanged", "editRangePasswordNeeded", "hyperlinkExecuting", "selectionChanged", "userPromptDisplaying", "workbookDirtied"]
            }] }
];
/** @nocollapse */
IgSpreadsheetComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdzcHJlYWRzaGVldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnc3ByZWFkc2hlZXQvaWdzcHJlYWRzaGVldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVEvRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsYUFBNEI7Ozs7Ozs7O0lBQ3BFLFlBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCO1FBQzFILEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7O0lBS00sYUFBYSxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTXBDLGtCQUFrQixLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7OztJQVV6QyxpQ0FBaUMsS0FBYSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU14RCxzQkFBc0IsS0FBYyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUTlDLFFBQVEsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7Ozs7O0lBUTdCLGFBQWEsQ0FBQyxNQUFjLElBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNbkQsS0FBSyxLQUFXLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTFCLE9BQU8sS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU01QixZQUFZLEtBQVcsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7WUF0RTNDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsNkJBQTZCLEVBQUUsNkJBQTZCLEVBQUUscUJBQXFCLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLG9CQUFvQixFQUFFLGdDQUFnQyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUM7Z0JBQ3RkLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLHdCQUF3QixFQUFFLHlCQUF5QixFQUFFLG9CQUFvQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLGlCQUFpQixDQUFDO2FBQ3JPOzs7O1lBUm1CLFVBQVU7WUFBRSxRQUFRO1lBQUUsZUFBZTtZQUFFLGVBQWU7WUFBRSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udHJvbGJhc2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctc3ByZWFkc2hlZXRcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLCBcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJhY3RpdmVDZWxsXCIsIFwiaXNTY3JvbGxMb2NrZWRcIiwgXCJhY3RpdmVXb3Jrc2hlZXRcIiwgXCJhbGxvd0FkZFdvcmtzaGVldFwiLCBcImFsbG93RGVsZXRlV29ya3NoZWV0XCIsIFwiYXJlR3JpZGxpbmVzVmlzaWJsZVwiLCBcImFyZUhlYWRlcnNWaXNpYmxlXCIsIFwiZW50ZXJLZXlOYXZpZ2F0aW9uRGlyZWN0aW9uXCIsIFwiaXNFbnRlcktleU5hdmlnYXRpb25FbmFibGVkXCIsIFwiaXNGb3JtdWxhQmFyVmlzaWJsZVwiLCBcImlzSW5FbmRNb2RlXCIsIFwiaXNVbmRvRW5hYmxlZFwiLCBcIm5hbWVCb3hXaWR0aFwiLCBcInNlbGVjdGlvbk1vZGVcIiwgXCJzZWxlY3RlZFdvcmtzaGVldHNcIiwgXCJ2YWxpZGF0aW9uSW5wdXRNZXNzYWdlUG9zaXRpb25cIiwgXCJ3b3JrYm9va1wiLCBcInpvb21MZXZlbFwiXSxcbiAgICBvdXRwdXRzOiBbXCJhY3Rpb25FeGVjdXRlZFwiLCBcImFjdGlvbkV4ZWN1dGluZ1wiLCBcImFjdGl2ZUNlbGxDaGFuZ2VkXCIsIFwiYWN0aXZlUGFuZUNoYW5nZWRcIiwgXCJhY3RpdmVXb3Jrc2hlZXRDaGFuZ2VkXCIsIFwiZWRpdFJhbmdlUGFzc3dvcmROZWVkZWRcIiwgXCJoeXBlcmxpbmtFeGVjdXRpbmdcIiwgXCJzZWxlY3Rpb25DaGFuZ2VkXCIsIFwidXNlclByb21wdERpc3BsYXlpbmdcIiwgXCJ3b3JrYm9va0RpcnRpZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdTcHJlYWRzaGVldENvbXBvbmVudCBleHRlbmRzIElnQ29udHJvbEJhc2U8SWdTcHJlYWRzaGVldD4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHBhbmUgd2l0aCB0aGUgZm9jdXMuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0QWN0aXZlUGFuZSgpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIG9mIHRoZSBhY3RpdmUgcGFuZS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRBY3RpdmVTZWxlY3Rpb24oKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgdXNlZCB0byBnZXQgdGhlIGZvcm1hdHRpbmcgb2YgdGhlIGFjdGl2ZUNlbGwgYW5kIHdoZXJlIG1vZGlmaWNhdGlvbnMgYXJlIGFwcGxpZWQgdG8gdGhlIGVudGlyZSBhY3RpdmUgc2VsZWN0aW9uLlxuICAgICAqXHRcdFx0XHRBbnkgY2hhbmdlcyBtYWRlIHRvIHRoaXMgb2JqZWN0IHdpbGwgYWZmZWN0IGFsbCB0aGUgb2JqZWN0cyBpbiB0aGUgc2VsZWN0aW9uLiBTbyBmb3IgZXhhbXBsZSwgdGhlIFxuICAgICpcdFx0XHRcdEZvbnQuTmFtZSBtYXkgcmV0dXJuIFwiQXJpYWxcIiBiZWNhdXNlIHRoZSBhY3RpdmUgY2VsbCBoYXMgdGhhdCBhcyBpdHMgcmVzb2x2ZWQgZm9udCBuYW1lIGV2ZW4gdGhvdWdoIHRoZSBvdGhlciBcbiAgICAqXHRcdFx0XHRjZWxscyBhcmUgdXNpbmcgYSBkaWZmZXJlbnQgZm9udCBidXQgaWYgeW91IHNldCB0aGUgRm9udC5OYW1lIG9mIHRoaXMgb2JqZWN0IHRvIFwiQXJpYWxcIiB0aGVuIGFsbCB0aGUgb2JqZWN0cyBcbiAgICAqXHRcdFx0XHRhZmZlY3RlZCBieSB0aGUgc2VsZWN0aW9uIHdpbGwgaGF2ZSB0aGVpciBGb250Lk5hbWUgdXBkYXRlZCB0byB0aGF0IHZhbHVlLlxuICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0QWN0aXZlU2VsZWN0aW9uQ2VsbFJhbmdlRm9ybWF0KCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHVzZXIgaXMgY3VycmVudGx5IGVkaXRpbmcgdGhlIG5hbWUgb2YgdGhlIGFjdGl2ZSB3b3Jrc2hlZXQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0SXNSZW5hbWluZ1dvcmtzaGVldCgpOiBib29sZWFuIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcGFuZXMgZm9yIHRoZSBhY3RpdmVXb3Jrc2hlZXQuXG4gICAgICpcdFx0XHQgXG4gICAgKlx0XHRcdFx0IHJldHVyblR5cGU9XCJpZy5zcHJlYWRzaGVldC5TcHJlYWRzaGVldFBhbmVbXVwiXG4gICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRQYW5lcygpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGFjdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBpZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb24gQW4gW2VudW1lcmF0aW9uXShpZy5zcHJlYWRzaGVldC5TcHJlYWRzaGVldEFjdGlvbikgb3Igc3RyaW5nIHRoYXQgaWRlbnRpZmllcyB0aGUgYWN0aW9uIHRvIGV4ZWN1dGUuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZXhlY3V0ZUFjdGlvbihhY3Rpb246IE9iamVjdCk6IGJvb2xlYW4geyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgYW55IHBlbmRpbmcgZGVmZXJyZWQgd29yayB0byByZW5kZXIgb24gdGhlIHNwcmVhZHNoZWV0IGJlZm9yZSBjb250aW51aW5nXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZmx1c2goKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSB3aWRnZXQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogTm90aWZ5IHRoZSBzcHJlYWRzaGVldCB0aGF0IHN0eWxlIGluZm9ybWF0aW9uIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgc3ByZWFkc2hlZXQgbWF5IGhhdmUgYmVlbiB1cGRhdGVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHN0eWxlVXBkYXRlZCgpOiB2b2lkIHsgcmV0dXJuOyB9O1xufSJdfQ==