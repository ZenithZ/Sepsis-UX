/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgContentControlBase } from "../igcontrolbase/igcontentcontrolbase";
export class IgTileManagerComponent extends IgContentControlBase {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} differs
     * @param {?} kvalDiffers
     * @param {?} cdr
     */
    constructor(el, renderer, differs, kvalDiffers, cdr) {
        super(el, renderer, differs, kvalDiffers, cdr);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dataSource(value) {
        this._dataSource = value;
        /** @type {?} */
        const widget = jQuery(this._el).data(this._widgetName);
        if (widget) {
            jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        super.ngOnInit();
    }
    /**
     * Maximizes a given tile.
     *
     * @param {?} $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param {?=} animDuration Specifies the animation duration for this maximizing.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    maximize($tileToMaximize, animDuration, event) { return; }
    ;
    /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param {?=} animDuration Specifies the animation duration for this minimize.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    minimize(animDuration, event) { return; }
    ;
    /**
     * Returns the maximized tile or null if such is not present.
     * @return {?} object|null Returns the maximized tile or null if such is not present.
     */
    /* istanbul ignore next */
    maximizedTile() { return; }
    ;
    /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * @return {?} object|null Returns an array with the tiles in minimized state or null if such are not present.
     */
    /* istanbul ignore next */
    minimizedTiles() { return; }
    ;
    /**
     * Returns the splitter associated with this tile manager or
     *                 null if the tile manager was instantiated with maximizedTileIndex.
     * @return {?} object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
     */
    /* istanbul ignore next */
    splitter() { return; }
    ;
    /**
     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
     * @return {?}
     */
    /* istanbul ignore next */
    layoutManager() { return; }
    ;
    /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    reflow(forceReflow, animationDuration, event) { return; }
    ;
    /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    widget() { return; }
    ;
    /**
     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
     * @return {?}
     */
    /* istanbul ignore next */
    dataBind() { return; }
    ;
    /**
     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    destroy() { return; }
    ;
}
IgTileManagerComponent.decorators = [
    { type: Component, args: [{
                selector: "ig-tile-manager",
                template: "<ng-content></ng-content>",
                inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "columnWidth", "columnHeight", "cols", "rows", "marginLeft", "marginTop", "rearrangeItems", "items", "dataSource", "minimizedState", "maximizedState", "maximizedTileIndex", "rightPanelCols", "rightPanelTilesWidth", "rightPanelTilesHeight", "showRightPanelScroll", "splitterOptions", "preventMaximizingSelector", "animationDuration", "dataSourceUrl", "responseDataKey", "responseDataType", "dataSourceType", "requestType", "responseContentType"],
                outputs: ["dataBinding", "dataBound", "rendering", "rendered", "tileRendering", "tileRendered", "tileMaximizing", "tileMaximized", "tileMinimizing", "tileMinimized"]
            }] }
];
/** @nocollapse */
IgTileManagerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer },
    { type: IterableDiffers },
    { type: KeyValueDiffers },
    { type: ChangeDetectorRef }
];
IgTileManagerComponent.propDecorators = {
    dataSource: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgTileManagerComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWd0aWxlbWFuYWdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lndGlsZW1hbmFnZXIvaWd0aWxlbWFuYWdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQVE3RSxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsb0JBQW1DOzs7Ozs7OztJQUMzRSxZQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtRQUMxSCxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBRUQsSUFDVyxVQUFVLENBQUMsS0FBVTtRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQzs7Y0FDbkIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDdEQsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNoRjtJQUNMLENBQUM7SUFBQSxDQUFDOzs7O0lBSUYsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDakQ7UUFDRCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7Ozs7OztJQVVNLFFBQVEsQ0FBQyxlQUF1QixFQUFFLFlBQXFCLEVBQUUsS0FBYyxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7O0lBUzNGLFFBQVEsQ0FBQyxZQUFxQixFQUFFLEtBQWMsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU9sRSxhQUFhLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFPcEMsY0FBYyxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7OztJQVFyQyxRQUFRLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNL0IsYUFBYSxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7Ozs7OztJQVVwQyxNQUFNLENBQUMsV0FBb0IsRUFBRSxpQkFBMEIsRUFBRSxLQUFjLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7Ozs7SUFNM0YsTUFBTSxLQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBTTdCLFFBQVEsS0FBVyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7Ozs7OztJQU03QixPQUFPLEtBQWEsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOzs7WUF6R3hDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLHNCQUFzQixFQUFFLGlCQUFpQixFQUFFLDJCQUEyQixFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUscUJBQXFCLENBQUM7Z0JBQ2hpQixPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDO2FBQ3hLOzs7O1lBUlEsVUFBVTtZQUFFLFFBQVE7WUFBRSxlQUFlO1lBQWEsZUFBZTtZQUFFLGlCQUFpQjs7O3lCQWN4RixLQUFLOzs7Ozs7O0lBU04sNkNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIsIEl0ZXJhYmxlRGlmZmVycywgQ29tcG9uZW50LCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmLCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRlbnRDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udGVudGNvbnRyb2xiYXNlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImlnLXRpbGUtbWFuYWdlclwiLFxuICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICBpbnB1dHM6IFtcIndpZGdldElkXCIsIFwib3B0aW9uc1wiLCBcImNoYW5nZURldGVjdGlvbkludGVydmFsXCIsIFwiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcImNvbHVtbldpZHRoXCIsIFwiY29sdW1uSGVpZ2h0XCIsIFwiY29sc1wiLCBcInJvd3NcIiwgXCJtYXJnaW5MZWZ0XCIsIFwibWFyZ2luVG9wXCIsIFwicmVhcnJhbmdlSXRlbXNcIiwgXCJpdGVtc1wiLCBcImRhdGFTb3VyY2VcIiwgXCJtaW5pbWl6ZWRTdGF0ZVwiLCBcIm1heGltaXplZFN0YXRlXCIsIFwibWF4aW1pemVkVGlsZUluZGV4XCIsIFwicmlnaHRQYW5lbENvbHNcIiwgXCJyaWdodFBhbmVsVGlsZXNXaWR0aFwiLCBcInJpZ2h0UGFuZWxUaWxlc0hlaWdodFwiLCBcInNob3dSaWdodFBhbmVsU2Nyb2xsXCIsIFwic3BsaXR0ZXJPcHRpb25zXCIsIFwicHJldmVudE1heGltaXppbmdTZWxlY3RvclwiLCBcImFuaW1hdGlvbkR1cmF0aW9uXCIsIFwiZGF0YVNvdXJjZVVybFwiLCBcInJlc3BvbnNlRGF0YUtleVwiLCBcInJlc3BvbnNlRGF0YVR5cGVcIiwgXCJkYXRhU291cmNlVHlwZVwiLCBcInJlcXVlc3RUeXBlXCIsIFwicmVzcG9uc2VDb250ZW50VHlwZVwiXSxcbiAgICBvdXRwdXRzOiBbXCJkYXRhQmluZGluZ1wiLCBcImRhdGFCb3VuZFwiLCBcInJlbmRlcmluZ1wiLCBcInJlbmRlcmVkXCIsIFwidGlsZVJlbmRlcmluZ1wiLCBcInRpbGVSZW5kZXJlZFwiLCBcInRpbGVNYXhpbWl6aW5nXCIsIFwidGlsZU1heGltaXplZFwiLCBcInRpbGVNaW5pbWl6aW5nXCIsIFwidGlsZU1pbmltaXplZFwiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ1RpbGVNYW5hZ2VyQ29tcG9uZW50IGV4dGVuZHMgSWdDb250ZW50Q29udHJvbEJhc2U8SWdUaWxlTWFuYWdlcj4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCBkYXRhU291cmNlKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IHZhbHVlO1xuICAgICAgICBjb25zdCB3aWRnZXQgPSBqUXVlcnkodGhpcy5fZWwpLmRhdGEodGhpcy5fd2lkZ2V0TmFtZSk7XG4gICAgICAgIGlmICh3aWRnZXQpIHtcbiAgICAgICAgICAgIGpRdWVyeSh0aGlzLl9lbClbdGhpcy5fd2lkZ2V0TmFtZV0oXCJvcHRpb25cIiwgXCJkYXRhU291cmNlXCIsIHRoaXMuX2RhdGFTb3VyY2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgX2RhdGFTb3VyY2U6IGFueTtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fZGF0YVNvdXJjZSA9PT0gbnVsbCB8fCB0aGlzLl9kYXRhU291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSB0aGlzLm9wdGlvbnNbXCJkYXRhU291cmNlXCJdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXSAmJiB0aGlzLl9kYXRhU291cmNlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNbXCJkYXRhU291cmNlXCJdID0gdGhpcy5fZGF0YVNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1heGltaXplcyBhIGdpdmVuIHRpbGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gJHRpbGVUb01heGltaXplIFNwZWNpZmllcyB0aGUgalF1ZXJ5IG9iamVjdCBvZiB0aGUgdGlsZSBlbGVtZW50IHRvIGJlIG1heGltaXplZC5cbiAgICAgKiBAcGFyYW0gYW5pbUR1cmF0aW9uIFNwZWNpZmllcyB0aGUgYW5pbWF0aW9uIGR1cmF0aW9uIGZvciB0aGlzIG1heGltaXppbmcuXG4gICAgICogQHBhcmFtIGV2ZW50IEluZGljYXRlcyB0aGUgYnJvd3NlciBldmVuIHdoaWNoIHRyaWdnZXJlZCB0aGlzIGFjdGlvbiAobm90IEFQSSkuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgbWF4aW1pemUoJHRpbGVUb01heGltaXplOiBPYmplY3QsIGFuaW1EdXJhdGlvbj86IG51bWJlciwgZXZlbnQ/OiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogTWluaW1pemVzIHRoZSBtYXhpbWl6ZWQgdGlsZS4gSGFzIG5vIGVmZmVjdCBpZiBubyBtYXhpbWl6ZWQgdGlsZSBpcyBwcmVzZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFuaW1EdXJhdGlvbiBTcGVjaWZpZXMgdGhlIGFuaW1hdGlvbiBkdXJhdGlvbiBmb3IgdGhpcyBtaW5pbWl6ZS5cbiAgICAgKiBAcGFyYW0gZXZlbnQgSW5kaWNhdGVzIHRoZSBicm93c2VyIGV2ZW4gd2hpY2ggdHJpZ2dlcmVkIHRoaXMgYWN0aW9uIChub3QgQVBJKS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBtaW5pbWl6ZShhbmltRHVyYXRpb24/OiBudW1iZXIsIGV2ZW50PzogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1heGltaXplZCB0aWxlIG9yIG51bGwgaWYgc3VjaCBpcyBub3QgcHJlc2VudC5cbiAgICAgKiBAcmV0dXJuIG9iamVjdHxudWxsIFJldHVybnMgdGhlIG1heGltaXplZCB0aWxlIG9yIG51bGwgaWYgc3VjaCBpcyBub3QgcHJlc2VudC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBtYXhpbWl6ZWRUaWxlKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgdGlsZXMgaW4gbWluaW1pemVkIHN0YXRlIG9yIG51bGwgaWYgc3VjaCBhcmUgbm90IHByZXNlbnQuXG4gICAgICogQHJldHVybiBvYmplY3R8bnVsbCBSZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIHRpbGVzIGluIG1pbmltaXplZCBzdGF0ZSBvciBudWxsIGlmIHN1Y2ggYXJlIG5vdCBwcmVzZW50LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIG1pbmltaXplZFRpbGVzKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNwbGl0dGVyIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRpbGUgbWFuYWdlciBvclxuICAgICAqICAgICAgICAgICAgICAgICBudWxsIGlmIHRoZSB0aWxlIG1hbmFnZXIgd2FzIGluc3RhbnRpYXRlZCB3aXRoIG1heGltaXplZFRpbGVJbmRleC5cbiAgICAgKiBAcmV0dXJuIG9iamVjdHxudWxsIFJldHVybnMgdGhlIHNwbGl0dGVyIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRpbGUgbWFuYWdlciBvciBudWxsIGlmIHRoZSB0aWxlIG1hbmFnZXIgd2FzIGluc3RhbnRpYXRlZCB3aXRoIG1heGltaXplZFRpbGVJbmRleC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzcGxpdHRlcigpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBbbGF5b3V0IG1hbmFnZXJdKHVpLmlnbGF5b3V0bWFuYWdlcikgYXNzb2NpYXRlZCB3aXRoIGN1cnJlbnQgdGlsZSBtYW5hZ2VyLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGxheW91dE1hbmFnZXIoKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVmbG93IHRoZSB0aWxlIG1hbmFnZXIuIFJlYXJyYW5naW5nIHRoZSB0aWxlcyB0byBmaXQgaW4gdGhlIGNvbnRhaW5lclxuICAgICAqXG4gICAgICogQHBhcmFtIGZvcmNlUmVmbG93IEluZGljYXRlcyB3aGV0aGVyIHRoZSByZWZsb3cgc2hvdWxkIGJlIGZvcmNlZC4gVXNlZnVsIGluIGNhc2VzIHdoZXJlIHRoZSBpdGVtcyBzaXplIGFuZCBwb3NpdGlvbiB3YXMgY2hhbmdlZCBtYW51YWxseS5cbiAgICAgKiBAcGFyYW0gYW5pbWF0aW9uRHVyYXRpb24gVGhlIGFuaW1hdGlvbiBkdXJhdGlvbiB0byBiZSB1c2VkIGZvciB0aGlzIHJlZmxvdyBvbmx5LlxuICAgICAqIEBwYXJhbSBldmVudCBJbmRpY2F0ZXMgdGhlIGJyb3dzZXIgZXZlbiB3aGljaCB0cmlnZ2VyZWQgdGhpcyBhY3Rpb24gKG5vdCBBUEkpLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHJlZmxvdyhmb3JjZVJlZmxvdz86IE9iamVjdCwgYW5pbWF0aW9uRHVyYXRpb24/OiBudW1iZXIsIGV2ZW50PzogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGVsZW1lbnQgdGhhdCByZXByZXNlbnRzIHRoaXMgd2lkZ2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHdpZGdldCgpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBDYXVzZXMgdGhlIFRpbGVNYW5hZ2VyIHRvIGRhdGEgYmluZCB0byB0aGUgZGF0YSBzb3VyY2UgKGxvY2FsIG9yIHJlbW90ZSkgLCBhbmQgcmUtcmVuZGVyIGFsbCBvZiB0aGUgZGF0YSBhcyB3ZWxsLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRhdGFCaW5kKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIHRoZSB3aWRnZXQgaW5zdGFuY2UgKGNsaWVudCBvYmplY3QpLiBJdCBpcyBubyBsb25nZXIgYWNjZXNzaWJsZSBhbmQgYWxsIGl0cyBldmVudCBoYW5kbGVycyBzdG9wIHdvcmtpbmcuIERlc3Ryb3lzIGFsbCBjaGlsZCB3aWRnZXRzLiBSZW1vdmVzIGF1dG8tZ2VuZXJhdGVkIEhUTUwgY29udGVudCwgd2hpY2ggaXMgb3V0c2lkZSB0aGUgd2lkZ2V0LCBlLmcuIGRldGFjaGVkIHBvcHVwcywgZHJvcGRvd25zLCBldGMuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiBPYmplY3QgeyByZXR1cm47IH07XG59Il19