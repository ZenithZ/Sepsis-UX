{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://igniteui-angular-wrappers/lib/iggrid/column.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/feature.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridmulticolumnheaders.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridsorting.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridfiltering.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridpaging.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridupdating.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridgroupby.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridcolumnmoving.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridhiding.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridcellmerging.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridresponsive.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridresizing.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridselection.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridrowselectors.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridsummaries.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridcolumnfixing.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridtooltips.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridfeatures/iggridappendrowsondemand.directive.ts","ng://igniteui-angular-wrappers/lib/iggrid/features.directive.ts","ng://igniteui-angular-wrappers/lib/igcontrolbase/igcontrolbase.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggridbase.ts","ng://igniteui-angular-wrappers/lib/iggrid/iggrid.component.ts","ng://igniteui-angular-wrappers/lib/igtreegrid/igtreegrid.component.ts","ng://igniteui-angular-wrappers/lib/ighierarchicalgrid/ighierarchicalgrid.component.ts","ng://igniteui-angular-wrappers/lib/igcombo/igcombo.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igeditorbase.ts","ng://igniteui-angular-wrappers/lib/igeditors/igcheckboxeditor.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igcurrencyeditor.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igdateeditor.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igdatepicker.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igtimepicker.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igmaskeditor.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/ignumericeditor.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igpercenteditor.component.ts","ng://igniteui-angular-wrappers/lib/igeditors/igtexteditor.component.ts","ng://igniteui-angular-wrappers/lib/igtree/igtree.component.ts","ng://igniteui-angular-wrappers/lib/igcontrolbase/igcontentcontrolbase.ts","ng://igniteui-angular-wrappers/lib/igdialog/igdialog.component.ts","ng://igniteui-angular-wrappers/lib/igsplitter/igsplitter.component.ts","ng://igniteui-angular-wrappers/lib/iglayoutmanager/iglayoutmanager.component.ts","ng://igniteui-angular-wrappers/lib/igtilemanager/igtilemanager.component.ts","ng://igniteui-angular-wrappers/lib/ightmleditor/ightmleditor.component.ts","ng://igniteui-angular-wrappers/lib/igvalidator/igvalidator.component.ts","ng://igniteui-angular-wrappers/lib/igpivotdataselector/igpivotdataselector.component.ts","ng://igniteui-angular-wrappers/lib/igpivotgrid/igpivotgrid.component.ts","ng://igniteui-angular-wrappers/lib/igdatachart/igdatachart.component.ts","ng://igniteui-angular-wrappers/lib/igpiechart/igpiechart.component.ts","ng://igniteui-angular-wrappers/lib/igdoughnutchart/igdoughnutchart.component.ts","ng://igniteui-angular-wrappers/lib/igfunnelchart/igfunnelchart.component.ts","ng://igniteui-angular-wrappers/lib/igradialgauge/igradialgauge.component.ts","ng://igniteui-angular-wrappers/lib/igzoombar/igzoombar.component.ts","ng://igniteui-angular-wrappers/lib/igmap/igmap.component.ts","ng://igniteui-angular-wrappers/lib/igsparkline/igsparkline.component.ts","ng://igniteui-angular-wrappers/lib/igbulletgraph/igbulletgraph.component.ts","ng://igniteui-angular-wrappers/lib/iglineargauge/iglineargauge.component.ts","ng://igniteui-angular-wrappers/lib/igqrcodebarcode/igqrcodebarcode.component.ts","ng://igniteui-angular-wrappers/lib/igupload/igupload.component.ts","ng://igniteui-angular-wrappers/lib/igpopover/igpopover.component.ts","ng://igniteui-angular-wrappers/lib/ignotifier/ignotifier.component.ts","ng://igniteui-angular-wrappers/lib/igrating/igrating.component.ts","ng://igniteui-angular-wrappers/lib/igvideoplayer/igvideoplayer.component.ts","ng://igniteui-angular-wrappers/lib/igradialmenu/igradialmenu.component.ts","ng://igniteui-angular-wrappers/lib/igsplitbutton/igsplitbutton.component.ts","ng://igniteui-angular-wrappers/lib/igspreadsheet/igspreadsheet.component.ts","ng://igniteui-angular-wrappers/lib/igscheduler/igscheduler.component.ts","ng://igniteui-angular-wrappers/lib/igniteui-angular-wrappers.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","Column","el","_settings","_el","i","settings","length","defineProperty","set","createColumnsSetter","get","createColumnsGetter","enumerable","configurable","name","value","grid","jQuery","nativeElement","parentElement","find","columns","ui","options","data","Directive","args","selector","inputs","ElementRef","Feature","propt","normalizeName","nodeName","toLowerCase","featureName","events","EventEmitter","ngOnInit","evtName","self","initSettings","extend","_events","Map","closest","on","evt","type","emit","event","setting","createFeatureSetter","createFeatureGetter","propNames","getOwnPropertyNames","indexOf","createMethodGetter","feature","proxy","str","replace","group","toUpperCase","charAt","slice","IgGridMultiColumnHeadersFeature","_super","call","tslib_1.__extends","destroy","collapseGroup","groupKey","callback","expandGroup","getMultiColumnHeaders","toggleGroup","outputs","IgGridSortingFeature","sortColumn","index","direction","header","sortMultiple","clearSorting","unsortColumn","openMultipleSortingDialog","closeMultipleSortingDialog","renderMultipleSortingDialogContent","isToCallEvents","removeDialogClearButton","IgGridFilteringFeature","getFilteringMatchesCount","toggleFilterRowByFeatureChooser","filter","expressions","updateUI","addedFromAdvanced","requiresFilteringExpression","filterCondition","IgGridPagingFeature","pageIndex","pageSize","size","IgGridUpdatingFeature","setCellValue","rowId","colKey","updateRow","values","addRow","deleteRow","startEdit","column","raiseEvents","startAddRowEdit","endEdit","update","findInvalid","isEditing","editorForKey","key","editorForCell","cell","showDeleteButtonFor","row","hideDeleteButton","IgGridGroupByFeature","openGroupByDialog","closeGroupByDialog","renderGroupByModalDialog","openDropDown","closeDropDown","checkColumnIsGrouped","layout","getGroupedData","idval","groupByColumns","groupByColumn","sortingDirection","ungroupByColumn","expand","collapse","ungroupAll","IgGridColumnMovingFeature","moveColumn","target","after","inDom","IgGridHidingFeature","showColumnChooser","hideColumnChooser","showColumn","isMultiColumnHeader","hideColumn","hideMultiColumns","showMultiColumns","isToRenderButtonReset","resetHidingColumnChooser","renderColumnChooserResetButton","removeColumnChooserResetButton","IgGridCellMergingFeature","IgGridResponsiveFeature","getCurrentResponsiveMode","IgGridResizingFeature","resize","width","IgGridSelectionFeature","clearSelection","selectCell","col","isFixed","selectCellById","id","deselectCell","deselectCellById","selectRow","selectRowById","deselectRow","deselectRowById","selectedCells","selectedRows","selectedCell","selectedRow","activeCell","activeRow","IgGridRowSelectorsFeature","IgGridSummariesFeature","isSummariesRowsHidden","calculateSummaries","clearAllFooterIcons","toggleDropDown","columnKey","showHideDialog","$dialog","toggleSummariesRows","isToShow","isInternalCall","toggleCheckstate","$checkbox","selectCheckBox","isToSelect","calculateSummaryColumn","ck","columnMethods","dataType","summaryCollection","summariesFor","IgGridColumnFixingFeature","unfixColumn","colIdentifier","checkAndSyncHeights","syncHeights","check","clearRowsHeights","isGroupHeader","checkFixingAllowed","checkUnfixingAllowed","fixNonDataColumns","fixDataSkippedColumns","unfixNonDataColumns","unfixDataSkippedColumns","unfixAllColumns","syncRowsHeights","$trs","$anotherRows","getWidthOfFixedColumns","fCols","excludeNonDataColumns","includeHidden","IgGridTooltipsFeature","IgGridAppendRowsOnDemandFeature","nextChunk","Features","allFeatures","addFeature","parent","g","document","createElement","appendChild","child","filtering","sorting","paging","updating","groupBy","columnMoving","hiding","responsive","cellMerging","resizing","selection","rowSelectors","summaries","columnFixing","tooltips","appendRowsOnDemand","multiColumnHeaders","push","ngAfterContentInit","ContentChild","static","NODES","ig-text-editor","ig-numeric-editor","ig-percent-editor","ig-mask-editor","ig-date-picker","ig-time-picker","ig-date-editor","ig-currency-editor","ig-checkbox-editor","ig-html-editor","ig-combo","ig-grid","ig-tree-grid","ig-hierarchical-grid","ig-pivot-data-selector","ig-pivot-grid","ig-data-chart","ig-pie-chart","ig-doughnut-chart","ig-funnel-chart","ig-radial-gauge","ig-sparkline","ig-zoombar","ig-map","ig-bullet-graph","ig-linear-gauge","ig-q-r-code-barcode","ig-validator","ig-upload","ig-popover","ig-rating","ig-video-player","ig-radial-menu","ig-split-button","ig-notifier","ig-tree","ig-dialog","ig-splitter","ig-layout-manager","ig-tile-manager","ig-spreadsheet","ig-scheduler","IgControlBase","renderer","differs","kvalDiffers","cdr","_evtEmmiters","_differs","_nativeElement","_widgetName","convertToCamelCase","createSetter","_config","that","opt","attr","widgetId","widget","ngDoCheck","_this","_optsDiffer","changes","diff","forEachChangedItem","change","currentValue","ngOnChanges","e","Error","markForCheck","ngOnDestroy","body","contains","remove","Input","IgGridBase","_dataSource","undefined","_columns","map","c","featuresList","createDataSource","tr","dataSource","_removeTransactionsByRecordId","_changes","splice","rowData","t","pkKey","existingDomRow","widgetName","renderNewRow","findRecordByKey","_addRow","_createNewRowTransaction","_addTransaction","_removeTransactionByTransactionId","tid","rec","currValue","newFormattedVal","td","element","columnByKey","template","_renderTemplatedCell","_renderCell","_getCellsByColKey","html","localSchemaTransform","schema","transform","_commitTransactionsByRowId","ds","_differ","dataSourceApplyChanges","isDirty","item","rowChanges","forEachAddedItem","r","currentIndex","forEachRemovedItem","previousIndex","allRows","ContentChildren","IgGridComponent","kvalDiff","hasFixedDataSkippedColumns","hasFixedColumns","fixingDirection","isFixedColumn","resizeContainer","getElementInfo","elem","container","headersTable","footersTable","scrollContainer","fixedContainer","fixedBodyContainer","fixedFooterContainer","fixedHeaderContainer","fixedHeadersTable","fixedFootersTable","cellAt","x","y","cellById","fixedTable","immediateChildrenWidgets","childrenWidgets","children","immediateChildren","rowAt","rowById","fixedRowAt","fixedRows","rows","allFixedRows","columnByText","text","getCellValue","getCellText","setColumnTemplate","tmpl","render","commit","rollback","getDetachedRecord","pendingTransactions","allTransactions","transactionsAsString","saveChanges","success","error","dataSourceObject","totalRecordsCount","dataBind","internal","getUnboundValues","setUnboundValues","removeOldValues","setUnboundValueByPK","val","notToRender","getUnboundColumnByKey","hasVerticalScrollbar","autoSizeColumns","calculateAutoFitColumnWidth","columnIndex","getVisibleIndexByKey","includeDataSkip","renderMultiColumnHeader","cols","virtualScrollTo","scrollerPosition","getColumnByTD","$td","notToCallDestroy","Component","changeDetection","ChangeDetectionStrategy","OnPush","Renderer","IterableDiffers","KeyValueDiffers","ChangeDetectorRef","IgTreeGridComponent","dataLevel","trs","nextUntil","nextAll","childDataKey","toggleRow","expandRow","collapseRow","renderNewChild","parentId","IgHierarchicalGridComponent","childContainer","next","childrenDataProperty","childGrid","allChildrenWidgets","indx","parentRow","prev","parentGridPK","primaryKey","each","childGrids","root","rootWidget","allChildren","toggle","collapsed","populated","rebind","IgComboComponent","model","onChange","_","onTouched","valueAccessor","_model","allowCustomValue","viewToModelUpdate","multiSelection","enabled","items","valueKey","owner","writeValue","registerOnChange","fn","registerOnTouched","updateComboItem","comboItem","itemsFromIndex","_updateItem","isSelected","_updateInputValues","combo","recChanges","refreshValue","dataForValue","dataForElement","$element","itemsFromElement","itemsFromValue","filteredItems","selectedItems","texts","clearFiltering","focusCombo","clearInput","isValueSelected","isIndexSelected","select","$items","selectAll","deselectByValue","deselect","deselectByIndex","deselectAll","activeIndex","listScrollTop","listItems","comboWrapper","dropDown","list","textInput","valueInput","validator","validate","dropDownOpened","positionDropDown","NgModel","decorators","Optional","IgEditorBase","newValue","IgCheckboxEditorComponent","isValid","inputName","field","editorContainer","hasFocus","setFocus","delay","hide","show","IgCurrencyEditorComponent","currencySymbol","symbol","findListItemIndex","number","getSelectedText","getSelectionStart","getSelectionEnd","spinUp","delta","spinDown","selectListIndexUp","selectListIndexDown","getRegionalOption","changeRegional","IgDateEditorComponent","getSelectedDate","selectDate","date","spinUpButton","spinDownButton","dropDownButton","dropDownContainer","dropDownVisible","getSelectedListItem","selectedListIndex","showDropDown","hideDropDown","IgDatePickerComponent","getCalendar","IgTimePickerComponent","matchType","IgMaskEditorComponent","changeLocale","displayValue","clearButton","insert","string","start","end","IgNumericEditorComponent","IgPercentEditorComponent","percentSymbol","IgTextEditorComponent","IgTreeComponent","updateItem","addItem","deleteItem","bindings","childDataProperty","node","expandToNode","toSelect","parentNode","nodeByPath","nodePath","nodesByValue","checkedNodes","uncheckedNodes","partiallyCheckedNodes","selectedNode","findNodesByText","findImmediateNodesByText","nodeByIndex","nodeFromElement","childrenByPath","path","isExpanded","isChecked","checkState","addNode","nodeIndex","removeAt","removeNodesByValue","applyChangesToNode","transactionLog","nodeDataFor","IgContentControlBase","childNodes","append","IgDialogComponent","state","mainElement","close","open","minimize","maximize","restore","pin","unpin","getTopModal","isTopModal","moveToTop","content","newContent","IgSplitterComponent","expandAt","collapseAt","firstPanel","secondPanel","refreshLayout","setFirstPanelSize","setSecondPanelSize","IgLayoutManagerComponent","reflow","forceReflow","animationDuration","IgTileManagerComponent","$tileToMaximize","animDuration","maximizedTile","minimizedTiles","splitter","layoutManager","IgHtmlEditorComponent","zone","_zone","iframe","contentWindow","run","resizeWorkspace","getContent","format","setContent","executeAction","actionName","contentDocument","contentEditable","range","insertAtCaret","NgZone","IgValidatorComponent","getErrorMessages","isMessageDisplayed","notifier","addField","removeField","updateField","fieldOptions","IgPivotDataSelectorComponent","option","IgPivotGridComponent","updateGrid","expandTupleMember","tupleLocation","tupleIndex","memberIndex","shouldUpdate","collapseTupleMember","appliedColumnSortDirections","appliedLevelSortDirections","IgDataChartComponent","exportImage","height","styleUpdated","resetZoom","targetName","insertItem","removeItem","setItem","notifySetItem","newItem","oldItem","notifyClearItems","notifyInsertItem","notifyRemoveItem","scrollIntoView","scaleValue","unscaledValue","unscaleValue","scaledValue","resetCachedEnhancedInterval","notifyVisualPropertiesChanged","flush","exportVisualData","getActualMinimumValue","getActualMaximumValue","getActualInterval","print","renderSeries","animate","getItemIndex","worldPoint","getItem","getItemSpan","getSeriesValue","useInterpolation","skipUnknowns","getSeriesValueBoundingBox","getSeriesValueFineGrainedBoundingBoxes","getSeriesValuePosition","getSeriesValuePositionFromSeriesPixel","seriesPoint","getSeriesValueFromSeriesPixel","getSeriesValueBoundingBoxFromSeriesPixel","getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel","getSeriesHighValue","getSeriesHighValuePosition","getSeriesHighValuePositionFromSeriesPixel","getSeriesHighValueFromSeriesPixel","getSeriesLowValue","getSeriesLowValuePosition","getSeriesLowValuePositionFromSeriesPixel","getSeriesLowValueFromSeriesPixel","getItemIndexFromSeriesPixel","getItemFromSeriesPixel","getSeriesOffsetValue","getSeriesCategoryWidth","replayTransitionIn","simulateHover","moveCursorPoint","startTiledZoomingIfNecessary","endTiledZoomingIfRunning","clearTileZoomCache","IgPieChartComponent","IgDoughnutChartComponent","addSeries","seriesObj","removeSeries","updateSeries","getCenterCoordinates","getHoleRadius","IgFunnelChartComponent","selectedSliceItems","selectedSliceIndexes","toggleSelection","IgRadialGaugeComponent","getRangeNames","addRange","removeRange","updateRange","clearRanges","getValueForPoint","getPointForValue","extent","needleContainsPoint","IgZoombarComponent","clone","zoom","left","IgMapComponent","notifyContainerResized","zoomToGeographic","rect","getGeographicFromZoom","getZoomFromGeographic","IgSparklineComponent","IgBulletGraphComponent","IgLinearGaugeComponent","IgQRCodeBarcodeComponent","IgUploadComponent","clearAll","addDataField","formData","addDataFields","fields","startUpload","formNumber","cancelUpload","getFileInfoData","cancelAll","getFileInfo","fileIndex","IgPopoverComponent","that_1","trg","newCnt","getCoordinates","setCoordinates","pos","IgNotifierComponent","notify","message","isVisible","IgRatingComponent","valueHover","focus","IgVideoPlayerComponent","hideAdMessage","playCommercial","commercial","showBanner","hideBanner","resetCommercialsShow","togglePlay","play","pause","currentTime","screenshot","scaleFactor","supportsVideo","supportsH264BaselineVideo","supportsOggTheoraVideo","supportsWebmVideo","paused","ended","duration","seeking","IgRadialMenuComponent","itemOption","itemKey","IgSplitButtonComponent","switchToButton","button","IgSpreadsheetComponent","getActivePane","getActiveSelection","getActiveSelectionCellRangeFormat","getIsRenamingWorksheet","getPanes","action","IgSchedulerComponent","getAppointmentById","createAppointment","appointment","deleteAppointment","editAppointment","updateAppoinment","todayButton","previousButton","dateRangeButton","nextButton","IgniteUIModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ElementRef, Directive } from \"@angular/core\";\n\ndeclare var jQuery: any;\n\n@Directive({\n\tselector: 'column',\n\tinputs: ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass']\n})\nexport class Column {\n\tpublic _settings: any = {};\n\tprivate _el: any;\n\n\tconstructor(el: ElementRef) {\n\t\tthis._el = el;\n\t\tlet self = this;\n\t\tlet i, settings = ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass'];\n\t\tfor(i = 0; i < settings.length; i++) {\n\t\t\tObject.defineProperty(self, settings[i], {\n\t\t\t\tset: self.createColumnsSetter(settings[i]),\n\t\t\t\tget: self.createColumnsGetter(settings[i]),\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true\n\t\t\t});\n\t\t}\n\t}\n\n\tcreateColumnsSetter(name) {\n\t\treturn function (value) {\n\t\t\tlet grid = jQuery(this._el.nativeElement.parentElement).find(\"table[role='grid']\");\n\t\t\tlet columns = grid[\"igGrid\"](\"option\", \"columns\");\n\t\t\tthis._settings[name] = value;\n\n\t\t\tif (jQuery.ui[\"igGrid\"] &&\n\t\t\t\tjQuery.ui[\"igGrid\"].prototype.options &&\n\t\t\t\tjQuery.ui[\"igGrid\"].prototype.options.hasOwnProperty(\"columns\") &&\n\t\t\t\tgrid.data(\"igGrid\")) {\n\t\t\t\t//reapply all column settings when a column setting is changed\n\t\t\t\tgrid[\"igGrid\"](\"option\", \"columns\", columns);\n\t\t\t}\n\t\t}\n\t}\n\n\tcreateColumnsGetter(name) {\n\t\treturn function () {\n\t\t\treturn this._settings[name];\n\t\t}\n\t}\n}","import { ElementRef, EventEmitter } from \"@angular/core\";\n\ndeclare var jQuery: any;\n\nexport class Feature<Model> {\n    public _el: any;\n    public _settings: any = {};\n    public initSettings: Model;\n    public name: string;\n    private _events: any;\n    private featureName: string;\n\n    constructor(el: ElementRef) {\n        this._el = el;\n        this.name = this.normalizeName(el.nativeElement.nodeName.toLowerCase());\n        this.featureName = \"igGrid\" + this.name;\n        for (var propt in jQuery.ui[\"igGrid\" + this.name].prototype.events) {\n            this[propt] = new EventEmitter();\n        }\n    }\n\n    ngOnInit() {\n        let self = this;\n        this.initSettings = jQuery.extend(true, {}, this);\n        let evtName;\n        this._events = new Map<string, string>();\n        let grid = jQuery(this._el.nativeElement).closest(\"ig-grid\").find(\"table\");\n\n        //event binding for features\n        for (var propt in jQuery.ui[this.featureName].prototype.events) {\n            evtName = this.featureName.toLowerCase() + propt.toLowerCase();\n            this._events[evtName] = propt;\n            jQuery(grid).on(evtName, function (evt, ui) {\n                self[self._events[evt.type]].emit({ event: evt, ui: ui });\n            });\n        }\n        for (var setting in jQuery.ui[this.featureName].prototype.options) {\n            Object.defineProperty(self, setting, {\n                set: self.createFeatureSetter(setting),\n                get: self.createFeatureGetter(setting),\n                enumerable: true,\n                configurable: true\n            });\n        }\n        var propNames = Object.getOwnPropertyNames(jQuery.ui[this.featureName].prototype);\n        for (var i = 0; i < propNames.length; i++) {\n            var name = propNames[i];\n            if (name.indexOf(\"_\") !== 0 && typeof jQuery.ui[this.featureName].prototype[name] === \"function\") {\n                Object.defineProperty(self, name, {\n                    get: self.createMethodGetter(name)\n                });\n            }\n        }\n    }\n\n    createFeatureSetter(name) {\n        return function (value) {\n            let grid = jQuery(this._el.nativeElement).closest(\"ig-grid\").find(\"table[role='grid']\");\n            this._settings[name] = value;\n\n            if (jQuery.ui[this.featureName] &&\n                jQuery.ui[this.featureName].prototype.options &&\n                jQuery.ui[this.featureName].prototype.options.hasOwnProperty(name) &&\n                grid.data(this.featureName)) {\n                grid[this.featureName](\"option\", name, value);\n            }\n        }\n    }\n\n    createFeatureGetter(name) {\n        return function () {\n            return this._settings[name];\n        }\n    }\n    createMethodGetter(name) {\n        return function () {\n            let grid = jQuery(this._el.nativeElement).closest(\"ig-grid\").find(\"table[role='grid']\");\n            if (grid.length === 0) {\n                grid = jQuery(this._el.nativeElement).closest(\"ig-hierarchical-grid\").find(\"table[role='grid']\");\n            }\n            var args = [];\n            var feature = grid.data(this.featureName);\n            return jQuery.proxy(feature[name], feature);\n        }\n    }\n\n    normalizeName(str) {\n        //convert hyphen to camelCase\n        let name = str.replace(/-([a-z])/g, function (group) {\n            return group[1].toUpperCase();\n        })\n        return name.charAt(0).toUpperCase() + name.slice(1);\n    }\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\nimport { Column } from \"../column.directive\";\n\n\n@Directive({\n    selector: 'multi-column-headers',\n    inputs: [\"inherit\"],\n    outputs: [\"groupCollapsing\", \"groupCollapsed\", \"groupExpanding\", \"groupExpanded\"]\n})\nexport class IgGridMultiColumnHeadersFeature extends Feature<IgGridMultiColumnHeaders> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Collapses an expanded group. If the group is collapsed, the method does nothing.\n     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     */\n    /* istanbul ignore next */\n    public collapseGroup(groupKey: string, callback?: Function): void { return; };\n    /**\n     * Expands a collapsed group. If the group is expanded, the method does nothing.\n     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     */\n    /* istanbul ignore next */\n    public expandGroup(groupKey: string, callback?: Function): void { return; };\n    /**\n     * Returns multicolumn headers array. if there aren\"t multicolumn headers returns undefined.\n     */\n    /* istanbul ignore next */\n    public getMultiColumnHeaders(): Array<Column> { return; };\n    /**\n     * Toggles a collapsible group.\n     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     */\n    /* istanbul ignore next */\n    public toggleGroup(groupKey: string, callback?: Function): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'sorting',\n    inputs: [\"disabled\", \"create\", \"type\", \"caseSensitive\", \"applySortedColumnCss\", \"sortUrlKey\", \"sortUrlKeyAscValue\", \"sortUrlKeyDescValue\", \"mode\", \"customSortFunction\", \"firstSortDirection\", \"sortedColumnTooltip\", \"modalDialogSortOnClick\", \"modalDialogSortByButtonText\", \"modalDialogResetButtonLabel\", \"modalDialogCaptionButtonDesc\", \"modalDialogCaptionButtonAsc\", \"modalDialogCaptionButtonUnsort\", \"modalDialogWidth\", \"modalDialogHeight\", \"modalDialogAnimationDuration\", \"featureChooserText\", \"unsortedColumnTooltip\", \"columnSettings\", \"modalDialogCaptionText\", \"modalDialogButtonApplyText\", \"modalDialogButtonCancelText\", \"featureChooserSortAsc\", \"featureChooserSortDesc\", \"persist\", \"sortingDialogContainment\", \"dialogWidget\", \"inherit\"],\n    outputs: [\"columnSorting\", \"columnSorted\", \"modalDialogOpening\", \"modalDialogOpened\", \"modalDialogMoving\", \"modalDialogClosing\", \"modalDialogClosed\", \"modalDialogContentsRendering\", \"modalDialogContentsRendered\", \"modalDialogSortingChanged\", \"modalDialogButtonUnsortClick\", \"modalDialogSortClick\", \"modalDialogButtonApplyClick\", \"modalDialogButtonResetClick\"]\n})\nexport class IgGridSortingFeature extends Feature<IgGridSorting> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Sorts the data in a grid column  and updates the UI.\n     *\n     * @param index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.\n     * @param direction     Specifies sorting direction (ascending or descending)\n     * @param header     \n     */\n    /* istanbul ignore next */\n    public sortColumn(index: Object, direction: Object, header: Object): void { return; };\n\n    /**\n     * Sorts the data in grid columns and updates the UI.\\\n     */\n    /* istanbul ignore next */\n    public sortMultiple(): void { return; };\n\n    /**\n     * Removes current sorting(for all sorted columns) and updates the UI.\n     */\n    /* istanbul ignore next */\n    public clearSorting(): void { return; };\n\n    /**\n     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.\n     *\n     * @param index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.\n     * @param header     - if specified client events should be fired\n     */\n    /* istanbul ignore next */\n    public unsortColumn(index: Object, header: Object): void { return; };\n\n    /**\n     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Opens the multiple sorting dialog.\n     */\n    /* istanbul ignore next */\n    public openMultipleSortingDialog(): void { return; };\n\n    /**\n     * Closes the multiple sorting dialog.\n     */\n    /* istanbul ignore next */\n    public closeMultipleSortingDialog(): void { return; };\n\n    /**\n     * Renders content of multiple sorting dialog - sorted and unsorted columns.\n     *\n     * @param isToCallEvents \n     */\n    /* istanbul ignore next */\n    public renderMultipleSortingDialogContent(isToCallEvents: Object): void { return; };\n\n    /**\n     * Remove clear button for multiple sorting dialog\n     */\n    /* istanbul ignore next */\n    public removeDialogClearButton(): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'filtering',\n    inputs: [\"disabled\", \"create\", \"caseSensitive\", \"filterSummaryAlwaysVisible\", \"renderFC\", \"filterSummaryTemplate\", \"filterDropDownAnimations\", \"filterDropDownAnimationDuration\", \"filterDropDownWidth\", \"filterDropDownHeight\", \"filterExprUrlKey\", \"filterDropDownItemIcons\", \"columnSettings\", \"type\", \"filterDelay\", \"mode\", \"advancedModeEditorsVisible\", \"advancedModeHeaderButtonLocation\", \"filterDialogWidth\", \"filterDialogHeight\", \"filterDialogFilterDropDownDefaultWidth\", \"filterDialogExprInputDefaultWidth\", \"filterDialogColumnDropDownDefaultWidth\", \"renderFilterButton\", \"filterButtonLocation\", \"nullTexts\", \"labels\", \"tooltipTemplate\", \"filterDialogAddConditionTemplate\", \"filterDialogAddConditionDropDownTemplate\", \"filterDialogFilterTemplate\", \"filterDialogFilterConditionTemplate\", \"filterDialogAddButtonWidth\", \"filterDialogOkCancelButtonWidth\", \"filterDialogMaxFilterCount\", \"filterDialogContainment\", \"showEmptyConditions\", \"showNullConditions\", \"featureChooserText\", \"featureChooserTextHide\", \"featureChooserTextAdvancedFilter\", \"dialogWidget\", \"persist\", \"inherit\"],\n    outputs: [\"dataFiltering\", \"dataFiltered\", \"dropDownOpening\", \"dropDownOpened\", \"dropDownClosing\", \"dropDownClosed\", \"filterDialogOpening\", \"filterDialogOpened\", \"filterDialogMoving\", \"filterDialogFilterAdding\", \"filterDialogFilterAdded\", \"filterDialogClosing\", \"filterDialogClosed\", \"filterDialogContentsRendering\", \"filterDialogContentsRendered\", \"filterDialogFiltering\"]\n})\nexport class IgGridFilteringFeature extends Feature<IgGridFiltering> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the filtering widget - remove fitler row, unbinds events, returns the grid to its previous state.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the count of data records that match filtering conditions\n     */\n    /* istanbul ignore next */\n    public getFilteringMatchesCount(): number { return; };\n\n    /**\n     * Toggle filter row when mode is simple or [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is true. Otherwise show/hide advanced dialog.\n     *\n     * @param event     Column key\n     */\n    /* istanbul ignore next */\n    public toggleFilterRowByFeatureChooser(event: string): void { return; };\n\n    /**\n     * Applies filtering programmatically and updates the UI by default.\n     *\n     * @param expressions     An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: \"equals\", \"doesNotEqual\", \"contains\", \"doesNotContain\", \"greaterThan\", \"lessThan\", \"greaterThanOrEqualTo\", \"lessThanOrEqualTo\", \"true\", \"false\", \"null\", \"notNull\", \"empty\", \"notEmpty\", \"startsWith\", \"endsWith\", \"today\", \"yesterday\", \"on\", \"notOn\", \"thisMonth\", \"lastMonth\", \"nextMonth\", \"before\", \"after\", \"thisYear\", \"lastYear\", \"nextYear\". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.\n     * @param updateUI     specifies whether the filter row should be also updated once the grid is filtered\n     * @param addedFromAdvanced     \n     */\n    /* istanbul ignore next */\n    public filter(expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void { return; };\n\n    /**\n     * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is \"lastMonth\", \"thisMonth\", \"null\", \"notNull\", \"true\", \"false\", etc. then filtering expression is NOT required\n     *\n     * @param filterCondition    filtering condition - e.g. \"true\", \"false\",  \"yesterday\", \"empty\", \"null\", etc.\n     */\n    /* istanbul ignore next */\n    public requiresFilteringExpression(filterCondition: string): boolean { return; };\n}","import { Directive, ElementRef } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'paging',\n    inputs: [\"disabled\", \"create\", \"pageSize\", \"recordCountKey\", \"pageSizeUrlKey\", \"pageIndexUrlKey\", \"currentPageIndex\", \"type\", \"showPageSizeDropDown\", \"pageSizeDropDownLabel\", \"pageSizeDropDownTrailingLabel\", \"pageSizeDropDownLocation\", \"showPagerRecordsLabel\", \"pagerRecordsLabelTemplate\", \"nextPageLabelText\", \"prevPageLabelText\", \"firstPageLabelText\", \"lastPageLabelText\", \"showFirstLastPages\", \"showPrevNextPages\", \"currentPageDropDownLeadingLabel\", \"currentPageDropDownTrailingLabel\", \"currentPageDropDownTooltip\", \"pageSizeDropDownTooltip\", \"pagerRecordsLabelTooltip\", \"prevPageTooltip\", \"nextPageTooltip\", \"firstPageTooltip\", \"lastPageTooltip\", \"pageTooltipFormat\", \"pageSizeList\", \"pageCountLimit\", \"visiblePageCount\", \"defaultDropDownWidth\", \"delayOnPageChanged\", \"persist\", \"inherit\"],\n    outputs: [\"pageIndexChanging\", \"pageIndexChanged\", \"pageSizeChanging\", \"pageSizeChanged\", \"pagerRendering\", \"pagerRendered\"]\n})\nexport class IgGridPagingFeature extends Feature<IgGridPaging> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).\n     *\n     * @param index     The page index to go to.\n     */\n    /* istanbul ignore next */\n    public pageIndex(index?: number): number { return; };\n\n    /**\n     * Gets/Sets the page size. If no parameter is specified, just returns the current page size.\n     *\n     * @param size     The new page size.\n     */\n    /* istanbul ignore next */\n    public pageSize(size?: number): number { return; };\n\n    /**\n     * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'updating',\n    inputs: [\"disabled\", \"create\", \"columnSettings\", \"editMode\", \"enableDeleteRow\", \"enableAddRow\", \"validation\", \"doneLabel\", \"doneTooltip\", \"cancelLabel\", \"cancelTooltip\", \"addRowLabel\", \"addRowTooltip\", \"deleteRowLabel\", \"deleteRowTooltip\", \"showDoneCancelButtons\", \"enableDataDirtyException\", \"startEditTriggers\", \"horizontalMoveOnEnter\", \"excelNavigationMode\", \"saveChangesSuccessHandler\", \"saveChangesErrorHandler\", \"swipeDistance\", \"wrapAround\", \"rowEditDialogOptions\", \"dialogWidget\", \"inherit\"],\n    outputs: [\"editRowStarting\", \"editRowStarted\", \"editRowEnding\", \"editRowEnded\", \"editCellStarting\", \"editCellStarted\", \"editCellEnding\", \"editCellEnded\", \"rowAdding\", \"rowAdded\", \"rowDeleting\", \"rowDeleted\", \"dataDirty\", \"generatePrimaryKeyValue\", \"rowEditDialogBeforeOpen\", \"rowEditDialogAfterOpen\", \"rowEditDialogBeforeClose\", \"rowEditDialogAfterClose\", \"rowEditDialogContentsRendered\"]\n})\nexport class IgGridUpdatingFeature extends Feature<IgGridUpdating> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.\n     * \t\t\tIf the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.\n     *\n     * @param rowId    The primary key of the row the cell is a child of.\n     * @param colKey    The column key of the cell.\n     * @param value    The new value for the cell.\n     */\n    /* istanbul ignore next */\n    public setCellValue(rowId: Object, colKey: string, value: Object): void { return; };\n\n    /**\n     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.\n     * \t\t\tIf the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.\n     *\n     * @param rowId    The primary key of the row to update.\n     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .\n     */\n    /* istanbul ignore next */\n    public updateRow(rowId: Object, values: Object): void { return; };\n\n    /**\n     * Adds a new row to the grid. It also creates a transaction and updates the UI.\n     *\n     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .\n     */\n    /* istanbul ignore next */\n    public addRow(values: Object): void { return; };\n\n    /**\n     * Deletes a row from the grid. It also creates a transaction and updates the UI.\n     *\n     * @param rowId    The primary key of the row to delete.\n     */\n    /* istanbul ignore next */\n    public deleteRow(rowId: Object): void { return; };\n\n    /**\n     * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).\n     *\n     * @param rowId    The row id.\n     * @param column    The column key or index.\n     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.\n     */\n    /* istanbul ignore next */\n    public startEdit(rowId: Object, column: Object, raiseEvents?: boolean): boolean { return; };\n\n    /**\n     * Starts editing for adding a new row.\n     *\n     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.\n     */\n    /* istanbul ignore next */\n    public startAddRowEdit(raiseEvents?: boolean): boolean { return; };\n\n    /**\n     * Ends the currently active edit mode.\n     *\n     * @param update    Specifies if the edit process should accept the current changes. Default is 'false'.\n     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.\n     */\n    /* istanbul ignore next */\n    public endEdit(update?: boolean, raiseEvents?: boolean): boolean { return; };\n\n    /**\n     * Finds and returns the key of the first column the editor for which has invalid value.\n     */\n    /* istanbul ignore next */\n    public findInvalid(): string { return; };\n\n    /**\n     * Checks if the grid is in edit mode.\n     */\n    /* istanbul ignore next */\n    public isEditing(): boolean { return; };\n\n    /**\n     * Gets the editor for a column by the column key. That method can be used only after the editor has been created.\n     *\n     * @param key    The key of the column.\n     */\n    /* istanbul ignore next */\n    public editorForKey(key: string): Object { return; };\n\n    /**\n     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.\n     *\n     * @param cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.\n     * @param create    Requests to create the editor if it has not been created yet.\n     */\n    /* istanbul ignore next */\n    public editorForCell(cell: string, create?: boolean): Object { return; };\n\n    /**\n     * Destroys igGridUpdating.\n     */\n    /* istanbul ignore next */\n    public destroy(): Object { return; };\n\n    /**\n     * Shows the delete button for specific row.\n     *\n     * @param row    A jQuery object of the targeted row.\n     */\n    /* istanbul ignore next */\n    public showDeleteButtonFor(row: Object): void { return; };\n\n    /**\n     * Hides the delete button.\n     */\n    /* istanbul ignore next */\n    public hideDeleteButton(): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'group-by',\n    inputs: [\"disabled\", \"create\", \"groupByAreaVisibility\", \"initialExpand\", \"emptyGroupByAreaContent\", \"emptyGroupByAreaContentSelectColumns\", \"expansionIndicatorVisibility\", \"groupByLabelWidth\", \"labelDragHelperOpacity\", \"indentation\", \"defaultSortingDirection\", \"groupedColumns\", \"resultResponseKey\", \"groupedRowTextTemplate\", \"type\", \"groupByUrlKey\", \"groupByUrlKeyAscValue\", \"groupByUrlKeyDescValue\", \"summarySettings\", \"columnSettings\", \"expandTooltip\", \"collapseTooltip\", \"removeButtonTooltip\", \"modalDialogGroupByOnClick\", \"modalDialogGroupByButtonText\", \"modalDialogCaptionButtonDesc\", \"modalDialogCaptionButtonAsc\", \"modalDialogCaptionButtonUngroup\", \"modalDialogCaptionText\", \"modalDialogDropDownLabel\", \"modalDialogRootLevelHierarchicalGrid\", \"modalDialogDropDownButtonCaption\", \"modalDialogClearAllButtonLabel\", \"emptyGroupByAreaContentSelectColumnsCaption\", \"modalDialogDropDownWidth\", \"modalDialogDropDownAreaWidth\", \"modalDialogAnimationDuration\", \"modalDialogWidth\", \"modalDialogHeight\", \"modalDialogButtonApplyText\", \"modalDialogButtonCancelText\", \"useGridColumnFormatter\", \"persist\", \"groupByDialogContainment\", \"dialogWidget\", \"inherit\"],\n    outputs: [\"groupedColumnsChanging\", \"groupedColumnsChanged\", \"modalDialogMoving\", \"modalDialogClosing\", \"modalDialogClosed\", \"modalDialogOpening\", \"modalDialogOpened\", \"modalDialogContentsRendering\", \"modalDialogContentsRendered\", \"modalDialogButtonApplyClick\", \"modalDialogButtonResetClick\", \"modalDialogGroupingColumn\", \"modalDialogGroupColumn\", \"modalDialogUngroupingColumn\", \"modalDialogUngroupColumn\", \"modalDialogSortGroupedColumn\"]\n})\nexport class IgGridGroupByFeature extends Feature<IgGridGroupBy> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Open groupby modal dialog\n     */\n    /* istanbul ignore next */\n    public openGroupByDialog(): void { return; };\n\n    /**\n     * Close groupby modal dialog\n     */\n    /* istanbul ignore next */\n    public closeGroupByDialog(): void { return; };\n\n    /**\n     * Render groupby modal dialog and its content\n     */\n    /* istanbul ignore next */\n    public renderGroupByModalDialog(): void { return; };\n\n    /**\n     * Open layouts dropdown\n     */\n    /* istanbul ignore next */\n    public openDropDown(): void { return; };\n\n    /**\n     * Close layouts dropdown\n     */\n    /* istanbul ignore next */\n    public closeDropDown(): void { return; };\n\n    /**\n     * Check whether column with specified key and layout is grouped\n     *\n     * @param key    key of the column\n     * @param layout    layout name\n     */\n    /* istanbul ignore next */\n    public checkColumnIsGrouped(key: string, layout: string): void { return; };\n\n    /**\n     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.\n     *\n     * @param data    data (sorted by colKey) that is used to get the records from.\n     * @param colKey    key of the column for which grouping will be applied.\n     * @param idval    value of the column by which grouping will be applied.\n     */\n    /* istanbul ignore next */\n    public getGroupedData(data: any[], colKey: string, idval?: string): any[] { return; };\n\n    /**\n     * Adds a column to the group by columns list, executes the group by operation and updates the view.\n     */\n    /* istanbul ignore next */\n    public groupByColumns(): Object { return; };\n\n    /**\n     * Groups by a column\n     *\n     * @param key    Column Key - group by the column with the specified key\n     * @param layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column\n     * @param sortingDirection    if not set it is taken from option defaultSortingDirection\n     */\n    /* istanbul ignore next */\n    public groupByColumn(key: string, layout?: string, sortingDirection?: Object): void { return; };\n\n    /**\n     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.\n     *\n     * @param key    Column Key - ungroup by the column with the specified key\n     * @param layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.\n     */\n    /* istanbul ignore next */\n    public ungroupByColumn(key: string, layout?: string): void { return; };\n\n    /**\n     * Expand group row with specified id\n     *\n     * @param rowId    data-id attribute of the group row in the DOM\n     */\n    /* istanbul ignore next */\n    public expand(rowId: string): void { return; };\n\n    /**\n     * Expand group row with specified id\n     *\n     * @param rowId    data-id attribute of the group row in the DOM\n     */\n    /* istanbul ignore next */\n    public collapse(rowId: string): void { return; };\n\n    /**\n     * Clears the group by columns list and updates the view.\n     */\n    /* istanbul ignore next */\n    public ungroupAll(): void { return; };\n\n    /**\n     * Destroys the group by feature object.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Directive, ElementRef } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'column-moving',\n    inputs: [\"disabled\",\"create\",\"columnSettings\",\"mode\",\"moveType\",\"addMovingDropdown\",\"movingDialogWidth\",\"movingDialogHeight\",\"movingDialogAnimationDuration\",\"movingAcceptanceTolerance\",\"movingScrollTolerance\",\"scrollSpeedMultiplier\",\"scrollDelta\",\"hideHeaderContentsDuringDrag\",\"dragHelperOpacity\",\"movingDialogCaptionButtonDesc\",\"movingDialogCaptionButtonAsc\",\"movingDialogCaptionText\",\"movingDialogDisplayText\",\"movingDialogDropTooltipText\",\"movingDialogDropTooltipMarkup\",\"dropDownMoveLeftText\",\"dropDownMoveRightText\",\"dropDownMoveFirstText\",\"dropDownMoveLastText\",\"movingToolTipMove\",\"featureChooserSubmenuText\",\"columnMovingDialogContainment\",\"dialogWidget\",\"inherit\"],\n    outputs: [\"columnDragStart\",\"columnDragEnd\",\"columnDragCanceled\",\"columnMoving\",\"columnMoved\",\"movingDialogOpening\",\"movingDialogOpened\",\"movingDialogDragged\",\"movingDialogClosing\",\"movingDialogClosed\",\"movingDialogContentsRendering\",\"movingDialogContentsRendered\",\"movingDialogMoveUpButtonPressed\",\"movingDialogMoveDownButtonPressed\",\"movingDialogDragColumnMoving\",\"movingDialogDragColumnMoved\"]\n})\nexport class IgGridColumnMovingFeature extends Feature<IgGridColumnMoving> {\t\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Restoring overwritten functions\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; } ;\n\n    /**\n     * Moves a visible column at a specified place, in front or behind a target column or at a target index\n     * \t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.\n     * @param target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.\n     * @param after    Specifies whether the column moved should be moved after or before the target column.\n     * @param inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.\n     * @param callback    Specifies a custom function to be called when the column is moved.\n     */\n    /* istanbul ignore next */\n    public moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void { return; } ;\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'hiding',\n    inputs: [\"disabled\", \"create\", \"columnSettings\", \"hiddenColumnIndicatorHeaderWidth\", \"columnChooserContainment\", \"columnChooserWidth\", \"columnChooserHeight\", \"dropDownAnimationDuration\", \"columnChooserCaptionText\", \"columnChooserDisplayText\", \"hiddenColumnIndicatorTooltipText\", \"columnHideText\", \"columnChooserShowText\", \"columnChooserHideText\", \"columnChooserHideOnClick\", \"columnChooserResetButtonLabel\", \"columnChooserAnimationDuration\", \"columnChooserButtonApplyText\", \"columnChooserButtonCancelText\", \"dialogWidget\", \"inherit\"],\n    outputs: [\"columnHiding\", \"columnHidingRefused\", \"columnShowingRefused\", \"multiColumnHiding\", \"columnHidden\", \"columnShowing\", \"columnShown\", \"columnChooserOpening\", \"columnChooserOpened\", \"columnChooserMoving\", \"columnChooserClosing\", \"columnChooserClosed\", \"columnChooserContentsRendering\", \"columnChooserContentsRendered\", \"columnChooserButtonApplyClick\", \"columnChooserButtonResetClick\"]\n})\nexport class IgGridHidingFeature extends Feature<IgGridHiding> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the hiding widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Shows the Column Chooser dialog. If it is visible the method does nothing.\n     */\n    /* istanbul ignore next */\n    public showColumnChooser(): void { return; };\n\n    /**\n     * Hides the Column Chooser dialog. If it is not visible the method does nothing.\n     */\n    /* istanbul ignore next */\n    public hideColumnChooser(): void { return; };\n\n    /**\n     * Shows a hidden column. If the column is not hidden the method does nothing.\n     * \t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.\n     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.\n     * @param callback    Specifies a custom function to be called when the column(s) is shown(optional)\n     */\n    /* istanbul ignore next */\n    public showColumn(column: Object, isMultiColumnHeader?: boolean, callback?: Function): void { return; };\n\n    /**\n     * Hides a visible column. If the column is hidden the method does nothing.\n     * \t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.\n     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.\n     * @param callback    Specifies a custom function to be called when the column is hidden(optional)\n     */\n    /* istanbul ignore next */\n    public hideColumn(column: Object, isMultiColumnHeader?: boolean, callback?: Function): void { return; };\n\n    /**\n     * Hides visible columns specified by the array. If the column is hidden the method does nothing.\n     * \t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.\n     * @param callback    Specifies a custom function to be called when all columns are hidden(optional)\n     */\n    /* istanbul ignore next */\n    public hideMultiColumns(columns: any[], callback?: Function): void { return; };\n\n    /**\n     * Show visible columns specified by the array. If the column is shown the method does nothing.\n     * \t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.\n     * @param callback    Specifies a custom function to be called when all columns are shown(optional)\n     */\n    /* istanbul ignore next */\n    public showMultiColumns(columns: any[], callback?: Function): void { return; };\n\n    /**\n     * Gets whether the reset button in the column chooser dialog is to be rendered or not.\n     */\n    /* istanbul ignore next */\n    public isToRenderButtonReset(): void { return; };\n\n    /**\n     * Reset hidden/shown column to initial state of dialog(when it is opened)\n     */\n    /* istanbul ignore next */\n    public resetHidingColumnChooser(): void { return; };\n\n    /**\n     * Renders the Reset button in the Column Chooser dialog.\n     */\n    /* istanbul ignore next */\n    public renderColumnChooserResetButton(): void { return; };\n\n    /**\n     * Remove Reset button in column chooser modal dialog\n     */\n    /* istanbul ignore next */\n    public removeColumnChooserResetButton(): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'cell-merging',\n    inputs: [\"disabled\", \"create\", \"initialState\", \"inherit\"],\n    outputs: [\"cellsMerging\", \"cellsMerged\"]\n})\nexport class IgGridCellMergingFeature extends Feature<IgGridCellMerging> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Feature } from \"../feature\";\nimport { ElementRef, Directive } from \"@angular/core\";\n\n@Directive({\n    selector: 'responsive',\n    inputs: [\"disabled\", \"create\", \"columnSettings\", \"reactOnContainerWidthChanges\", \"forceResponsiveGridWidth\", \"responsiveSensitivity\", \"responsiveModes\", \"enableVerticalRendering\", \"windowWidthToRenderVertically\", \"propertiesColumnWidth\", \"valuesColumnWidth\", \"allowedColumnWidthPerType\", \"singleColumnTemplate\", \"inherit\"],\n    outputs: [\"responsiveColumnHiding\", \"responsiveColumnHidden\", \"responsiveColumnShowing\", \"responsiveColumnShown\", \"responsiveModeChanged\"]\n})\nexport class IgGridResponsiveFeature extends Feature<IgGridResponsive> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the responsive widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the currently active responsive mode.\n     */\n    /* istanbul ignore next */\n    public getCurrentResponsiveMode(): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'resizing',\n    inputs: [\"disabled\", \"create\", \"allowDoubleClickToResize\", \"deferredResizing\", \"columnSettings\", \"handleThreshold\", \"inherit\"],\n    outputs: [\"columnResizing\", \"columnResizingRefused\", \"columnResized\"]\n})\nexport class IgGridResizingFeature extends Feature<IgGridResizing> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the resizing widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.\n     *\n     * @param column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.\n     * @param width    Width of the column in pixels or percents. If no width or \"*\" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).\n     */\n    /* istanbul ignore next */\n    public resize(column: Object, width?: Object): void { return; };\n}","import { Directive, ElementRef } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'selection',\n    inputs: [\"disabled\", \"create\", \"multipleSelection\", \"mouseDragSelect\", \"mode\", \"activation\", \"wrapAround\", \"skipChildren\", \"multipleCellSelectOnClick\", \"touchDragSelect\", \"persist\", \"allowMultipleRangeSelection\"],\n    outputs: [\"rowSelectionChanging\", \"rowSelectionChanged\", \"cellSelectionChanging\", \"cellSelectionChanged\", \"activeCellChanging\", \"activeCellChanged\", \"activeRowChanging\", \"activeRowChanged\"]\n})\nexport class IgGridSelectionFeature extends Feature<IgGridSelection> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the selection widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly\n     */\n    /* istanbul ignore next */\n    public clearSelection(): void { return; };\n\n    /**\n     * Selects a cell by row/col\n     *\n     * @param row     Row index\n     * @param col     Column index\n     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.\n     */\n    /* istanbul ignore next */\n    public selectCell(row: number, col: number, isFixed?: boolean): void { return; };\n\n    /**\n     * Selects a cell by row id/column key\n     *\n     * @param id     Row Id\n     * @param colKey     Column key\n     */\n    /* istanbul ignore next */\n    public selectCellById(id: Object, colKey: string): void { return; };\n\n    /**\n     * Deselects a cell by row/col\n     *\n     * @param row     Row index\n     * @param col     Column index\n     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.\n     */\n    /* istanbul ignore next */\n    public deselectCell(row: number, col: number, isFixed?: boolean): void { return; };\n\n    /**\n     * Deselects a cell by row id/column key\n     *\n     * @param id     Row Id\n     * @param colKey     Column key\n     */\n    /* istanbul ignore next */\n    public deselectCellById(id: Object, colKey: string): void { return; };\n\n    /**\n     * Selects a row by index\n     *\n     * @param index     Row index\n     */\n    /* istanbul ignore next */\n    public selectRow(index: number): void { return; };\n\n    /**\n     * Selects a row by row id\n     *\n     * @param id     Row Id\n     */\n    /* istanbul ignore next */\n    public selectRowById(id: Object): void { return; };\n\n    /**\n     * Deselects a row by index\n     *\n     * @param index     Row index\n     */\n    /* istanbul ignore next */\n    public deselectRow(index: number): void { return; };\n\n    /**\n     * Deselects a row by row id\n     *\n     * @param id     Row Id\n     */\n    /* istanbul ignore next */\n    public deselectRowById(id: Object): void { return; };\n\n    /**\n     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .\n     * \t\t\t\n     * \t\t\t\tIf multiple selection is disabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedCells(): any[] { return; };\n\n    /**\n     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .\n     * \t\t\t\n     * \t\t\t\tIf multiple selection is disabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedRows(): any[] { return; };\n\n    /**\n     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.\n     * \t\t\t\n     * \t\t\t\tIf multiple selection is enabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedCell(): Object { return; };\n\n    /**\n     * Returns the currently selected row that has the format { element: , index: }, if any.\n     * \t\t\t\n     * \t\t\t\tIf multiple selection is enabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedRow(): Object { return; };\n\n    /**\n     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.\n     */\n    /* istanbul ignore next */\n    public activeCell(): Object { return; };\n\n    /**\n     * Returns the currently active (focused) row that has the format { element: , index: }, if any.\n     */\n    /* istanbul ignore next */\n    public activeRow(): Object { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n@Directive({\n    selector: 'row-selectors',\n    inputs: [\"disabled\", \"create\", \"enableRowNumbering\", \"enableCheckBoxes\", \"rowNumberingSeed\", \"rowSelectorColumnWidth\", \"requireSelection\", \"showCheckBoxesOnFocus\", \"inherit\", \"enableSelectAllForPaging\", \"selectAllForPagingTemplate\", \"deselectAllForPagingTemplate\"],\n    outputs: [\"rowSelectorClicked\", \"checkBoxStateChanging\", \"checkBoxStateChanged\"]\n})\nexport class IgGridRowSelectorsFeature extends Feature<IgGridRowSelectors> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n\n@Directive({\n    selector: 'summaries',\n    inputs: [\"disabled\", \"create\", \"type\", \"dialogButtonOKText\", \"dialogButtonCancelText\", \"calculateRenderMode\", \"featureChooserText\", \"featureChooserTextHide\", \"compactRenderingMode\", \"defaultDecimalDisplay\", \"showSummariesButton\", \"summariesResponseKey\", \"summaryExprUrlKey\", \"callee\", \"dropDownHeight\", \"dropDownWidth\", \"showDropDownButton\", \"summaryExecution\", \"dropDownDialogAnimationDuration\", \"emptyCellText\", \"summariesHeaderButtonTooltip\", \"resultTemplate\", \"isGridFormatter\", \"renderSummaryCellFunc\", \"columnSettings\", \"inherit\"],\n    outputs: [\"dropDownOpening\", \"dropDownOpened\", \"dropDownClosing\", \"dropDownClosed\", \"summariesCalculating\", \"summariesCalculated\", \"summariesMethodSelectionChanged\", \"summariesToggling\", \"summariesToggled\", \"dropDownOKClicked\", \"dropDownCancelClicked\"]\n})\nexport class IgGridSummariesFeature extends Feature<IgGridSummaries> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns whether summaries rows are hidden\n     */\n    /* istanbul ignore next */\n    public isSummariesRowsHidden(): void { return; };\n\n    /**\n     * Calculate summaries\n     */\n    /* istanbul ignore next */\n    public calculateSummaries(): void { return; };\n\n    /**\n     * Remove all summaries dropdown buttons.\n     */\n    /* istanbul ignore next */\n    public clearAllFooterIcons(): void { return; };\n\n    /**\n     * Toggle drop down\n     *\n     * @param columnKey    toggle drop down for the column with the specified key\n     * @param event    event object. Its data should contain current columnKey, isAnimating, buttonId\n     */\n    /* istanbul ignore next */\n    public toggleDropDown(columnKey: string, event: Object): void { return; };\n\n    /**\n     * Show/Hide dialog\n     *\n     * @param $dialog     jQuery object representation of dropdown div element\n     */\n    /* istanbul ignore next */\n    public showHideDialog($dialog: Object): void { return; };\n\n    /**\n     * Toggle summaries rows\n     *\n     * @param isToShow    Specifies whether to show or not summaries\n     * @param isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.\n     */\n    /* istanbul ignore next */\n    public toggleSummariesRows(isToShow: boolean, isInternalCall: boolean): void { return; };\n\n    /**\n     * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.\n     *\n     * @param $checkbox     Specifies the jQuery object of the checkbox.\n     */\n    /* istanbul ignore next */\n    public toggleCheckstate($checkbox: Object): void { return; };\n\n    /**\n     * Select/Unselect specified checkbox\n     *\n     * @param $checkbox     Specifies the jQuery object for checkbox\n     * @param isToSelect     Specify whether to select or not checkbox\n     */\n    /* istanbul ignore next */\n    public selectCheckBox($checkbox: Object, isToSelect: boolean): void { return; };\n\n    /**\n     * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)\n     *\n     * @param ck    ColumnKey\n     * @param columnMethods    Array of column methods objects\n     * @param data    Object which represents result\n represents dataType for the current column\n    * @param dataType \n    */\n    /* istanbul ignore next */\n    public calculateSummaryColumn(ck: string, columnMethods: any[], data: Object, dataType: Object): void { return; };\n\n    /**\n     * Return a JQUERY object which holds all summaries for all columns\n     */\n    /* istanbul ignore next */\n    public summaryCollection(): void { return; };\n\n    /**\n     * Return a JQUERY object which holds all summaries for column with the specified column key\n     *\n     * @param columnKey \n     */\n    /* istanbul ignore next */\n    public summariesFor(columnKey: Object): void { return; };\n}","import { ElementRef, Directive } from \"@angular/core\";\nimport { Feature } from \"../feature\";\n\n\n@Directive({\n    selector: 'column-fixing',\n    inputs: [\"disabled\", \"create\", \"headerFixButtonText\", \"headerUnfixButtonText\", \"showFixButtons\", \"syncRowHeights\", \"scrollDelta\", \"fixingDirection\", \"columnSettings\", \"featureChooserTextFixedColumn\", \"featureChooserTextUnfixedColumn\", \"minimalVisibleAreaWidth\", \"fixNondataColumns\", \"populateDataRowsAttributes\"],\n    outputs: [\"columnFixing\", \"columnFixed\", \"columnUnfixing\", \"columnUnfixed\", \"columnFixingRefused\", \"columnUnfixingRefused\"]\n})\nexport class IgGridColumnFixingFeature extends Feature<IgGridColumnFixing> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Unfixes a column by specified column identifier - column key or column index.\n     *\n     * @param colIdentifier    An identifier of the column to be unfixed - column index or column key.\n     * @param target    Key of the column where the unfixed column should move to.\n     * @param after    Specifies where the unfixed column should be rendered after or before the target column. This parameter is disregarded if there is no target column specified.\n     */\n    /* istanbul ignore next */\n    public unfixColumn(colIdentifier: Object, target?: string, after?: boolean): Object { return; };\n\n    /**\n     * Checks whether the heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.\n     */\n    /* istanbul ignore next */\n    public checkAndSyncHeights(): void { return; };\n\n    /**\n     * If the 'check' argument is set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. Similar check is made for heights of table rows. If the clearRowsHeights argument is set to true, clears rows heights before syncing them.\n     *\n     * @param check    If set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. If this argument is set to false sync is performed regardless of the current heights.\n     * @param clearRowsHeights    Clears row heigths for all visible rows.\n     */\n    /* istanbul ignore next */\n    public syncHeights(check?: boolean, clearRowsHeights?: boolean): void { return; };\n\n    /**\n     * Returns whether the column with the specified key is a column group header, when the [multi-column headers](http://www.igniteui.com/help/iggrid-multicolumnheaders-landingpage) feature is used.\n     *\n     * @param colKey    The key of the column to perform the check for.\n     */\n    /* istanbul ignore next */\n    public isGroupHeader(colKey: string): boolean { return; };\n\n    /**\n     * Checks whether column fixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the unfixed area.\n     *\n     * @param columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.\n     */\n    /* istanbul ignore next */\n    public checkFixingAllowed(columns: any[]): boolean { return; };\n\n    /**\n     * Checks whether unfixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the fixed area.\n     *\n     * @param columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.\n     */\n    /* istanbul ignore next */\n    public checkUnfixingAllowed(columns: any[]): boolean { return; };\n\n    /**\n     * Fixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.\n     */\n    /* istanbul ignore next */\n    public fixNonDataColumns(): void { return; };\n\n    /**\n     * This function is deprecated - use function fixNonDataColumns.\n     */\n    /* istanbul ignore next */\n    public fixDataSkippedColumns(): void { return; };\n\n    /**\n     * Unfixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.\n     */\n    /* istanbul ignore next */\n    public unfixNonDataColumns(): void { return; };\n\n    /**\n     * This function is deprecated - use function unfixNonDataColumns.\n     */\n    /* istanbul ignore next */\n    public unfixDataSkippedColumns(): void { return; };\n\n    /**\n     * Unfixes all fixed columns.\n     */\n    /* istanbul ignore next */\n    public unfixAllColumns(): void { return; };\n\n    /**\n     * Syncs rows heights between two collections of rows.\n     *\n     * @param $trs    An array of rows of the first(fixed/unfixed) container.\n     * @param $anotherRows    An array of rows of the second(fixed/unfixed) container.\n     */\n    /* istanbul ignore next */\n    public syncRowsHeights($trs: any[], $anotherRows: any[]): void { return; };\n\n    /**\n     * Calculates widths of the fixed columns.\n     *\n     * @param fCols    Array of grid columns. If not set then the total width of the fixed columns are returned.\n     * @param excludeNonDataColumns    If set to true do not calculate the width of non-data fixed columns (like the row selector row numbering column).\n     * @param includeHidden    If set to true calculates width of the hidden fixed columns (their initial width before hiding).\n     */\n    /* istanbul ignore next */\n    public getWidthOfFixedColumns(fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number { return; };\n\n    /**\n     * Destroys the column fixing widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Feature } from \"../feature\";\nimport { ElementRef, Directive } from \"@angular/core\";\n\n@Directive({\n    selector: 'tooltips',\n    inputs: [\"disabled\", \"create\", \"visibility\", \"style\", \"showDelay\", \"hideDelay\", \"columnSettings\", \"fadeTimespan\", \"cursorLeftOffset\", \"cursorTopOffset\", \"inherit\"],\n    outputs: [\"tooltipShowing\", \"tooltipShown\", \"tooltipHiding\", \"tooltipHidden\"]\n})\nexport class IgGridTooltipsFeature extends Feature<IgGridTooltips> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the tooltip widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the ID of the parent div element bounding the ruler and the tooltip container\n     */\n    /* istanbul ignore next */\n    public id(): string { return; };\n}","import { Feature } from \"../feature\";\nimport { ElementRef, Directive } from \"@angular/core\";\n\n@Directive({\n    selector: 'append-rows-on-demand',\n    inputs: [\"type\", \"chunkSize\", \"recordCountKey\", \"chunkSizeUrlKey\", \"chunkIndexUrlKey\", \"defaultChunkIndex\", \"currentChunkIndex\", \"loadTrigger\", \"loadMoreDataButtonText\"],\n    outputs: [\"rowsRequesting\", \"rowsRequested\"]\n})\nexport class IgGridAppendRowsOnDemandFeature extends Feature<IgGridAppendRowsOnDemand> {\n    constructor(el: ElementRef) {\n        super(el);\n    }\n\n    /**\n     * Destroys the append rows on demand widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Loads the next chunk of data.\n     */\n    /* istanbul ignore next */\n    public nextChunk(): void { return; };\n}","import { Directive, AfterContentInit, ContentChild, ElementRef } from \"@angular/core\";\nimport { IgGridSortingFeature } from \"./iggridfeatures/iggridsorting.directive\";\nimport { IgGridFilteringFeature } from \"./iggridfeatures/iggridfiltering.directive\";\nimport { IgGridPagingFeature } from \"./iggridfeatures/iggridpaging.directive\";\nimport { IgGridUpdatingFeature } from \"./iggridfeatures/iggridupdating.directive\";\nimport { IgGridGroupByFeature } from \"./iggridfeatures/iggridgroupby.directive\";\nimport { IgGridColumnMovingFeature } from \"./iggridfeatures/iggridcolumnmoving\";\nimport { IgGridHidingFeature } from \"./iggridfeatures/iggridhiding.directive\";\nimport { IgGridCellMergingFeature } from \"./iggridfeatures/iggridcellmerging.directive\";\nimport { IgGridResponsiveFeature } from \"./iggridfeatures/iggridresponsive.directive\";\nimport { IgGridResizingFeature } from \"./iggridfeatures/iggridresizing.directive\";\nimport { IgGridSelectionFeature } from \"./iggridfeatures/iggridselection.directive\";\nimport { IgGridRowSelectorsFeature } from \"./iggridfeatures/iggridrowselectors.directive\";\nimport { IgGridSummariesFeature } from \"./iggridfeatures/iggridsummaries.directive\";\nimport { IgGridColumnFixingFeature } from \"./iggridfeatures/iggridcolumnfixing.directive\";\nimport { IgGridTooltipsFeature } from \"./iggridfeatures/iggridtooltips.directive\";\nimport { IgGridAppendRowsOnDemandFeature } from \"./iggridfeatures/iggridappendrowsondemand.directive\";\nimport { IgGridMultiColumnHeadersFeature } from \"./iggridfeatures/iggridmulticolumnheaders.directive\";\n\n@Directive({\n\tselector: 'features'\n})\nexport class Features implements AfterContentInit {\n\tpublic allFeatures:Array<any> = new Array<any>()\n\n\t@ContentChild(IgGridSortingFeature, {static: true}) sorting: IgGridSortingFeature;\n\t@ContentChild(IgGridFilteringFeature, {static: true}) filtering: IgGridFilteringFeature;\n\t@ContentChild(IgGridPagingFeature, {static: true}) paging: IgGridPagingFeature;\n\t@ContentChild(IgGridUpdatingFeature, {static: true}) updating: IgGridUpdatingFeature;\n\t@ContentChild(IgGridGroupByFeature, {static: true}) groupBy: IgGridGroupByFeature;\n\t@ContentChild(IgGridColumnMovingFeature, {static: true}) columnMoving: IgGridColumnMovingFeature;\n\t@ContentChild(IgGridHidingFeature, {static: true}) hiding: IgGridHidingFeature;\n\t@ContentChild(IgGridCellMergingFeature, {static: true}) cellMerging: IgGridCellMergingFeature;\n\t@ContentChild(IgGridResponsiveFeature, {static: true}) responsive: IgGridResponsiveFeature;\n\t@ContentChild(IgGridResizingFeature, {static: true}) resizing: IgGridResizingFeature;\n\t@ContentChild(IgGridSelectionFeature, {static: true}) selection: IgGridSelectionFeature;\n\t@ContentChild(IgGridRowSelectorsFeature, {static: true}) rowSelectors: IgGridRowSelectorsFeature;\n\t@ContentChild(IgGridSummariesFeature, {static: true}) summaries: IgGridSummariesFeature;\n\t@ContentChild(IgGridColumnFixingFeature, {static: true}) columnFixing: IgGridColumnFixingFeature;\n\t@ContentChild(IgGridTooltipsFeature, {static: true}) tooltips: IgGridTooltipsFeature;\n\t@ContentChild(IgGridAppendRowsOnDemandFeature, {static: true}) appendRowsOnDemand: IgGridAppendRowsOnDemandFeature;\n\t@ContentChild(IgGridMultiColumnHeadersFeature, {static: true}) multiColumnHeaders: IgGridMultiColumnHeadersFeature;\n\n\taddFeature(name, parent){\n\t\tvar nodeName = name.replace(/([A-Z])/g, function (g) { return '-' + g[0].toLowerCase() });\n\t\tvar el = document.createElement(nodeName);\n\t\tel = parent.appendChild(el);\n\t\tvar child = new ElementRef(el);\t\n\t\t\n\t\tswitch(nodeName) {\n\t\t\tcase \"filtering\": this.filtering = new IgGridFilteringFeature(child);break;\n\t\t\tcase \"sorting\":\tthis.sorting = new IgGridSortingFeature(child); break;\n\t\t\tcase \"paging\": this.paging = new IgGridPagingFeature(child); break;\n\t\t\tcase \"updating\": this.updating = new IgGridUpdatingFeature(child); break;\n\t\t\tcase \"group-by\": this.groupBy = new IgGridGroupByFeature(child); break;\n\t\t\tcase \"column-moving\": this.columnMoving = new IgGridColumnMovingFeature(child); break;\n\t\t\tcase \"hiding\": this.hiding = new IgGridHidingFeature(child); break;\n\t\t\tcase \"responsive\": this.responsive = new IgGridResponsiveFeature(child); break;\n\t\t\tcase \"cell-merging\": this.cellMerging = new IgGridCellMergingFeature(child); break;\n\t\t\tcase \"resizing\": this.resizing = new IgGridResizingFeature(child); break;\n\t\t\tcase \"selection\": this.selection = new IgGridSelectionFeature(child); break;\n\t\t\tcase \"row-selectors\": this.rowSelectors = new IgGridRowSelectorsFeature(child); break;\n\t\t\tcase \"summaries\": this.summaries = new IgGridSummariesFeature(child); break;\n\t\t\tcase \"column-fixing\": this.columnFixing = new IgGridColumnFixingFeature(child); break;\n\t\t\tcase \"tooltips\": this.tooltips = new IgGridTooltipsFeature(child); break;\n\t\t\tcase \"append-rows-on-demand\": this.appendRowsOnDemand = new IgGridAppendRowsOnDemandFeature(child); break;\n\t\t\tcase \"multi-column-headers\": this.multiColumnHeaders = new IgGridMultiColumnHeadersFeature(child); break;\n\t\t}\n\t\tthis[name].ngOnInit();\n\t\tthis.allFeatures.push(this[name]);\n\n\t}\n  \tngAfterContentInit() {\n\t\t  \t\tthis.filtering ? this.allFeatures.push(this.filtering): null;\n\t\t\t   \tthis.sorting ? this.allFeatures.push(this.sorting): null;\n\t\t\t\tthis.paging ? this.allFeatures.push(this.paging): null;\n\t\t\t\tthis.updating ? this.allFeatures.push(this.updating): null;\n\t\t\t\tthis.groupBy ? this.allFeatures.push(this.groupBy): null;\n\t\t\t\tthis.columnMoving ? this.allFeatures.push(this.columnMoving): null;\n\t\t\t\tthis.hiding ? this.allFeatures.push(this.hiding): null;\n\t\t\t\tthis.responsive ? this.allFeatures.push(this.responsive): null;\n\t\t\t\tthis.cellMerging ? this.allFeatures.push(this.cellMerging): null;\n\t\t\t\tthis.resizing ? this.allFeatures.push(this.resizing): null;\n\t\t\t\tthis.selection ? this.allFeatures.push(this.selection): null;\n\t\t\t\tthis.rowSelectors ? this.allFeatures.push(this.rowSelectors): null;\n\t\t\t\tthis.summaries ? this.allFeatures.push(this.summaries): null;\n\t\t\t\tthis.columnFixing ? this.allFeatures.push(this.columnFixing): null;\n\t\t\t\tthis.tooltips ? this.allFeatures.push(this.tooltips): null;\n\t\t\t\tthis.appendRowsOnDemand ? this.allFeatures.push(this.appendRowsOnDemand): null;\n\t\t\t\tthis.multiColumnHeaders ? this.allFeatures.push(this.multiColumnHeaders): null;\n  }\n}","import { ElementRef, EventEmitter, Renderer, IterableDiffers, DoCheck, SimpleChanges, Input, ChangeDetectorRef, KeyValueDiffers } from '@angular/core';\n\ndeclare var jQuery: any;\n\nvar NODES = {\n    \"ig-text-editor\": \"div\",\n    \"ig-numeric-editor\": \"input\",\n    \"ig-percent-editor\": \"input\",\n    \"ig-mask-editor\": \"input\",\n    \"ig-date-picker\": \"input\",\n    \"ig-time-picker\": \"input\",\n    \"ig-date-editor\": \"input\",\n    \"ig-currency-editor\": \"input\",\n    \"ig-checkbox-editor\": \"input\",\n    \"ig-html-editor\": \"div\",\n    \"ig-combo\": \"input\",\n    \"ig-grid\": \"table\",\n    \"ig-tree-grid\": \"table\",\n    \"ig-hierarchical-grid\": \"table\",\n    \"ig-pivot-data-selector\": \"div\",\n    \"ig-pivot-grid\": \"table\",\n    \"ig-data-chart\": \"div\",\n    \"ig-pie-chart\": \"div\",\n    \"ig-doughnut-chart\": \"div\",\n    \"ig-funnel-chart\": \"div\",\n    \"ig-radial-gauge\": \"div\",\n    \"ig-sparkline\": \"div\",\n    \"ig-zoombar\": \"div\",\n    \"ig-map\": \"div\",\n    \"ig-bullet-graph\": \"div\",\n    \"ig-linear-gauge\": \"div\",\n    \"ig-q-r-code-barcode\": \"div\",\n    \"ig-validator\": \"div\",\n    \"ig-upload\": \"div\",\n    \"ig-popover\": \"div\",\n    \"ig-rating\": \"div\",\n    \"ig-video-player\": \"div\",\n    \"ig-radial-menu\": \"div\",\n    \"ig-split-button\": \"div\",\n    \"ig-notifier\": \"div\",\n    \"ig-tree\": \"div\",\n    \"ig-dialog\": \"div\",\n    \"ig-splitter\": \"div\",\n    \"ig-layout-manager\": \"div\",\n    \"ig-tile-manager\": \"div\",\n    \"ig-spreadsheet\": \"div\",\n    \"ig-scheduler\": \"div\"\n};\n\nexport class IgControlBase<Model> implements DoCheck {\n    @Input()\n    public options: any = {};\n\n    protected _differs: any;\n    protected _el: any;\n    protected _widgetName: string;\n    protected _differ: any;\n    protected _optsDiffer: any;\n    protected _kvalDiffers: any;\n    protected _events: Map<string, string>;\n    private _evtEmmiters: any = {};\n    private _nativeElement: any;\n    public widgetId: string;\n\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, public kvalDiffers: KeyValueDiffers, public cdr: ChangeDetectorRef) {\n        this._differs = differs;\n        this._nativeElement = el.nativeElement;\n        this._widgetName = this.convertToCamelCase(el.nativeElement.nodeName.toLowerCase());//ig-grid -> igGrid\n        this._el = el.nativeElement.appendChild(document.createElement(NODES[el.nativeElement.nodeName.toLowerCase()]));\n\n        for (var propt in jQuery.ui[this._widgetName].prototype.events) {\n            this[propt] = new EventEmitter();\n            //cahcing the event emmitters for cases when the event name is the same as a method name.\n            this._evtEmmiters[propt] = this[propt];\n        }\n    }\n\n    createSetter(name) {\n        return function (value) {\n            this.options[name] = value;\n            if (this._config) {\n                this._config[name] = value;\n            }\n            if (jQuery.ui[this._widgetName] &&\n                jQuery.ui[this._widgetName].prototype.options &&\n                jQuery.ui[this._widgetName].prototype.options.hasOwnProperty(name) &&\n                jQuery(this._el).data(this._widgetName)) {\n                jQuery(this._el)[this._widgetName](\"option\", name, value);\n            }\n        }\n    }\n\n    ngOnInit() {\n        var evtName;\n        let that = this;\n        this._events = new Map<string, string>();\n\n        for (var opt in jQuery.ui[this._widgetName].prototype.options) {\n            //copy root level options into this.options\n            if (this[opt] && typeof this[opt] !== \"function\") {\n                this.options[opt] = this[opt];\n            }\n        }\n\n        for (var opt in jQuery.ui[this._widgetName].prototype.options) {\n            if (opt !== \"dataSource\") {\n                Object.defineProperty(this, opt, {\n                    set: this.createSetter(opt),\n                    enumerable: true,\n                    configurable: true\n                });\n            }\n        }\n\n        var propNames = jQuery.ui[this._widgetName].prototype;\n        for (var name in propNames) {\n            if (name.indexOf(\"_\") !== 0 && typeof jQuery.ui[this._widgetName].prototype[name] === \"function\"\n                && name !== \"dataSource\") {\n                Object.defineProperty(that, name, {\n                    get: that.createMethodGetter(name)\n                });\n            }\n        }\n        //events binding\n        for (var propt in jQuery.ui[this._widgetName].prototype.events) {\n            evtName = this._widgetName.toLowerCase() + propt.toLowerCase();\n            this._events[evtName] = propt;\n            jQuery(this._el).on(evtName, function (evt, ui) {\n                var emmiter = that._evtEmmiters[that._events[evt.type]];\n                emmiter.emit({ event: evt, ui: ui });\n            });\n        }\n\n        jQuery(this._el).attr(\"id\", this.widgetId);\n        jQuery(this._el)[this._widgetName](this.options);\n    }\n    createMethodGetter(name) {\n        return function () {\n            var widget = jQuery(this._el).data(this._widgetName);\n            return jQuery.proxy(widget[name], widget);\n        }\n    }\n\n    ngDoCheck() {\n        if (this._optsDiffer) {\n            const changes = this._optsDiffer.diff(this.options);\n            if (changes) {\n                changes.forEachChangedItem((change: any) => {\n                    this[change.key] = change.currentValue;\n                });\n            }\n        }\n    }\n    public ngOnChanges(changes: SimpleChanges): void {\n        const opts = \"options\";\n        if (opts in changes) {\n            const value = changes[opts].currentValue;\n            //options have been changed. Destroy and re-create widget.\n            if (jQuery(this._el).data(this._widgetName)) {\n                jQuery(this._el)[this._widgetName](\"destroy\");\n                jQuery(this._el)[this._widgetName](this.options);\n            }\n            try {\n                this._optsDiffer = this.kvalDiffers.find({}).create();\n            } catch (e) {\n                throw new Error(\"Only binding to object is supported for options property.\");\n            }\n        }\n    }\n    public markForCheck() {\n        this.cdr.markForCheck();\n    }\n\n    convertToCamelCase(str) {\n        //convert hyphen to camelCase\n        return str.replace(/-([a-z])/g, function (group) {\n            return group[1].toUpperCase();\n        });\n    }\n\n    ngOnDestroy() {\n        // igZoombar should be attached to body when being destroyed\n        if (this._widgetName !== \"igZoombar\" || document.body.contains(this._el)) {\n            jQuery(this._el)[this._widgetName](\"destroy\");\n            jQuery(this._el).remove();\n            jQuery(this._nativeElement).remove();\n        }\n    }\n}","import { IgControlBase } from '../igcontrolbase/igcontrolbase';\nimport { AfterContentInit, QueryList, ContentChild, ContentChildren, ElementRef, Renderer, KeyValueDiffers, IterableDiffers, SimpleChanges, Input, ChangeDetectorRef } from '@angular/core';\nimport { Column } from './column.directive';\nimport { Features } from './features.directive';\n\nexport class IgGridBase<Model> extends IgControlBase<Model> implements AfterContentInit {\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const grid = jQuery(this._el).data(this._widgetName);\n        if (grid) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n    protected _changes: any;\n    @ContentChildren(Column) _columns: QueryList<Column>;\n    @ContentChild(Features, {static: true}) featuresList: Features;\n    private _dataSource;\n\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n    }\n    ngAfterContentInit() {\n        if (this._columns && this._columns.length) {\n            if (this.options) {\n                this.options[\"columns\"] = this._columns.map((c) => c._settings);\n            }\n        }\n        if (this.featuresList) {\n            if (this.options) {\n                this.options[\"features\"] = this.featuresList.allFeatures.map((c) => { return c.initSettings; });\n            }\n        }\n        if (this.options && this.options[\"features\"] && !this.featuresList) {\n            this.featuresList = new Features();\n            //populate featuresList\n            for (var i = 0; i < this.options[\"features\"].length; i++) {\n                var featureName = this.options[\"features\"][i].name.charAt(0).toLowerCase() + this.options[\"features\"][i].name.slice(1);\n                this.featuresList.addFeature(featureName, this._el);\n            }\n        }\n        super.ngOnInit();\n    }\n\n    createDataSource(value: any) {\n        return jQuery.extend(true, [], value);\n    }\n\n    deleteRow(id, index) {\n        var element = jQuery(this._el),\n            tr = element.find(\"tr[data-id='\" + id + \"']\");\n\n        if (tr.length > 0) {\n            tr.remove();\n            jQuery(this._el).data(this._widgetName).dataSource.deleteRow(id, true);\n            jQuery(this._el).data(this._widgetName).dataSource._removeTransactionsByRecordId(id);\n        }\n        this._changes.splice(index, 1);\n    }\n\n    addRow(rowData, index) {\n        var grid, pkKey = this[\"primaryKey\"] || this.options[\"primaryKey\"],\n            existingDomRow = jQuery(this._el).find(\"tr[data-id='\" + rowData[pkKey] + \"']\"),\n            widgetName = this._widgetName, existingRow, t;\n\n        if (this._widgetName === \"igHierarchicalGrid\") {\n            widgetName = \"igGrid\";\n        }\n\n        grid = jQuery(this._el).data(widgetName);\n\n        if (existingDomRow.length === 0) {\n            grid.renderNewRow(rowData, rowData[pkKey]);\n        }\n\n        existingRow = grid.dataSource.findRecordByKey(rowData[pkKey]);\n        if (!existingRow) {\n            // add the row without affecting the original DS (scope source) \n            // TODO: trigger rowAdded event?\n            grid.dataSource._addRow(rowData, index);\n            //add transaction\n            t = grid.dataSource._createNewRowTransaction(rowData[pkKey], rowData);\n            grid.dataSource._addTransaction(t);\n            grid.dataSource._removeTransactionByTransactionId(t.tid);\n        }\n        this._changes.push(this.kvalDiffers.find({}).create());\n    }\n    updateRow(rec, currValue, key) {\n        const pkKey = this[\"primaryKey\"] || this.options[\"primaryKey\"];\n        let widgetName = this._widgetName;\n        if (this._widgetName === \"igHierarchicalGrid\") {\n            widgetName = \"igGrid\";\n        }\n        const element = jQuery(this._el);\n        const grid = element.data(widgetName);\n        const tr = element.find(\"tr[data-id='\" + rec[pkKey] + \"']\");\n        const column = grid.columnByKey(key);\n        let newFormattedVal;\n        let td;\n        if (column) {\n            if (column.template) {\n                newFormattedVal = grid._renderTemplatedCell(rec, column);\n            } else {\n                newFormattedVal = grid._renderCell(currValue, column, rec);\n            }\n            td = grid._getCellsByColKey(element.find(\"tr[data-id='\" + rec[pkKey] + \"']\"), key);\n            //if current cell is still in edit mode, exit it.\n            if (jQuery(td).find(\"input.ui-igedit-input\").length > 0) {\n                element.data(\"igGridUpdating\").endEdit();\n            }\n            jQuery(td).html(newFormattedVal);\n            if (grid.options.localSchemaTransform) {\n                rec = grid.dataSource.schema().transform([rec])[0];\n            }\n\n            grid.dataSource.updateRow(rec[pkKey], rec);\n            grid.dataSource._commitTransactionsByRowId(rec[pkKey]);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        const ds = \"dataSource\";\n        if (ds in changes) {\n            const value = changes[ds].currentValue;\n            if (value) {\n                try {\n                    this._differ = this._differs.find(value).create();\n                    this._changes = [];\n                    for (var i = 0; i < this._dataSource.length; i++) {\n                        this._changes.push(this.kvalDiffers.find({}).create());\n                    }\n                }\n                catch (e) {\n                    throw new Error(\"Only binding to arrays is supported.\");\n                }\n            }\n        }\n        super.ngOnChanges(changes);\n    }\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this._dataSource);\n            //check if grid is initialized\n            const grid = jQuery(this._el).data(this._widgetName);\n            if (changes && grid) {\n                this.dataSourceApplyChanges(changes);\n            }\n            if (changes && changes.isDirty && grid) {\n                //data source has been changed post initialization.\n                jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n            }\n            if (this._changes && grid) {\n                const pkKey = this[\"primaryKey\"] || this.options[\"primaryKey\"];\n                //check recs\n                for (var i = 0; i < this._dataSource.length; i++) {\n                    var item = this._dataSource[i];\n                    var rowChanges = this._changes[i].diff(item);\n                    if (rowChanges) {\n                        rowChanges.forEachChangedItem((change: any) => {\n                            this.updateRow(item, change.currentValue, change.key);\n                        });\n                    }\n                }\n            }\n        }\n        super.ngDoCheck();\n    }\n    public dataSourceApplyChanges(changes) {\n        const pkKey = this[\"primaryKey\"] || this.options[\"primaryKey\"];\n        changes.forEachAddedItem(r => this.addRow(r.item, r.currentIndex));\n        changes.forEachRemovedItem(r => { this.deleteRow(r.item[pkKey], r.previousIndex); });\n    }\n\n    allRows() { };\n}\n","import { Component, ElementRef, Renderer, KeyValueDiffers, IterableDiffers, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { IgGridBase } from './iggridbase';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    \"selector\": \"ig-grid\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"autoAdjustHeight\", \"avgRowHeight\", \"avgColumnWidth\", \"defaultColumnWidth\", \"autoGenerateColumns\", \"virtualization\", \"virtualizationMode\", \"requiresDataBinding\", \"rowVirtualization\", \"columnVirtualization\", \"virtualizationMouseWheelStep\", \"adjustVirtualHeights\", \"templatingEngine\", \"columns\", \"dataSource\", \"dataSourceUrl\", \"dataSourceType\", \"responseDataKey\", \"responseTotalRecCountKey\", \"requestType\", \"responseContentType\", \"showHeader\", \"showFooter\", \"fixedHeaders\", \"fixedFooters\", \"caption\", \"features\", \"tabIndex\", \"localSchemaTransform\", \"primaryKey\", \"serializeTransactionLog\", \"autoCommit\", \"aggregateTransactions\", \"autoFormat\", \"renderCheckboxes\", \"updateUrl\", \"restSettings\", \"alternateRowStyles\", \"autofitLastColumn\", \"enableHoverStyles\", \"enableUTCDates\", \"mergeUnboundColumns\", \"jsonpRequest\", \"enableResizeContainerCheck\", \"featureChooserIconDisplay\", \"scrollSettings\"],\n    outputs: [\"cellClick\", \"cellRightClick\", \"dataBinding\", \"dataBound\", \"rendering\", \"rendered\", \"dataRendering\", \"dataRendered\", \"headerRendering\", \"headerRendered\", \"footerRendering\", \"footerRendered\", \"headerCellRendered\", \"rowsRendering\", \"rowsRendered\", \"schemaGenerated\", \"columnsCollectionModified\", \"requestError\", \"created\", \"destroyed\"]\n})\nexport class IgGridComponent extends IgGridBase<IgGrid> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiff: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiff, cdr); }\n\n    /**\n     * Returns the element holding the data records\n     */\n    /* istanbul ignore next */\n    public widget(): void { return; };\n\n    /**\n     * Returns whether grid has non-data fixed columns(e.g. row selectors column)\n     */\n    /* istanbul ignore next */\n    public hasFixedDataSkippedColumns(): boolean { return; };\n\n    /**\n     * Returns true if grid has at least one fixed columns(even if a non-data column - like row-selectors column)\n     */\n    /* istanbul ignore next */\n    public hasFixedColumns(): boolean { return; };\n\n    /**\n     * Returns the current fixing direction. NOTE - use only if ColumnFixing feature is enabled\n     * @return left|right     \n     */\n    /* istanbul ignore next */\n    public fixingDirection(): string { return; };\n\n    /**\n     * Returns whether the column with identifier colKey is fixed\n     *\n     * @param colKey     An identifier of the column which should be checked. It can be a key or visible index.\n     */\n    /* istanbul ignore next */\n    public isFixedColumn(colKey: Object): boolean { return; };\n\n    /**\n     * Called to detect whether grid container is resized. When autoAdjustHeight is true and height of the grid is changed then the height of grid is re-set.\n     */\n    /* istanbul ignore next */\n    public resizeContainer(): void { return; };\n\n    /**\n     * Returns whether the header identified by colKey is multicolumn header(has children)\n     *\n     * @param colKey     value of the column key\n     */\n    /* istanbul ignore next */\n    public isGroupHeader(colKey: string): Object { return; };\n\n    /**\n     * Returns an object that contains information on the passed Dom element\n     * \t\t\n     * \t\t\t\trowId - the id of the record associated with the element - if primaryKey is not set this will be null.\n     * \t\t\t\trowIndex - the index (in the DOM) of the row associated with the element.\n     * \t\t\t\trecordIndex - index of the data record associated with this element in the current dataView.\n     * \t\t\t\tcolumnObject  - the column object associated with this element ( if the element is tr this will be null)\n     *\n     * @param elem    The Dom element or jQuery object which can be a TD or TR element from the grid.\n     */\n    /* istanbul ignore next */\n    public getElementInfo(elem: Element): Object { return; };\n\n    /**\n     * Returns the ID of the TABLE element where data records are rendered\n     */\n    /* istanbul ignore next */\n    public id(): string { return; };\n\n    /**\n     * Returns the DIV that is the topmost container of the grid widget\n     */\n    /* istanbul ignore next */\n    public container(): Element { return; };\n\n    /**\n     * Returns the table that contains the header cells\n     */\n    /* istanbul ignore next */\n    public headersTable(): Element { return; };\n\n    /**\n     * Returns the table that contains the footer cells\n     */\n    /* istanbul ignore next */\n    public footersTable(): Element { return; };\n\n    /**\n     * Returns the DIV that is used as a scroll container for the grid contents\n     */\n    /* istanbul ignore next */\n    public scrollContainer(): Element { return; };\n\n    /**\n     * Returns the DIV that is the topmost container of the fixed grid - contains fixed columns(in ColumnFixing scenario)\n     */\n    /* istanbul ignore next */\n    public fixedContainer(): Element { return; };\n\n    /**\n     * Returns the DIV that is the topmost container of the fixed body grid - contains fixed columns(in ColumnFixing scenario)\n     */\n    /* istanbul ignore next */\n    public fixedBodyContainer(): Element { return; };\n\n    /**\n     * Returns container(jQuery representation) containing fixed footer - contains fixed columns(in ColumnFixing scenario)\n     */\n    /* istanbul ignore next */\n    public fixedFooterContainer(): Object { return; };\n\n    /**\n     * Returns container(jQuery representation) containing fixed header - contains fixed columns(in ColumnFixing scenario)\n     */\n    /* istanbul ignore next */\n    public fixedHeaderContainer(): Object { return; };\n\n    /**\n     * Returns the table that contains the FIXED header cells - contains fixed columns(in ColumnFixing scenario)\n     */\n    /* istanbul ignore next */\n    public fixedHeadersTable(): Element { return; };\n\n    /**\n     * Returns the table that contains the footer cells - contains fixed columns(in ColumnFixing scenario)\n     */\n    /* istanbul ignore next */\n    public fixedFootersTable(): Element { return; };\n\n    /**\n     * Returns the cell TD element at the specified location\n     *\n     * @param x     The column index.\n     * @param y     The row index.\n     * @param isFixed     Optional parameter - if true get cell TD at the specified location from the fixed table\n     */\n    /* istanbul ignore next */\n    public cellAt(x: number, y: number, isFixed: boolean): Element { return; };\n\n    /**\n     * Returns the cell TD element by row id and column key\n     *\n     * @param rowId     The id of the row.\n     * @param columnKey     The column key.\n     */\n    /* istanbul ignore next */\n    public cellById(rowId: Object, columnKey: string): Element { return; };\n\n    /**\n     * Returns the fixed table - contains fixed columns(in ColumnFixing scenario). If there aren't fixed columns returns the grid table\n     */\n    /* istanbul ignore next */\n    public fixedTable(): Object { return; };\n\n    /**\n     * Gets all immediate children of the current grid\n     */\n    /* istanbul ignore next */\n    public immediateChildrenWidgets(): any[] { return; };\n\n    /**\n     * Gets all children of the current grid, recursively\n     */\n    /* istanbul ignore next */\n    public childrenWidgets(): any[] { return; };\n\n    /**\n     * Gets all children's elements of the current grid, recursively\n     */\n    /* istanbul ignore next */\n    public children(): any[] { return; };\n\n    /**\n     * Gets all immediate children's elements of the current grid\n     */\n    /* istanbul ignore next */\n    public immediateChildren(): any[] { return; };\n\n    /**\n     * Returns the row (TR element) at the specified index. jQuery selectors aren't used for performance reasons\n     *\n     * @param i     The row index.\n     */\n    /* istanbul ignore next */\n    public rowAt(i: number): Element { return; };\n\n    /**\n     * Returns the row TR element by row id\n     *\n     * @param rowId     The id of the row.\n     * @param isFixed     Specify search in the fixed container.\n     */\n    /* istanbul ignore next */\n    public rowById(rowId: Object, isFixed?: boolean): Element { return; };\n\n    /**\n     * Returns the fixed row (TR element) at the specified index. jQuery selectors aren't used for performance reasons(in ColumnFixing scenario - only when there is at least one fixed column)\n     *\n     * @param i     The row index.\n     */\n    /* istanbul ignore next */\n    public fixedRowAt(i: number): Element { return; };\n\n    /**\n     * Returns a list of all fixed TR elements holding data in the grid(in ColumnFixing scenario - only when there is at least one fixed column)\n     */\n    /* istanbul ignore next */\n    public fixedRows(): any[] { return; };\n\n    /**\n     * Returns a list of all TR elements holding data in the grid(when there is at least one fixed column returns rows only in the UNFIXED table)\n     */\n    /* istanbul ignore next */\n    public rows(): any[] { return; };\n\n    /**\n     * Returns all data fixed rows recursively, not only the immediate ones(in ColumnFixing scenario - only when there is at least one fixed column)\n     */\n    /* istanbul ignore next */\n    public allFixedRows(): any[] { return; };\n\n    /**\n     * Returns all data rows recursively, not only the immediate ones(when there is at least one fixed column returns rows only in the UNFIXED table)\n     */\n    /* istanbul ignore next */\n    public allRows(): any[] { return; };\n\n    /**\n     * Returns a column object by the specified column key\n     *\n     * @param key     The column key.\n     */\n    /* istanbul ignore next */\n    public columnByKey(key: string): Object { return; };\n\n    /**\n     * Returns a column object by the specified header text. If there are multiple matches, returns the first one.\n     *\n     * @param text     The column header text.\n     */\n    /* istanbul ignore next */\n    public columnByText(text: string): Object { return; };\n\n    /**\n     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .\n     * \t\t\t\tIf multiple selection is disabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedCells(): any[] { return; };\n\n    /**\n     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .\n     * \t\t\t\tIf multiple selection is disabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedRows(): any[] { return; };\n\n    /**\n     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.\n     * \t\t\t\tIf multiple selection is enabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedCell(): Object { return; };\n\n    /**\n     * Returns the currently selected row that has the format { element: , index: }, if any.\n     * \t\t\t\tIf multiple selection is enabled the function will return null.\n     */\n    /* istanbul ignore next */\n    public selectedRow(): Object { return; };\n\n    /**\n     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.\n     */\n    /* istanbul ignore next */\n    public activeCell(): Object { return; };\n\n    /**\n     * Returns the currently active (focused) row that has the format { element: , index: }, if any.\n     */\n    /* istanbul ignore next */\n    public activeRow(): Object { return; };\n\n    /**\n     * Retrieves a cell value using the row index and the column key. If a primaryKey is defined, rowId is assumed to be the row Key (not index).\n     * \t\t\t\tIf primary key is not defined, then rowId is converted to a number and is used as a row index.\n     *\n     * @param rowId     Row index or row key (primary key).\n     * @param colKey     The column key.\n     */\n    /* istanbul ignore next */\n    public getCellValue(rowId: Object, colKey: string): Object { return; };\n\n    /**\n     * Returns the cell text. If colKey is a number, the index of the column is used (instead of a column name)- does not apply when using a Multi-Row Layout grid.\n     * \t\t\t\tThis is the actual text (or HTML string) for the contents of the cell.\n     *\n     * @param rowId     Row index or row data key (primary key)\n     * @param colKey     Column key.\n     */\n    /* istanbul ignore next */\n    public getCellText(rowId: Object, colKey: string): string { return; };\n\n    /**\n     * Sets a new template for a column after initialization and renders the grid if not explicitly disabled. This method will replace any existing explicitly set row template and will build one anew from the column ones.\n     *\n     * @param col     An identifier of the column to set template for (index or key)\n     * @param tmpl     The column template to set\n     * @param render     Should the grid rerender after template is set\n     */\n    /* istanbul ignore next */\n    public setColumnTemplate(col: Object, tmpl: string, render?: boolean): void { return; };\n\n    /**\n     * Commits all pending transactions to the client data source. Note that there won't be anything to commit on the UI, since it is updated instantly. In order to rollback the actual UI, a call to dataBind() is required.\n     *\n     * @param rowId     If specified, will commit only that transaction corresponding to the specified record key.\n     */\n    /* istanbul ignore next */\n    public commit(rowId?: Object): void { return; };\n\n    /**\n     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter \"updateUI\" to true, which will trigger a call to dataBind() to re-render the contents.\n     *\n     * @param rowId     If specified, will only rollback the transactions with that row id.\n     * @param updateUI     Whether to update the UI or not.\n     */\n    /* istanbul ignore next */\n    public rollback(rowId?: Object, updateUI?: boolean): any[] { return; };\n\n    /**\n     * Returns a record by a specified key (requires that primaryKey is set in the settings).\n     * \t\t\t\tThat is a wrapper for this.dataSource.findRecordByKey(key).\n     *\n     * @param key     Primary key of the record\n     */\n    /* istanbul ignore next */\n    public findRecordByKey(key: Object): Object { return; };\n\n    /**\n     * Returns a standalone object (copy) that represents the committed transactions, but detached from the data source.\n     * \t\t\t\tThat is a wrapper for this.dataSource.getDetachedRecord(t).\n     *\n     * @param t     A transaction object.\n     */\n    /* istanbul ignore next */\n    public getDetachedRecord(t: Object): Object { return; };\n\n    /**\n     * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source.\n     * \t\t\t\tThat is a wrapper for this.dataSource.pendingTransactions().\n     */\n    /* istanbul ignore next */\n    public pendingTransactions(): any[] { return; };\n\n    /**\n     * Returns a list of all transaction objects that are either pending, or have been committed in the data source.\n     * \t\t\t\tThat is a wrapper for this.dataSource.allTransactions().\n     */\n    /* istanbul ignore next */\n    public allTransactions(): any[] { return; };\n\n    /**\n     * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently.\n     * \t\t\t\tThat is a wrapper for this.dataSource.transactionsAsString().\n     */\n    /* istanbul ignore next */\n    public transactionsAsString(): string { return; };\n\n    /**\n     * Invokes an AJAX request to the updateUrl option (if specified) and passes the serialized transaction log (a serialized JSON string) as part of the POST request.\n     *\n     * @param success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)\n     * @param error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)\n     */\n    /* istanbul ignore next */\n    public saveChanges(success: Function, error: Function): void { return; };\n\n    /**\n     * Adds a new row (TR) to the grid, by taking a data row object. Assumes the record will have the primary key.\n     *\n     * @param rec     Identifier/key of row. If missing, then number of rows in grid is used.\n     */\n    /* istanbul ignore next */\n    public renderNewRow(rec?: string): void { return; };\n\n    /**\n     * If the data source points to a local JSON array of data, and it is necessary to reset it at runtime, it must be done through this API member instead of the options (options.dataSource)\n     *\n     * @param dataSource     New data source object.\n     */\n    /* istanbul ignore next */\n    public dataSourceObject(dataSource: Object): void { return; };\n\n    /**\n     * Returns the total number of records in the underlying backend. If paging or filtering is enabled, this may differ from the number of records in the client-side data source.\n     * \t\t\t\tIn order for this to work, the response JSON/XML must include a property that specifies the total number of records, which name is specified by options.responseTotalRecCountKey.\n     * \t\t\t\tThis functionality is completely delegated to the data source control.\n     */\n    /* istanbul ignore next */\n    public totalRecordsCount(): number { return; };\n\n    /**\n     * Causes the grid to data bind to the data source (local or remote) , and re-render all of the data as well\n     *\n     * @param internal    \n     */\n    /* istanbul ignore next */\n    dataBind(internal: Object): void { return; };\n\n    /**\n     * Moves a visible column at a specified place, in front or behind a target column or at a target index\n     * \t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.\n     * @param target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.\n     * @param after    Specifies whether the column moved should be moved after or before the target column. This parameter is disregarded if there is no target column specified but a target index is used.\n     * @param inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.\n     * @param callback    Specifies a custom function to be called when the column is moved.\n     */\n    /* istanbul ignore next */\n    public moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void { return; };\n\n    /**\n     * Shows a hidden column. If the column is not hidden the method does nothing.\n     * \t\t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param column     An identifier for the column. If a number is provided it will be used as a column index. If a string is provided it will be used as a column key.\n     * @param callback     Specifies a custom function to be called when the column is shown(optional)\n     */\n    /* istanbul ignore next */\n    public showColumn(column: Object, callback: Function): void { return; };\n\n    /**\n     * Hides a visible column. If the column is hidden the method does nothing.\n     * \t\t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param column     An identifier for the column. If a number is provided it will be used as a column index else if a string is provided it will be used as a column key.\n     * @param callback     Specifies a custom function to be called when the column is hidden(optional)\n     */\n    /* istanbul ignore next */\n    public hideColumn(column: Object, callback: Function): void { return; };\n\n    /**\n     * Gets unbound values for the specified column key. If key is not specified returns all unboundvalues\n     *\n     * @param key     column key\n     */\n    /* istanbul ignore next */\n    public getUnboundValues(key: string): Object { return; };\n\n    /**\n     * Sets unbound values for the unbound column with the specified key. If removeOldValues is true then values(if any) for the unbound columns are re-set with the new values\n     *\n     * @param key     key of the unbound column\n     * @param values     array of values to be set on unbound values\n     * @param removeOldValues     if true removes current unbound values(if any) for the specified column and apply the new ones specified in parameter values. Otherwise merge current values with the specified in parameter values\n     */\n    /* istanbul ignore next */\n    public setUnboundValues(key: string, values: any[], removeOldValues: Object): void { return; };\n\n    /**\n     * Sets unbound value for the unbound cell by the specified column key and row primary key.\n     *\n     * @param col     key of the unbound column\n     * @param rowId     primary key value of the row\n     * @param val     value to be set on unbound cell\n     * @param notToRender     if false will re-render the row\n     */\n    /* istanbul ignore next */\n    public setUnboundValueByPK(col: string, rowId: string, val: Object, notToRender: Object): void { return; };\n\n    /**\n     * Returns an unbound column with the specified key. If not found returns null\n     *\n     * @param key    a column key\n     */\n    /* istanbul ignore next */\n    public getUnboundColumnByKey(key: string): Object { return; };\n\n    /**\n     * Returns whether there is vertical scrollbar. Because of perfrormance issues in older Internet Explorer especially 8,9 - there is no need to check if height is not set - there is no scrollbar OR if row virtualization is enabled - it is supposed there is vertical scrollbar\n     */\n    /* istanbul ignore next */\n    public hasVerticalScrollbar(): Object { return; };\n\n    /**\n     * Auto resize columns that have property width set to \"*\" so content to be auto-fitted(not shrinked/cutted). Auto-resizing is applied ONLY for visible columns\n     */\n    /* istanbul ignore next */\n    public autoSizeColumns(): void { return; };\n\n    /**\n     * Calculates the width of the column so its content to be auto-fitted to the width of the data in it(the content should NOT be shrinked/cutted)\n     *\n     * @param columnIndex    Visible column index\n     */\n    /* istanbul ignore next */\n    public calculateAutoFitColumnWidth(columnIndex: number): number { return; };\n\n    /**\n     * Get visible index by specified column key. If column is not found or is hidden then returns -1.\n     * \t\t\t\tNote: Method does not count column groups (Multi-Column Headers).\n     *\n     * @param columnKey     columnKey\n     * @param includeDataSkip     Optional parameter - if set to true include non data columns(like expander column, row selectors column, etc.) in calculations\n     */\n    /* istanbul ignore next */\n    public getVisibleIndexByKey(columnKey: string, includeDataSkip: boolean): number { return; };\n\n    /**\n     * When called the method re-renders the whole grid(also rebinds to the data source) and renders the cols object\n     *\n     * @param cols an array of column objects\n     */\n    /* istanbul ignore next */\n    public renderMultiColumnHeader(cols: any[]): void { return; };\n\n    /**\n     * Scroll to the specified row or specified position(in pixels)\n     *\n     * @param scrollerPosition     An identifier of the vertical scroll position. When it is string then it is interpreted as pixels otherwise it is the row number\n     */\n    /* istanbul ignore next */\n    public virtualScrollTo(scrollerPosition: Object): void { return; };\n\n    /**\n     * Returns column object and visible index for the table cell(TD) which is passed as argument\n     *\n     * @param $td     cell(TD) - either DOM TD element or jQuery object\n     */\n    /* istanbul ignore next */\n    public getColumnByTD($td: Object): Object { return; };\n\n    /**\n     * Destroy is part of the jQuery UI widget API and does the following:\n     * \t\t\t\t1. Remove custom CSS classes that were added.\n     * \t\t\t\t2. Unwrap any wrapping elements such as scrolling divs and other containers.\n     * \t\t\t\t3. Unbind all events that were bound.\n     *\n     * @param notToCallDestroy \n     */\n    /* istanbul ignore next */\n    public destroy(notToCallDestroy: Object): void { return; };\n}","import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgGridBase } from \"../iggrid/iggridbase\";\n\n@Component({\n    selector: \"ig-tree-grid\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"autoAdjustHeight\", \"avgRowHeight\", \"avgColumnWidth\", \"defaultColumnWidth\", \"autoGenerateColumns\", \"virtualization\", \"virtualizationMode\", \"requiresDataBinding\", \"rowVirtualization\", \"columnVirtualization\", \"virtualizationMouseWheelStep\", \"adjustVirtualHeights\", \"templatingEngine\", \"columns\", \"dataSource\", \"dataSourceUrl\", \"dataSourceType\", \"responseDataKey\", \"responseTotalRecCountKey\", \"requestType\", \"responseContentType\", \"showHeader\", \"showFooter\", \"fixedHeaders\", \"fixedFooters\", \"caption\", \"features\", \"tabIndex\", \"localSchemaTransform\", \"primaryKey\", \"serializeTransactionLog\", \"autoCommit\", \"aggregateTransactions\", \"autoFormat\", \"renderCheckboxes\", \"updateUrl\", \"restSettings\", \"alternateRowStyles\", \"autofitLastColumn\", \"enableHoverStyles\", \"enableUTCDates\", \"mergeUnboundColumns\", \"jsonpRequest\", \"enableResizeContainerCheck\", \"featureChooserIconDisplay\", \"scrollSettings\", \"indentation\", \"initialIndentationLevel\", \"showExpansionIndicator\", \"expandTooltipText\", \"collapseTooltipText\", \"foreignKey\", \"initialExpandDepth\", \"foreignKeyRootValue\", \"renderExpansionIndicatorColumn\", \"renderFirstDataCellFunction\", \"childDataKey\", \"renderExpansionCellFunction\", \"enableRemoteLoadOnDemand\", \"dataSourceSettings\"],\n    outputs: [\"cellClick\", \"cellRightClick\", \"dataBinding\", \"dataBound\", \"rendering\", \"rendered\", \"dataRendering\", \"dataRendered\", \"headerRendering\", \"headerRendered\", \"footerRendering\", \"footerRendered\", \"headerCellRendered\", \"rowsRendering\", \"rowsRendered\", \"schemaGenerated\", \"columnsCollectionModified\", \"requestError\", \"created\", \"destroyed\", \"rowExpanding\", \"rowExpanded\", \"rowCollapsing\", \"rowCollapsed\"]\n})\nexport class IgTreeGridComponent extends IgGridBase<IgTreeGrid> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n    deleteRow(id) {\n        var element = jQuery(this._el),\n            tr = element.find(\"tr[data-id='\" + id + \"']\"),\n            dataLevel = tr.attr(\"aria-level\");\n        if (tr.length > 0) {\n\n            element.data(this._widgetName).dataSource.deleteRow(id, true);\n            element.data(this._widgetName).dataSource._removeTransactionsByRecordId(id);\n\n            var trs = tr.nextUntil(\"tr[data-level=\" + dataLevel + \"]\");\n            if (trs.length === 0) {\n                trs = tr.nextAll(\"tr[data-level]\");\n            }\n\n            tr.remove();\n            trs.remove();\n        }\n    }\n\n    updateRow(rec, currValue, key) {\n        const element = jQuery(this._el);\n        const grid = element.data(this._widgetName);\n        const childDataKey = this[\"childDataKey\"] || this.options.childDataKey;\n        const column = element.data(this._widgetName).columnByKey(key);\n        if (!column && key === childDataKey) {\n            //we have an hierarchical data source and one of the nested collections has changed.\n            grid.dataBind();\n        } else {\n            super.updateRow(rec, currValue, key);\n        }\n    }\n\n    public markForCheck() {\n        super.markForCheck();\n        const childDataKey = this[\"childDataKey\"] || this.options.childDataKey;\n        if (childDataKey) {\n            this.dataBind();\n        }\n    }\n\n    /**\n     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter \"updateUI\" to true, which will trigger a call to dataBind() to re-render the contents.\n     *\n     * @param rowId     If specified, will only rollback the transactions with that row id.\n     * @param updateUI     Whether to update the UI or not.\n     */\n    /* istanbul ignore next */\n    public rollback(rowId?: Object, updateUI?: boolean): any[] { return; };\n\n    /**\n     * Causes the treegrid to data bind to the data source (local or remote) , and re-render all of the data\n     */\n    /* istanbul ignore next */\n    public dataBind(): void { return; };\n\n    /**\n     * Toggle row by specified row or row identifier\n     *\n     * @param row     jQuery table row object or a row id.\n     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded\n     */\n    /* istanbul ignore next */\n    public toggleRow(row: Object, callback?: Function): void { return; };\n\n    /**\n     * Expands a parent row by specified row or row identifier\n     *\n     * @param row     jQuery table row object or a row id.\n     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded\n     */\n    /* istanbul ignore next */\n    public expandRow(row: Object, callback?: Function): void { return; };\n\n    /**\n     * Collapses a parent row by specified row or row identifier\n     *\n     * @param row     jQuery table row object, raw DOM row object or a row id.\n     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded\n     */\n    /* istanbul ignore next */\n    public collapseRow(row: Object, callback?: Function): void { return; };\n\n    /**\n     * Adds a new row (TR) to the grid as a child of a specific row, by taking a data row object. Assumes the record will have the primary key.\n     *\n     * @param rec     The data row JavaScript object.\n     * @param parentId     Identifier/key of the targeted parent row. If missing, then the new row is rendered to the bottom of the grid.\n     */\n    /* istanbul ignore next */\n    public renderNewChild(rec: Object, parentId?: string): void { return; };\n\n    /**\n     * Destroys igTreeGrid\n     */\n    /* istanbul ignore next */\n    public destroy(): Object { return; };\n}","import { Component, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, ElementRef, ChangeDetectionStrategy } from \"@angular/core\";\nimport { IgGridBase } from \"../iggrid/iggridbase\";\n\ndeclare var jQuery: any;\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"ig-hierarchical-grid\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"initialDataBindDepth\", \"initialExpandDepth\", \"odata\", \"rest\", \"maxDataBindDepth\", \"defaultChildrenDataProperty\", \"autoGenerateLayouts\", \"expandCollapseAnimations\", \"expandColWidth\", \"pathSeparator\", \"animationDuration\", \"expandTooltip\", \"collapseTooltip\", \"columnLayouts\", \"width\", \"height\", \"autoAdjustHeight\", \"avgRowHeight\", \"avgColumnWidth\", \"defaultColumnWidth\", \"autoGenerateColumns\", \"virtualization\", \"virtualizationMode\", \"requiresDataBinding\", \"rowVirtualization\", \"columnVirtualization\", \"virtualizationMouseWheelStep\", \"adjustVirtualHeights\", \"templatingEngine\", \"columns\", \"dataSource\", \"dataSourceUrl\", \"dataSourceType\", \"responseDataKey\", \"responseTotalRecCountKey\", \"requestType\", \"responseContentType\", \"showHeader\", \"showFooter\", \"fixedHeaders\", \"fixedFooters\", \"caption\", \"features\", \"tabIndex\", \"localSchemaTransform\", \"primaryKey\", \"serializeTransactionLog\", \"autoCommit\", \"aggregateTransactions\", \"autoFormat\", \"renderCheckboxes\", \"updateUrl\", \"restSettings\", \"alternateRowStyles\", \"autofitLastColumn\", \"enableHoverStyles\", \"enableUTCDates\", \"mergeUnboundColumns\", \"jsonpRequest\", \"enableResizeContainerCheck\", \"featureChooserIconDisplay\", \"scrollSettings\"],\n    outputs: [\"rowExpanding\", \"rowExpanded\", \"rowCollapsing\", \"rowCollapsed\", \"childrenPopulating\", \"childrenPopulated\", \"childGridRendered\", \"childGridCreating\", \"childGridCreated\", \"cellClick\", \"cellRightClick\", \"dataBinding\", \"dataBound\", \"rendering\", \"rendered\", \"dataRendering\", \"dataRendered\", \"headerRendering\", \"headerRendered\", \"footerRendering\", \"footerRendered\", \"headerCellRendered\", \"rowsRendering\", \"rowsRendered\", \"schemaGenerated\", \"columnsCollectionModified\", \"requestError\", \"created\", \"destroyed\"]\n})\nexport class IgHierarchicalGridComponent extends IgGridBase<IgHierarchicalGrid> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n    deleteRow(id) {\n        var element = jQuery(this._el),\n            tr = element.find(\"tr[data-id='\" + id + \"']\"),\n            childContainer = tr.next(\"tr[data-container]\");\n\n        if (tr.length > 0) {\n            tr.remove();\n            childContainer.remove();\n            element.data(\"igGrid\").dataSource.deleteRow(id, true);\n            element.data(\"igGrid\").dataSource._removeTransactionsByRecordId(id);\n        }\n    }\n    updateRow(rec, currValue, key) {\n        const element = jQuery(this._el);\n        const childrenDataProperty = this[\"childrenDataProperty\"] || this.options.childrenDataProperty;\n\n        var childGrid = element.data(this._widgetName).allChildrenWidgets().filter(function (indx) {\n            var parentRow = jQuery(this.element).closest('tr[data-container]').prev();\n            var parentGridPK = parentRow.closest(\".ui-iggrid-table\").data(\"igGrid\").options.primaryKey;\n            return (childrenDataProperty === key ||\n                parentRow.next(\"[data-container]\").find(\"table[role='grid']\").attr(\"id\").contains(\"_\" + key + \"_\"))\n                && parentRow.attr(\"data-id\") == rec[parentGridPK];\n        });\n        if (childGrid.length > 0) {\n            jQuery(childGrid).each(function () {\n                this.dataBind();\n            });\n        } else {\n            super.updateRow(rec, currValue, key);\n        }\n    }\n    public markForCheck() {\n        super.markForCheck();\n        const element = jQuery(this._el);\n        const childrenDataProperty = this[\"childrenDataProperty\"] || this.options.childrenDataProperty;\n        var childGrids = element.data(this._widgetName).allChildrenWidgets();\n        for (var i = 0; i < childGrids.length; i++) {\n            childGrids[i].dataBind();\n        }\n    }\n    /**\n     * Data binds the hierarchical grid. No child grids will be created or rendered by default, unless there is initialExpandDepth >= 0 set.\n     */\n    /* istanbul ignore next */\n    public dataBind(): void { return; };\n\n    /**\n     * Returns the element of the root grid (igGrid)\n     */\n    /* istanbul ignore next */\n    public root(): Object { return; };\n\n    /**\n     * Returns the widget object of the root grid (igGrid)\n     */\n    /* istanbul ignore next */\n    public rootWidget(): Object { return; };\n\n    /**\n     * Returns a flat list of all child grid elements (recursive)\n     */\n    /* istanbul ignore next */\n    public allChildren(): Object { return; };\n\n    /**\n     * Expands or collapses (toggles) a parent row\n     * \t\t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row\n     * @param callback     Specifies a custom function to be called when parent row is toggled(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was toggled\n     */\n    /* istanbul ignore next */\n    public toggle(element: Element, callback?: Function): void { return; };\n\n    /**\n     * Expands (toggles) a parent row\n     * \t\t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row\n     * @param callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments first is hierarchical grid object, second is the row element that was expanded\n     */\n    /* istanbul ignore next */\n    public expand(id: Element, callback?: Function): void { return; };\n\n    /**\n     * Collapses a parent row\n     * \t\t\t\tNote: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.\n     *\n     * @param id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row\n     * @param callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was collapsed\n     */\n    /* istanbul ignore next */\n    public collapse(id: Element, callback?: Function): void { return; };\n\n    /**\n     * Checks if a parent row is currently collapsed\n     *\n     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row\n     */\n    /* istanbul ignore next */\n    public collapsed(element: Element): boolean { return; };\n\n    /**\n     * Checks if a parent row is populated with data\n     *\n     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row\n     */\n    /* istanbul ignore next */\n    public populated(element: Element): boolean { return; };\n\n    /**\n     * Commits pending transactions to the client data source for main and all child grids.\n     */\n    /* istanbul ignore next */\n    public commit(): void { return; };\n\n    /**\n     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter \"updateUI\" to true, which will trigger a call to dataBind() to re-render the contents.\n     *\n     * @param rebind     Whether to perform a rebind.\n     */\n    /* istanbul ignore next */\n    public rollback(rebind?: boolean): void { return; };\n\n    /**\n     * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params\n     *\n     * @param success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)\n     * @param error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)\n     */\n    /* istanbul ignore next */\n    public saveChanges(success: Function, error: Function): void { return; };\n\n    /**\n     * Destroys the hierarchical grid by recursively destroying all child grids\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, Optional, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, SimpleChanges, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\nimport { ControlValueAccessor, NgModel } from \"@angular/forms\";\n\ndeclare var jQuery: any;\n\n@Component({\n    selector: \"ig-combo\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"dropDownWidth\", \"dataSource\", \"dataSourceType\", \"dataSourceUrl\", \"responseTotalRecCountKey\", \"responseDataKey\", \"responseDataType\", \"responseContentType\", \"requestType\", \"valueKey\", \"textKey\", \"itemTemplate\", \"headerTemplate\", \"footerTemplate\", \"inputName\", \"animationShowDuration\", \"animationHideDuration\", \"dropDownAttachedToBody\", \"filteringType\", \"filterExprUrlKey\", \"filteringCondition\", \"filteringLogic\", \"noMatchFoundText\", \"loadOnDemandSettings\", \"visibleItemsCount\", \"placeHolder\", \"mode\", \"virtualization\", \"multiSelection\", \"grouping\", \"validatorOptions\", \"highlightMatchesMode\", \"caseSensitive\", \"autoSelectFirstMatch\", \"autoComplete\", \"allowCustomValue\", \"closeDropDownOnBlur\", \"delayInputChangeProcessing\", \"tabIndex\", \"dropDownOnFocus\", \"closeDropDownOnSelect\", \"selectItemBySpaceKey\", \"initialSelectedItems\", \"preventSubmitOnEnter\", \"format\", \"suppressKeyboard\", \"enableClearButton\", \"dropDownButtonTitle\", \"clearButtonTitle\", \"dropDownOrientation\"],\n    outputs: [\"rendered\", \"dataBinding\", \"dataBound\", \"filtering\", \"filtered\", \"itemsRendering\", \"itemsRendered\", \"dropDownOpening\", \"dropDownOpened\", \"dropDownClosing\", \"dropDownClosed\", \"selectionChanging\", \"selectionChanged\"]\n})\nexport class IgComboComponent extends IgControlBase<IgCombo> implements ControlValueAccessor {\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n    };\n\n    private _dataSource: any;\n\n    protected _model: any;\n    private _changes: any;\n\n    constructor(@Optional() public model: NgModel, el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n        if (model) {\n            model.valueAccessor = this;\n            this._model = model;\n        }\n    }\n\n    ngOnInit() {\n        let that = this;\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n\n        if (this._model) {\n            if (this.options.allowCustomValue) {\n                jQuery(this._el).on(\"input\", function (evt) {\n                    that._model.viewToModelUpdate(evt.target.value);\n                });\n    \n                jQuery(this._el).closest(\".ui-igcombo-wrapper\").find(\".ui-igcombo-clear\").on(\"click\", function() {\n                    if (that.options.multiSelection && that.options.multiSelection.enabled) {\n                        that._model.viewToModelUpdate([]);\n                    } else {\n                        that._model.viewToModelUpdate(null);\n                    }\n                });\n            }\n\n            // D.P. #244 only attach selectionchanged handler if there's a model to update\n            jQuery(this._el).on(this._widgetName.toLowerCase() + \"selectionchanged\", function (evt, ui) {\n                var items = ui.items;\n                const valueKey = ui.owner.options.valueKey;\n\n                if (items.length <= 0 && !ui.owner.options.multiSelection.enabled) {\n                    if (!ui.owner.options.allowCustomValue) {\n                        that._model.viewToModelUpdate(null);\n                    }\n                    return;\n                }\n\n                if (ui.owner.options.multiSelection.enabled) {\n                    that._model.viewToModelUpdate(items.map(function (item) {\n                        return item.data[valueKey];\n                    }));\n                } else {\n                    that._model.viewToModelUpdate(items[0].data[valueKey]);\n                }\n            });\n            //manually call writeValue, because the LifeCycle has been changed and writeValue is executed before ngOnInit\n            this.writeValue(this._model.value);\n        }\n    }\n    writeValue(value) {\n        if (!!jQuery(this._el).data(this._widgetName)) {\n            jQuery(this._el)[this._widgetName](\"value\", value);\n        }\n    }\n\n    onChange = (_: any) => {\n    };\n    onTouched = () => {\n    };\n\n    registerOnChange(fn: () => any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => any): void {\n        this.onTouched = fn;\n    }\n\n    dataSourceApplyChanges(changes) {\n        //dataSource has changed.\n        const element = jQuery(this._el);\n        if (element[this._widgetName]) {\n            element[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n        if (this.model && this.model.value) {\n            this.writeValue(this.model.value);\n        }\n    }\n    updateComboItem(rec, val, key, index) {\n        const element = jQuery(this._el);\n        const comboItem = element.data(\"igCombo\").itemsFromIndex(index);\n        element.data(\"igCombo\")._updateItem(comboItem.element, rec);\n        if (element.data(\"igCombo\").isSelected(comboItem.element)) {\n            //should update the input\n            element.data(\"igCombo\")._updateInputValues(false);\n        }\n\n    }\n    public ngOnChanges(changes: SimpleChanges): void {\n        const ds = \"dataSource\";\n        if (ds in changes) {\n            const value = changes[ds].currentValue;\n            if (value) {\n                try {\n                    this._differ = this._differs.find(value).create();\n                    this._changes = [];\n                    for (var i = 0; i < this._dataSource.length; i++) {\n                        this._changes.push(this.kvalDiffers.find({}).create());\n                    }\n                }\n                catch (e) {\n                    throw new Error(\"Only binding to arrays is supported.\");\n                }\n            }\n        }\n        super.ngOnChanges(changes);\n    }\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this._dataSource);\n            //check if grid is initialized\n            const combo = jQuery(this._el).data(this._widgetName);\n            if (changes && combo) {\n                this.dataSourceApplyChanges(changes);\n            }\n            if (this._changes && combo) {\n                //check recs\n                for (var i = 0; i < this._dataSource.length; i++) {\n                    var item = this._dataSource[i];\n                    var recChanges = this._changes[i].diff(item);\n                    if (recChanges) {\n                        recChanges.forEachChangedItem((change: any) => {\n                            this.updateComboItem(item, change.currentValue, change.key, i);\n                        });\n                    }\n                }\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * Performs databinding on the combo box. The [databinding](ui.igcombo#events:dataBinding) and [dataBound](ui.igcombo#events:dataBound) events are always raised.\n     */\n    /* istanbul ignore next */\n    public dataBind(): Object { return; };\n\n    /**\n     * Forces an update of the igCombo value according to the current text in the igCombo input.\n     *             \n     * \t\t\t\tThe refresh is primarily intended to be used with [allowCustomValue](ui.igcombo#options:allowCustomValue) set to true.\n     * \t\t\t\tThe refresh will take the current text and, if no selection is applied, will set it as igCombo value provided that [allowCustomValue](ui.igcombo#options:allowCustomValue) true.\n     */\n    /* istanbul ignore next */\n    public refreshValue(): Object { return; };\n\n    /**\n     * Gets the associated data of an item by value matching it's [valueKey](ui.igcombo#options:valueKey) property.\n     *\n     * @param value Value matching the valueKey property of item to be tested if it is selected\n     */\n    /* istanbul ignore next */\n    public dataForValue(value: Object): Object { return; };\n\n    /**\n     * Gets the associated data of li element in the combo.\n     *\n     * @param $element jQuery element of item in the drop down list\n     */\n    /* istanbul ignore next */\n    public dataForElement($element: Object): Object { return; };\n\n    /**\n     * Gets object/s containing data and list item in the combo by element/s.\n     *\n     * @param $element jQuery object with drop down list item element or elements\n     */\n    /* istanbul ignore next */\n    public itemsFromElement($element: Object): Object { return; };\n\n    /**\n     * Gets object/s containing data and list item in the combo by value/s.\n     *\n     * @param value Value of item in the drop down list or array with values.\n     */\n    /* istanbul ignore next */\n    public itemsFromValue(value: Object): Object { return; };\n\n    /**\n     * Gets object/s containing data and list item in the combo by index/es.\n     *\n     * @param index Index or array of indexes of items in the drop down list\n     */\n    /* istanbul ignore next */\n    public itemsFromIndex(index: number): Object { return; };\n\n    /**\n     * Gets array with data and objects representing li elements in combo box.\n     */\n    /* istanbul ignore next */\n    public items(): any[] { return; };\n\n    /**\n     * Gets array with objects representing the filtered li elements in combo box.\n     */\n    /* istanbul ignore next */\n    public filteredItems(): any[] { return; };\n\n    /**\n     * Gets array with objects representing selected li elements in combo box.\n     */\n    /* istanbul ignore next */\n    public selectedItems(): any[] { return; };\n\n    /**\n     * Triggers filtering.\n     *\n     * @param texts Filter by string, or array of strings.\n     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.\n     */\n    /* istanbul ignore next */\n    public filter(texts?: Object, event?: Object): Object { return; };\n\n    /**\n     * Clears filtering.\n     *\n     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.\n     */\n    /* istanbul ignore next */\n    public clearFiltering(event?: Object): Object { return; };\n\n    /**\n     * Opens the drop-down.\n     *\n     * @param callback Specifies callback function to be executed when open animation is completed.\n     * @param focusCombo Set to false to not focus combo\"s text input after the drop down is opened. By default the combo's input is focused.\n     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [dropDownOpening](ui.igcombo#events:dropDownOpening) and [dropDownOpened](ui.igcombo#events:dropDownOpened) events.\n     */\n    /* istanbul ignore next */\n    public openDropDown(callback?: Function, focusCombo?: boolean, event?: Object): Object { return; };\n\n    /**\n     * Closes the drop down.\n     *\n     * @param callback Specifies callback function to be executed when close animation is completed.\n     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [dropDownClosing](ui.igcombo#events:dropDownClosing) and [dropDownClosed](ui.igcombo#events:dropDownClosed) events.\n     */\n    /* istanbul ignore next */\n    public closeDropDown(callback?: Function, event?: Object): Object { return; };\n\n    /**\n     * Clears the input text, resets highlighting, filtering and selection.\n     *\n     * @param options     Object with set of options controlling the behavior of this api method.\n     focusCombo (boolean): Set to true to focus combo after clearing the input.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public clearInput(options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Verifies whether a specified value is selected.\n     *\n     * @param value Value matching the [valueKey](ui.igcombo#options:valueKey) property of item to be tested if it is selected\n     */\n    /* istanbul ignore next */\n    public isValueSelected(value: Object): boolean { return; };\n\n    /**\n     * Verifies whether the li representing the data source's record at the specified index is selected.\n     *\n     * @param index Index of data source record\n     */\n    /* istanbul ignore next */\n    public isIndexSelected(index: Object): boolean { return; };\n\n    /**\n     * Selects list item/items from the drop-down list by specified value or array of values. When called witout params will return the value of the selected item or if [multiSelection](ui.igcombo#options:multiSelection) is enabled array of selected values.\n     *\n     * @param value Value or array of values matching the valueKey property of item/items to be selected\n     * @param options Object with set of options controlling the behavior of this api method.\n                    closeDropDown (boolean): Set to true to close the drop down list after the selection.\n                    focusCombo (boolean): Set to true to focus combo after the selection.\n                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.\n                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.\n                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.\n                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.\n                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public value(value?: Object, options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Selects a list item from the drop-down list.\n     *\n     * @param $items jQuery object with item or items to be selected.\n     * @param options Object with set of options controlling the behavior of this api method.\n                    closeDropDown (boolean): Set to true to close the drop down list after the selection.\n                    focusCombo (boolean): Set to true to focus combo after the selection.\n                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.\n                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.\n                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.\n                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.\n                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public select($items: Object, options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Gets/Sets selected item/s from the drop-down list by specified index.\n     *\n     * @param index Index or array of indexes of items to be selected\n     * @param options Object with set of options controlling the behavior of this api method.\n                    closeDropDown (boolean): Set to true to close the drop down list after the selection.\n                    focusCombo (boolean): Set to true to focus combo after the selection.\n                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.\n                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.\n                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.\n                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.\n                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public index(index?: Object, options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Selects all items from the drop-down list.\n     *\n     * @param options Object with set of options controlling the behavior of this api method.\n                    closeDropDown (boolean): Set to true to close the drop down list after the selection.\n                    focusCombo (boolean): Set to true to focus combo after the selection.\n                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.\n                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.\n                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.\n                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public selectAll(options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Deselects a list item from the drop down list by value.\n     *\n     * @param value Value or array of values matching the [valueKey](ui.igcombo#options:valueKey) property of item/items to be deselected\n     * @param options Object with set of options controlling the behavior of this api method.\n                    focusCombo (boolean): Set to true to focus combo after the deselection.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public deselectByValue(value: Object, options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Deselects a list item from the drop down list.\n     *\n     * @param $items jQuery object with item or items to be deselected\n     * @param options Object with set of options controlling the behavior of this api method.\n                    focusCombo (boolean): Set to true to focus combo after the deselection.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public deselect($items: Object, options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Deselects a list item from the drop down list by index.\n     *\n     * @param index Index or array of indexes of items to be selected\n     * @param options Object with set of options controlling the behavior of this api method.\n                    focusCombo (boolean): Set to true to focus combo after the deselection.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public deselectByIndex(index: Object, options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Deselects all selected items from the drop down list.\n     *\n     * @param options Object with set of options controlling the behavior of this api method.\n                    focusCombo (boolean): Set to true to focus combo after the deselection.\n                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.\n    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to \"true\" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.\n    */\n    /* istanbul ignore next */\n    public deselectAll(options?: Object, event?: Object): Object { return; };\n\n    /**\n     * Gets/Sets index of active item in list.\n     *\n     * @param index New active index for list. In order to clear active item, use -1.\n     * @return number|object Returns index of active item in list or -1, if parameter is undefined. Otherwise, it returns reference to this igCombo.\n     */\n    /* istanbul ignore next */\n    public activeIndex(index?: number): number | Object { return; };\n\n    /**\n     * Gets/Sets text in text input field.\n     *\n     * @param text New text value for combo's input field.\n     * @return string|object If parameter is undefined, then current text in field is returned. Otherwise, it returns reference to this igCombo.\n     */\n    /* istanbul ignore next */\n    public text(text?: string): string | Object { return; };\n\n    /**\n     * Gets/Sets scrollTop attribute of html element, which scrolls drop-down list of items.\n     *\n     * @param value New value for scroll top in list. Note: if list is closed and new value is provided, then openDropDown() is called automatically.\n     * @return number|object If parameter is undefined, then scrollTop is returned. Otherwise, it returns reference to this igCombo.\n     */\n    /* istanbul ignore next */\n    public listScrollTop(value?: number): number | Object { return; };\n\n    /**\n     * Gets jQuery objects representing all rendered list items in the combo drop down list.\n     */\n    /* istanbul ignore next */\n    public listItems(): Object { return; };\n\n    /**\n     * Gets jQuery object of the outer element of the combo.\n     */\n    /* istanbul ignore next */\n    public comboWrapper(): Object { return; };\n\n    /**\n     * Gets jQuery object of the drop down associated with this combo widget\n     */\n    /* istanbul ignore next */\n    public dropDown(): Object { return; };\n\n    /**\n     * Gets jQuery object of the container that holds the list with items.\n     */\n    /* istanbul ignore next */\n    public list(): Object { return; };\n\n    /**\n     * Gets jQuery object of the text input associated with this combo widget.\n     */\n    /* istanbul ignore next */\n    public textInput(): Object { return; };\n\n    /**\n     * Gets jQuery object of the value input associated with this combo widget.\n     */\n    /* istanbul ignore next */\n    public valueInput(): Object { return; };\n\n    /**\n     * Gets reference to [igValidator](ui.igvalidator) used by igCombo.\n     *\n     * @param destroy Request to destroy validator.\n     */\n    /* istanbul ignore next */\n    public validator(destroy?: boolean): Object { return; };\n\n    /**\n     * Trigger validation.\n     */\n    /* istanbul ignore next */\n    public validate(): boolean { return; };\n\n    /**\n     * Returns boolean representing whether the combo drop down list is opened.\n     */\n    /* istanbul ignore next */\n    public dropDownOpened(): boolean { return; };\n\n    /**\n     * Repositions drop down under combo input. Has effect only when the drop down is attached to body.\n     */\n    /* istanbul ignore next */\n    public positionDropDown(): Object { return; };\n\n    /**\n     * Destroys the igCombo widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): Object { return; };\n}","import { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\nimport { ControlValueAccessor, NgModel } from \"@angular/forms\";\nimport { ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\n\nexport class IgEditorBase<Model> extends IgControlBase<Model> implements ControlValueAccessor {\n    protected _model: any;\n\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n        if (model) {\n            model.valueAccessor = this;\n            this._model = model;\n        }\n    }\n\n    ngOnInit() {\n        let that = this;\n        super.ngOnInit();\n        if (this._model) {\n            jQuery(this._el).on(this._widgetName.toLowerCase() + \"valuechanged\", function (evt, ui) {\n                that.onChange(ui.newValue);\n            });\n            if (this._widgetName === \"igTextEditor\") {\n                jQuery(this._el).on(this._widgetName.toLowerCase() + \"textchanged\", function (evt, ui) {\n                    that.onChange(ui.text);\n                });\n            }\n            jQuery(this._el).on(this._widgetName.toLowerCase() + \"blur\", function (evt, ui) {\n                that.onTouched();\n            });\n            //manually call writeValue, because the LifeCycle has been changed and writeValue is executed before ngOnInit\n            this.writeValue(this._model.value);\n        }\n    }\n\n    writeValue(value: any) {\n        if (!!jQuery(this._el).data(this._widgetName) && value !== null) {\n            jQuery(this._el)[this._widgetName](\"value\", value);\n        }\n    }\n\n    onChange = (_: any) => {\n    };\n    onTouched = () => {\n    };\n\n    registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n}","import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgEditorBase } from \"./igeditorbase\";\nimport { NgModel } from \"@angular/forms\";\n\n@Component({\n    selector: \"ig-checkbox-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"checked\", \"size\", \"iconClass\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\"]\n})\nexport class IgCheckboxEditorComponent extends IgEditorBase<IgCheckboxEditor> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n\n    /**\n     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.\n     */\n    /* istanbul ignore next */\n    public isValid(): boolean { return; };\n\n    /**\n     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.\n     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.\n     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.\n     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.\n     * To get checked state regardless of the 'value' option, use $(\".selector\").igCheckboxEditor(\"option\", \"checked\");\n     *\n     * @param newValue\n     */\n    /* istanbul ignore next */\n    public value(newValue: Object): string { return; };\n\n    /**\n     * Toggles the state of the checkbox.\n     */\n    /* istanbul ignore next */\n    public toggle(): void { return; };\n\n    /**\n     * Gets/Sets name attribute applied to the editor element.\n     *\n     * @param newValue The new input name.\n     */\n    /* istanbul ignore next */\n    public inputName(newValue?: string): string { return; };\n\n    /**\n     * Gets the input element of the editor.\n     */\n    /* istanbul ignore next */\n    public field(): string { return; };\n\n    /**\n     * Gets a reference to the jQuery element that wraps the editor.\n     */\n    /* istanbul ignore next */\n    public editorContainer(): string { return; };\n\n    /**\n     * Gets whether the editor has focus.\n     */\n    /* istanbul ignore next */\n    public hasFocus(): boolean { return; };\n\n    /**\n     * Sets focus to the editor after the specified delay.\n     *\n     * @param delay The delay before focusing the editor.\n     */\n    /* istanbul ignore next */\n    public setFocus(delay?: number): void { return; };\n\n    /**\n     * Hides the editor.\n     */\n    /* istanbul ignore next */\n    public hide(): void { return; };\n\n    /**\n     * Shows the editor.\n     */\n    /* istanbul ignore next */\n    public show(): void { return; };\n\n    /**\n     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.\n     */\n    /* istanbul ignore next */\n    public validator(): Object { return; };\n\n    /**\n     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).\n     */\n    /* istanbul ignore next */\n    public validate(): boolean { return; };\n\n    /**\n     * Destroys the widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, Renderer, ElementRef, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgEditorBase } from \"./igeditorbase\";\nimport { NgModel } from \"@angular/forms\";\n\n@Component({\n    selector: \"ig-currency-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"locale\", \"suppressNotifications\", \"regional\", \"negativeSign\", \"negativePattern\", \"decimalSeparator\", \"groupSeparator\", \"groups\", \"maxDecimals\", \"minDecimals\", \"dataMode\", \"minValue\", \"maxValue\", \"spinDelta\", \"scientificFormat\", \"positivePattern\", \"currencySymbol\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\"]\n})\nexport class IgCurrencyEditorComponent extends IgEditorBase<IgCurrencyEditor> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n\n    /**\n     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.\n     *\n     * @param symbol New currency symbol.\n     */\n    /* istanbul ignore next */\n    public currencySymbol(symbol?: Object): string { return; };\n\n    /**\n     * Gets/Sets editor value.\n     *\n     * @param newValue New editor value.\n     */\n    /* istanbul ignore next */\n    public value(newValue?: number): number { return; };\n\n    /**\n     * Finds index of list item by text that matches with the search parameters.\n     *\n     * @param number The text to search for.\n     */\n    /* istanbul ignore next */\n    public findListItemIndex(number: number): number { return; };\n    /* istanbul ignore next */\n    public getSelectedText(): void { return; };\n    /* istanbul ignore next */\n    public getSelectionStart(): void { return; };\n    /* istanbul ignore next */\n    public getSelectionEnd(): void { return; };\n\n    /**\n     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.\n     *\n     * @param delta Increments value.\n     */\n    /* istanbul ignore next */\n    public spinUp(delta?: number): void { return; };\n\n    /**\n     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.\n     *\n     * @param delta Decrement value.\n     */\n    /* istanbul ignore next */\n    public spinDown(delta?: number): void { return; };\n\n    /**\n     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).\n     */\n    /* istanbul ignore next */\n    public selectListIndexUp(): void { return; };\n\n    /**\n     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).\n     */\n    /* istanbul ignore next */\n    public selectListIndexDown(): void { return; };\n\n    /**\n     * Gets current regional.\n     */\n    /* istanbul ignore next */\n    public getRegionalOption(): string { return; };\n\n    /**\n     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)\n     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter\n     */\n    /* istanbul ignore next */\n    public changeRegional(): void { return; };\n}","import { IgEditorBase } from \"./igeditorbase\";\nimport { Renderer, ElementRef, IterableDiffers, Optional, Component, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { NgModel } from \"@angular/forms\";\n\n@Component({\n    selector: \"ig-date-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"locale\", \"suppressNotifications\", \"regional\", \"inputMask\", \"dataMode\", \"unfilledCharsPrompt\", \"padChar\", \"emptyChar\", \"minValue\", \"maxValue\", \"dateDisplayFormat\", \"dateInputFormat\", \"spinDelta\", \"limitSpinToCurrentField\", \"enableUTCDates\", \"centuryThreshold\", \"yearShift\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\"]\n})\nexport class IgDateEditorComponent extends IgEditorBase<IgDateEditor> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n\n    /**\n     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)\n     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter\n     */\n    /* istanbul ignore next */\n    public changeRegional(): void { return; };\n\n    /**\n     * Gets/Sets editor value.\n     *\n     * Note! This option doesn't use the dateInputFormat to extract the date\n     *\n     * @param newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/\"thicks\"/).\n     */\n    /* istanbul ignore next */\n    public value(newValue?: Date): Date { return; };\n\n    /**\n     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.\n     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.\n     */\n    /* istanbul ignore next */\n    public getSelectedDate(): Date { return; };\n\n    /**\n     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.\n     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.\n     *\n     * @param date\n     */\n    /* istanbul ignore next */\n    public selectDate(date: Date): void { return; };\n\n    /**\n     * Increases the date or time period, depending on the current cursor position.\n     *\n     * @param delta The increase delta.\n     */\n    /* istanbul ignore next */\n    public spinUp(delta?: number): void { return; };\n\n    /**\n     * Decreases the date or time period, depending on the current cursor position.\n     *\n     * @param delta The decrease delta.\n     */\n    /* istanbul ignore next */\n    public spinDown(delta?: number): void { return; };\n\n    /**\n     * Returns a reference to the spin up UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinUpButton(): string { return; };\n\n    /**\n     * Returns a reference to the spin down UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinDownButton(): string { return; };\n\n    /**\n     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.\n     */\n    /* istanbul ignore next */\n    public isValid(): boolean { return; };\n    /* istanbul ignore next */\n    public dropDownButton(): void { return; };\n    /* istanbul ignore next */\n    public dropDownContainer(): void { return; };\n    /* istanbul ignore next */\n    public dropDownVisible(): void { return; };\n    /* istanbul ignore next */\n    public findListItemIndex(): void { return; };\n    /* istanbul ignore next */\n    public getSelectedListItem(): void { return; };\n    /* istanbul ignore next */\n    public selectedListIndex(): void { return; };\n    /* istanbul ignore next */\n    public showDropDown(): void { return; };\n    /* istanbul ignore next */\n    public hideDropDown(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgEditorBase } from \"./igeditorbase\";\nimport { NgModel } from \"@angular/forms\";\n\n\n@Component({\n    selector: \"ig-date-picker\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"locale\", \"suppressNotifications\", \"regional\", \"inputMask\", \"dataMode\", \"unfilledCharsPrompt\", \"padChar\", \"emptyChar\", \"minValue\", \"maxValue\", \"dateDisplayFormat\", \"dateInputFormat\", \"spinDelta\", \"limitSpinToCurrentField\", \"enableUTCDates\", \"centuryThreshold\", \"yearShift\", \"datepickerOptions\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\", \"itemSelected\"]\n})\nexport class IgDatePickerComponent extends IgEditorBase<IgDatePicker> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n    /**\n     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdatepicker#options:regional)\n     * Note that this method is for rare scenarios, use [regional](ui.igdatepicker#options:regional) option setter\n     */\n    /* istanbul ignore next */\n    public changeRegional(): void { return; };\n\n    /**\n     * Returns a reference to the jQuery calendar used as a picker selector\n     */\n    /* istanbul ignore next */\n    public getCalendar(): string { return; };\n    /* istanbul ignore next */\n    public dropDownContainer(): void { return; };\n    /* istanbul ignore next */\n    public findListItemIndex(): void { return; };\n    /* istanbul ignore next */\n    public getSelectedListItem(): void { return; };\n    /* istanbul ignore next */\n    public selectedListIndex(): void { return; };\n\n    /**\n     * Shows the drop down list.\n     */\n    /* istanbul ignore next */\n    public showDropDown(): void { return; };\n\n    /**\n     * Hides the drop down list.\n     */\n    /* istanbul ignore next */\n    public hideDropDown(): void { return; };\n\n    /**\n     * Returns a reference to the calendar button UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public dropDownButton(): string { return; };\n\n    /**\n     * Returns the visibility state of the calendar.\n     */\n    /* istanbul ignore next */\n    public dropDownVisible(): boolean { return; };\n\n    /**\n     * Destroys the widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Gets/Sets editor value.\n     *\n     * Note! This option doesn't use the dateInputFormat to extract the date\n     *\n     * @param newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/\"thicks\"/).\n     */\n    /* istanbul ignore next */\n    public value(newValue?: Date): Date { return; };\n\n    /**\n     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.\n     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.\n     */\n    /* istanbul ignore next */\n    public getSelectedDate(): Date { return; };\n\n    /**\n     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.\n     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.\n     *\n     * @param date\n     */\n    /* istanbul ignore next */\n    public selectDate(date: Date): void { return; };\n\n    /**\n     * Increases the date or time period, depending on the current cursor position.\n     *\n     * @param delta The increase delta.\n     */\n    /* istanbul ignore next */\n    public spinUp(delta?: number): void { return; };\n\n    /**\n     * Decreases the date or time period, depending on the current cursor position.\n     *\n     * @param delta The decrease delta.\n     */\n    /* istanbul ignore next */\n    public spinDown(delta?: number): void { return; };\n\n    /**\n     * Returns a reference to the spin up UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinUpButton(): string { return; };\n\n    /**\n     * Returns a reference to the spin down UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinDownButton(): string { return; };\n\n    /**\n     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.\n     */\n    /* istanbul ignore next */\n    public isValid(): boolean { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgEditorBase } from \"./igeditorbase\";\nimport { NgModel } from \"@angular/forms\";\n\n\n@Component({\n    selector: \"ig-time-picker\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"disabled\", \"create\", \"locale\", \"language\", \"regional\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"suppressNotifications\", \"suppressKeyboard\", \"inputMask\", \"dataMode\", \"unfilledCharsPrompt\", \"padChar\", \"emptyChar\", \"minValue\", \"maxValue\", \"dateDisplayFormat\", \"dateInputFormat\", \"displayTimeOffset\", \"spinDelta\", \"limitSpinToCurrentField\", \"enableUTCDates\", \"centuryThreshold\", \"yearShift\", \"itemsDelta\", \"timeInputFormat\", \"timeDisplayFormat\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\"]\n})\nexport class IgTimePickerComponent extends IgEditorBase<IgTimePicker> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n    /**\n     * Gets the selected list item.\n     */\n    /* istanbul ignore next */\n    public getSelectedListItem(): string { return; };\n\n    /**\n     * Returns the visibility state of the calendar.\n     */\n    /* istanbul ignore next */\n    public dropDownVisible(): boolean { return; };\n\n    /**\n     * Returns a reference to the drop-down button UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public dropDownButton(): string { return; };\n\n    /**\n     * Gets reference to jquery object which is used as container of drop-down list.\n     */\n    /* istanbul ignore next */\n    public dropDownContainer(): string { return; };\n\n    /**\n     * Finds index of list item by text that matches with the search parameters.\n     *\n     * @param text The text to search for in the drop down list.\n     * @param matchType The rule that is applied for searching the text.\n     */\n    /* istanbul ignore next */\n    public findListItemIndex(text: string, matchType?: Object): number { return; };\n\n    /**\n     * Gets the index of the selected list item. Sets selected item by index.\n     *\n     * @param index The index of the item that needs to be selected.\n     */\n    /* istanbul ignore next */\n    public selectedListIndex(index?: number): number { return; };\n    /* istanbul ignore next */\n    public value(newValue: Object): void { return; };\n    /* istanbul ignore next */\n    public selectDate(): void { return; };\n\n    /**\n     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)\n     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter\n     */\n    /* istanbul ignore next */\n    public changeRegional(): void { return; };\n\n    /**\n     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.\n     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.\n     */\n    /* istanbul ignore next */\n    public getSelectedDate(): Date { return; };\n\n    /**\n     * Increases the date or time period, depending on the current cursor position.\n     *\n     * @param delta The increase delta.\n     */\n    /* istanbul ignore next */\n    public spinUp(delta?: number): void { return; };\n\n    /**\n     * Decreases the date or time period, depending on the current cursor position.\n     *\n     * @param delta The decrease delta.\n     */\n    /* istanbul ignore next */\n    public spinDown(delta?: number): void { return; };\n\n    /**\n     * Returns a reference to the spin up UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinUpButton(): string { return; };\n\n    /**\n     * Returns a reference to the spin down UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinDownButton(): string { return; };\n\n    /**\n     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.\n     */\n    /* istanbul ignore next */\n    public isValid(): boolean { return; };\n}","import { IgEditorBase } from \"./igeditorbase\";\nimport { Renderer, IterableDiffers, Optional, ElementRef, Component, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { NgModel } from \"@angular/forms\";\n\n@Component({\n    selector: \"ig-mask-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"locale\", \"suppressNotifications\", \"regional\", \"inputMask\", \"dataMode\", \"unfilledCharsPrompt\", \"padChar\", \"emptyChar\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\"]\n})\nexport class IgMaskEditorComponent extends IgEditorBase<IgMaskEditor> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n    /**\n     * Gets/Sets mask editor value.\n     *\n     * @param newValue New mask editor value.\n     */\n    /* istanbul ignore next */\n    public value(newValue?: string): string { return; };\n    /* istanbul ignore next */\n    public dropDownContainer(): void { return; };\n    /* istanbul ignore next */\n    public showDropDown(): void { return; };\n    /* istanbul ignore next */\n    public hideDropDown(): void { return; };\n    /* istanbul ignore next */\n    public dropDownButton(): void { return; };\n    /* istanbul ignore next */\n    public spinUpButton(): void { return; };\n    /* istanbul ignore next */\n    public spinDownButton(): void { return; };\n    /* istanbul ignore next */\n    public dropDownVisible(): void { return; };\n    /* istanbul ignore next */\n    public findListItemIndex(): void { return; };\n    /* istanbul ignore next */\n    public selectedListIndex(): void { return; };\n    /* istanbul ignore next */\n    public getSelectedListItem(): void { return; };\n    /* istanbul ignore next */\n    public spinUp(): void { return; };\n    /* istanbul ignore next */\n    public spinDown(): void { return; };\n\n    /**\n     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.\n     */\n    /* istanbul ignore next */\n    public isValid(): boolean { return; };\n\n    /**\n     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)\n     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter\n     */\n    /* istanbul ignore next */\n    public changeLocale(): void { return; };\n\n    /**\n     * Gets the visible text in the editor.\n     */\n    /* istanbul ignore next */\n    public displayValue(): string { return; };\n\n    /**\n     * Returns a reference to the clear button UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public clearButton(): string { return; };\n\n    /**\n     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.\n     */\n    /* istanbul ignore next */\n    public getSelectedText(): string { return; };\n\n    /**\n     * Gets the start index of the selected text in the editor.\n     */\n    /* istanbul ignore next */\n    public getSelectionStart(): number { return; };\n\n    /**\n     * Gets the end index of the selected text in the editor.\n     */\n    /* istanbul ignore next */\n    public getSelectionEnd(): number { return; };\n\n    /**\n     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.\n     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.\n     *\n     * @param string The string to be inserted.\n     */\n    /* istanbul ignore next */\n    public insert(string: string): void { return; };\n\n    /**\n     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.\n     *\n     * @param start Start of the selection.\n     * @param end End of the selection.\n     */\n    /* istanbul ignore next */\n    public select(start: number, end: number): void { return; };\n}","import { Component, Renderer, ElementRef, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgEditorBase } from \"./igeditorbase\";\nimport { NgModel } from \"@angular/forms\";\n\n@Component({\n    selector: \"ig-numeric-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"locale\", \"suppressNotifications\", \"regional\", \"negativeSign\", \"negativePattern\", \"decimalSeparator\", \"groupSeparator\", \"groups\", \"maxDecimals\", \"minDecimals\", \"dataMode\", \"minValue\", \"maxValue\", \"spinDelta\", \"scientificFormat\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\"]\n})\nexport class IgNumericEditorComponent extends IgEditorBase<IgNumericEditor> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n\n    /**\n     * Gets/Sets editor value.\n     *\n     * @param newValue New editor value.\n     */\n    /* istanbul ignore next */\n    public value(newValue?: number): number { return; };\n\n    /**\n     * Finds index of list item by text that matches with the search parameters.\n     *\n     * @param number The text to search for.\n     */\n    /* istanbul ignore next */\n    public findListItemIndex(number: number): number { return; };\n    /* istanbul ignore next */\n    public getSelectedText(): void { return; };\n    /* istanbul ignore next */\n    public getSelectionStart(): void { return; };\n    /* istanbul ignore next */\n    public getSelectionEnd(): void { return; };\n\n    /**\n     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.\n     *\n     * @param delta Increments value.\n     */\n    /* istanbul ignore next */\n    public spinUp(delta?: number): void { return; };\n\n    /**\n     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.\n     *\n     * @param delta Decrement value.\n     */\n    /* istanbul ignore next */\n    public spinDown(delta?: number): void { return; };\n\n    /**\n     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).\n     */\n    /* istanbul ignore next */\n    public selectListIndexUp(): void { return; };\n\n    /**\n     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).\n     */\n    /* istanbul ignore next */\n    public selectListIndexDown(): void { return; };\n\n    /**\n     * Gets current regional.\n     */\n    /* istanbul ignore next */\n    public getRegionalOption(): string { return; };\n\n    /**\n     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)\n     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter\n     */\n    /* istanbul ignore next */\n    public changeRegional(): void { return; };\n\n    /**\n     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)\n     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter\n     */\n    /* istanbul ignore next */\n    public changeLocale(): void { return; };\n\n    /**\n     * Gets the visible text in the editor.\n     */\n    /* istanbul ignore next */\n    public displayValue(): string { return; };\n\n    /**\n     * Gets reference to jquery object which is used as container of drop-down list.\n     */\n    /* istanbul ignore next */\n    public dropDownContainer(): string { return; };\n\n    /**\n     * Shows the drop down list.\n     */\n    /* istanbul ignore next */\n    public showDropDown(): void { return; };\n\n    /**\n     * Hides the drop down list.\n     */\n    /* istanbul ignore next */\n    public hideDropDown(): void { return; };\n\n    /**\n     * Returns a reference to the drop-down button UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public dropDownButton(): string { return; };\n\n    /**\n     * Returns if the drop-down list is visible.\n     */\n    /* istanbul ignore next */\n    public dropDownVisible(): boolean { return; };\n\n    /**\n     * Returns a reference to the clear button UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public clearButton(): string { return; };\n\n    /**\n     * Gets the index of the selected list item. Sets selected item by index.\n     *\n     * @param index The index of the item that needs to be selected.\n     */\n    /* istanbul ignore next */\n    public selectedListIndex(index?: number): number { return; };\n\n    /**\n     * Gets the selected list item.\n     */\n    /* istanbul ignore next */\n    public getSelectedListItem(): string { return; };\n\n    /**\n     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.\n     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.\n     *\n     * @param string The string to be inserted.\n     */\n    /* istanbul ignore next */\n    public insert(string: string): void { return; };\n\n    /**\n     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.\n     *\n     * @param start Start of the selection.\n     * @param end End of the selection.\n     */\n    /* istanbul ignore next */\n    public select(start: number, end: number): void { return; };\n\n    /**\n     * Returns a reference to the spin up UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinUpButton(): string { return; };\n\n    /**\n     * Returns a reference to the spin down UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinDownButton(): string { return; };\n}","import { Component, Renderer, ElementRef, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgEditorBase } from \"./igeditorbase\";\nimport { NgModel } from \"@angular/forms\";\n\n@Component({\n    selector: \"ig-percent-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"locale\", \"suppressNotifications\", \"regional\", \"negativeSign\", \"negativePattern\", \"decimalSeparator\", \"groupSeparator\", \"groups\", \"maxDecimals\", \"minDecimals\", \"dataMode\", \"minValue\", \"maxValue\", \"spinDelta\", \"scientificFormat\", \"positivePattern\", \"percentSymbol\", \"displayFactor\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\"]\n})\nexport class IgPercentEditorComponent extends IgEditorBase<IgPercentEditor> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n\n    /**\n     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.\n     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.\n     *\n     * @param string The string to be inserted.\n     */\n    /* istanbul ignore next */\n    public insert(string: string): void { return; };\n\n    /**\n     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.\n     *\n     * @param symbol New percent symbol.\n     */\n    /* istanbul ignore next */\n    public percentSymbol(symbol?: Object): string { return; };\n\n    /**\n     * Gets/Sets editor value.\n     *\n     * @param newValue New editor value.\n     */\n    /* istanbul ignore next */\n    public value(newValue?: number): number { return; };\n\n    /**\n     * Finds index of list item by text that matches with the search parameters.\n     *\n     * @param number The text to search for.\n     */\n    /* istanbul ignore next */\n    public findListItemIndex(number: number): number { return; };\n    /* istanbul ignore next */\n    public getSelectedText(): void { return; };\n    /* istanbul ignore next */\n    public getSelectionStart(): void { return; };\n    /* istanbul ignore next */\n    public getSelectionEnd(): void { return; };\n\n    /**\n     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.\n     *\n     * @param delta Increments value.\n     */\n    /* istanbul ignore next */\n    public spinUp(delta?: number): void { return; };\n\n    /**\n     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.\n     *\n     * @param delta Decrement value.\n     */\n    /* istanbul ignore next */\n    public spinDown(delta?: number): void { return; };\n\n    /**\n     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).\n     */\n    /* istanbul ignore next */\n    public selectListIndexUp(): void { return; };\n\n    /**\n     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).\n     */\n    /* istanbul ignore next */\n    public selectListIndexDown(): void { return; };\n\n    /**\n     * Gets current regional.\n     */\n    /* istanbul ignore next */\n    public getRegionalOption(): string { return; };\n\n    /**\n     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)\n     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter\n     */\n    /* istanbul ignore next */\n    public changeRegional(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgEditorBase } from \"./igeditorbase\";\nimport { NgModel } from \"@angular/forms\";\n\n@Component({\n    selector: \"ig-text-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"value\", \"tabIndex\", \"allowNullValue\", \"nullValue\", \"inputName\", \"readOnly\", \"validatorOptions\", \"buttonType\", \"listItems\", \"listWidth\", \"listItemHoverDuration\", \"dropDownAttachedToBody\", \"dropDownAnimationDuration\", \"visibleItemsCount\", \"includeKeys\", \"excludeKeys\", \"textAlign\", \"placeHolder\", \"selectionOnFocus\", \"textMode\", \"spinWrapAround\", \"isLimitedToListValues\", \"revertIfNotValid\", \"preventSubmitOnEnter\", \"dropDownOrientation\", \"maxLength\", \"dropDownOnReadOnly\", \"toUpper\", \"toLower\", \"locale\", \"suppressNotifications\"],\n    outputs: [\"rendering\", \"rendered\", \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"blur\", \"focus\", \"keydown\", \"keypress\", \"keyup\", \"valueChanging\", \"valueChanged\", \"dropDownListOpening\", \"dropDownListOpened\", \"dropDownListClosing\", \"dropDownListClosed\", \"dropDownItemSelecting\", \"dropDownItemSelected\", \"textChanged\"]\n})\nexport class IgTextEditorComponent extends IgEditorBase<IgTextEditor> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, @Optional() public model: NgModel) { super(el, renderer, differs, kvalDiffers, cdr, model); }\n\n    /**\n     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)\n     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter\n     */\n    /* istanbul ignore next */\n    public changeLocale(): void { return; };\n\n    /**\n     * Gets the visible text in the editor.\n     */\n    /* istanbul ignore next */\n    public displayValue(): string { return; };\n\n    /**\n     * Gets reference to jquery object which is used as container of drop-down list.\n     */\n    /* istanbul ignore next */\n    public dropDownContainer(): string { return; };\n\n    /**\n     * Shows the drop down list.\n     */\n    /* istanbul ignore next */\n    public showDropDown(): void { return; };\n\n    /**\n     * Hides the drop down list.\n     */\n    /* istanbul ignore next */\n    public hideDropDown(): void { return; };\n\n    /**\n     * Returns a reference to the drop-down button UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public dropDownButton(): string { return; };\n\n    /**\n     * Returns if the drop-down list is visible.\n     */\n    /* istanbul ignore next */\n    public dropDownVisible(): boolean { return; };\n\n    /**\n     * Returns a reference to the clear button UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public clearButton(): string { return; };\n\n    /**\n     * Finds index of list item by text that matches with the search parameters.\n     *\n     * @param text The text to search for in the drop down list.\n     * @param matchType The rule that is applied for searching the text.\n     */\n    /* istanbul ignore next */\n    public findListItemIndex(text: string, matchType?: Object): number { return; };\n\n    /**\n     * Gets the index of the selected list item. Sets selected item by index.\n     *\n     * @param index The index of the item that needs to be selected.\n     */\n    /* istanbul ignore next */\n    public selectedListIndex(index?: number): number { return; };\n\n    /**\n     * Gets the selected list item.\n     */\n    /* istanbul ignore next */\n    public getSelectedListItem(): string { return; };\n\n    /**\n     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.\n     */\n    /* istanbul ignore next */\n    public getSelectedText(): string { return; };\n\n    /**\n     * Gets the start index of the selected text in the editor.\n     */\n    /* istanbul ignore next */\n    public getSelectionStart(): number { return; };\n\n    /**\n     * Gets the end index of the selected text in the editor.\n     */\n    /* istanbul ignore next */\n    public getSelectionEnd(): number { return; };\n\n    /**\n     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.\n     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.\n     *\n     * @param string The string to be inserted.\n     */\n    /* istanbul ignore next */\n    public insert(string: string): void { return; };\n\n    /**\n     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.\n     *\n     * @param start Start of the selection.\n     * @param end End of the selection.\n     */\n    /* istanbul ignore next */\n    public select(start: number, end: number): void { return; };\n\n    /**\n     * Selects the previous item from the drop-down list.\n     */\n    /* istanbul ignore next */\n    public spinUp(): void { return; };\n\n    /**\n     * Selects the next item from the drop-down list.\n     */\n    /* istanbul ignore next */\n    public spinDown(): void { return; };\n\n    /**\n     * Returns a reference to the spin up UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinUpButton(): string { return; };\n\n    /**\n     * Returns a reference to the spin down UI element of the editor.\n     */\n    /* istanbul ignore next */\n    public spinDownButton(): string { return; };\n\n    /**\n     * Gets/Sets name attribute applied to the editor element.\n     *\n     * @param newValue The new input name.\n     */\n    /* istanbul ignore next */\n    public inputName(newValue?: string): string { return; };\n\n    public value(newValue: Object): void { return; };\n\n    /**\n     * Gets the input element of the editor.\n     */\n    /* istanbul ignore next */\n    public field(): string { return; };\n\n    /**\n     * Gets a reference to the jQuery element that wraps the editor.\n     */\n    /* istanbul ignore next */\n    public editorContainer(): string { return; };\n\n    /**\n     * Gets whether the editor has focus.\n     */\n    /* istanbul ignore next */\n    public hasFocus(): boolean { return; };\n\n    /**\n     * Sets focus to the editor after the specified delay.\n     *\n     * @param delay The delay before focusing the editor.\n     */\n    /* istanbul ignore next */\n    public setFocus(delay?: number): void { return; };\n\n    /**\n     * Hides the editor.\n     */\n    /* istanbul ignore next */\n    public hide(): void { return; };\n\n    /**\n     * Shows the editor.\n     */\n    /* istanbul ignore next */\n    public show(): void { return; };\n\n    /**\n     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.\n     */\n    /* istanbul ignore next */\n    public validator(): Object { return; };\n\n    /**\n     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.\n     */\n    /* istanbul ignore next */\n    public isValid(): boolean { return; };\n\n    /**\n     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).\n     */\n    /* istanbul ignore next */\n    public validate(): boolean { return; };\n\n    /**\n     * Destroys the widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, SimpleChanges, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-tree\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"checkboxMode\", \"singleBranchExpand\", \"hotTracking\", \"parentNodeImageUrl\", \"parentNodeImageClass\", \"parentNodeImageTooltip\", \"leafNodeImageUrl\", \"leafNodeImageClass\", \"leafNodeImageTooltip\", \"animationDuration\", \"pathSeparator\", \"dataSource\", \"dataSourceUrl\", \"dataSourceType\", \"responseDataKey\", \"responseDataType\", \"requestType\", \"responseContentType\", \"initialExpandDepth\", \"loadOnDemand\", \"bindings\", \"defaultNodeTarget\", \"dragAndDrop\", \"updateUrl\", \"dragAndDropSettings\"],\n    outputs: [\"dataBinding\", \"dataBound\", \"rendering\", \"rendered\", \"selectionChanging\", \"selectionChanged\", \"nodeCheckstateChanging\", \"nodeCheckstateChanged\", \"nodePopulating\", \"nodePopulated\", \"nodeCollapsing\", \"nodeCollapsed\", \"nodeExpanding\", \"nodeExpanded\", \"nodeClick\", \"nodeDoubleClick\", \"dragStart\", \"drag\", \"dragStop\", \"nodeDropping\", \"nodeDropped\"]\n})\nexport class IgTreeComponent extends IgControlBase<IgTree> {\n    private _dataSource: any;\n    private _changes: any;\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n    };\n\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n\n    ngOnInit() {\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n    public ngOnChanges(changes: SimpleChanges): void {\n        const ds = \"dataSource\";\n        //const options = \"options\";\n        if (ds in changes) {\n            const value = changes[ds].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create();\n                    this._changes = [];\n                    for (var i = 0; i < this._dataSource.length; i++) {\n                        this._changes.push(this.kvalDiffers.find({}).create());\n                    }\n                }\n                catch (e) {\n                    throw new Error(\"Only binding to arrays is supported.\");\n                }\n            }\n        }\n        super.ngOnChanges(changes);\n    }\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this._dataSource);\n            //check if grid is initialized\n            const elem = jQuery(this._el).data(this._widgetName);\n            if (changes && elem) {\n                this.dataSourceApplyChanges(changes);\n            }\n            if (this._changes && elem) {\n                //check recs\n                for (var i = 0; i < this._dataSource.length; i++) {\n                    var item = this._dataSource[i];\n                    var rowChanges = this._changes[i].diff(item);\n                    if (rowChanges) {\n                        rowChanges.forEachChangedItem((change: any) => {\n                            this.updateItem(item, change.currentValue, change.key);\n                        });\n                    }\n                }\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    addItem(item, index) {\n        this.dataBind();\n        this._changes.push(this.kvalDiffers.find({}).create());\n\n    }\n    deleteItem(item, index) {\n        this.dataBind();\n        this._changes.splice(index, 1);\n    }\n    dataSourceApplyChanges(changes) {\n        changes.forEachAddedItem(r => this.addItem(r.item, r.currentIndex));\n        changes.forEachRemovedItem(r => { this.deleteItem(r.item, r.previousIndex); });\n\n    }\n    updateItem(item, value, key) {\n        this.dataBind();\n    }\n\n    public markForCheck() {\n        super.markForCheck();\n        const bindings = this[\"bindings\"] || this.options.bindings;\n        if (bindings && bindings.childDataProperty) {\n            this.dataBind();\n        }\n    }\n    // optionChange(options?) {\n    // \tvar opts = options || jQuery.extend(true, {}, this._config);\n    // \t// Bindings are modified internally by the tree. Excluding them from the change detection\n    // \tif (opts.bindings) {\n    // \t\tdelete opts.bindings;\n    // \t}\n    // \tsuper.optionChange(opts);\n    // }\n\n    /**\n     * Performs databinding on the igTree.\n     */\n    /* istanbul ignore next */\n    public dataBind(): void { return; };\n\n    /**\n     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.\n     *\n     * @param node     Specifies the node element the checkbox of which would be toggled.\n     * @param event     Indicates the browser event which triggered this action, if this is not an API call.\n     */\n    /* istanbul ignore next */\n    public toggleCheckstate(node: Object, event?: Object): void { return; };\n\n    /**\n     * Toggles the collapse/expand state for the specified node.\n     *\n     * @param node     Specifies the node element the checkbox of which would be toggled.\n     * @param event     Indicates the browser event which triggered this action, if this is not an API call.\n     */\n    /* istanbul ignore next */\n    public toggle(node: Object, event?: Object): void { return; };\n\n    /**\n     * Expands the tree down to the specified node and selects the node if specified.\n     *\n     * @param node     Specifies the node element down to which the tree would be expanded.\n     * @param toSelect     Specifies the whether to select the node after expanding to it.\n     */\n    /* istanbul ignore next */\n    public expandToNode(node: Object, toSelect?: boolean): void { return; };\n\n    /**\n     * Expands the specified node.\n     *\n     * @param node     Specifies the node element to expand.\n     */\n    /* istanbul ignore next */\n    public expand(node: Object): void { return; };\n\n    /**\n     * Collapses the specified node.\n     *\n     * @param node     Specifies the node element to collapse.\n     */\n    /* istanbul ignore next */\n    public collapse(node: Object): void { return; };\n\n    /**\n     * Retrieves the parent node element of the specified node element.\n     *\n     * @param node     Specifies the jQuery selected node element to collapse.\n     */\n    /* istanbul ignore next */\n    public parentNode(node: Object): Object { return; };\n\n    /**\n     * Retrieves the jQuery element of the node with the specified path.\n     *\n     * @param nodePath     Specifies the path to the required node.\n     */\n    /* istanbul ignore next */\n    public nodeByPath(nodePath: string): Object { return; };\n\n    /**\n     * Retrieves the jQuery element of the node with the specified value.\n     *\n     * @param value     Specifies the value of the required node.\n     */\n    /* istanbul ignore next */\n    public nodesByValue(value: string): Object { return; };\n\n    /**\n     * Retrieves all the node objects for the nodes that have their checkboxes checked.\n     */\n    /* istanbul ignore next */\n    public checkedNodes(): any[] { return; };\n\n    /**\n     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.\n     */\n    /* istanbul ignore next */\n    public uncheckedNodes(): any[] { return; };\n\n    /**\n     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.\n     */\n    /* istanbul ignore next */\n    public partiallyCheckedNodes(): any[] { return; };\n\n    /**\n     * Selects a node.\n     *\n     * @param node     Specifies the node element to be selected.\n     * @param event     Indicates the browser event which triggered this action, if this is not an API call.\n     */\n    /* istanbul ignore next */\n    public select(node: Object, event?: Object): void { return; };\n\n    /**\n     * Deselects the specified node.\n     *\n     * @param node     Specifies the node element to be deselected.\n     */\n    /* istanbul ignore next */\n    public deselect(node: Object): void { return; };\n\n    /**\n     * Deselects all the selected nodes.\n     */\n    /* istanbul ignore next */\n    public clearSelection(): void { return; };\n\n    /**\n     * Retrieves the node object for the selected node.\n     */\n    /* istanbul ignore next */\n    public selectedNode(): Object { return; };\n\n    /**\n     * Retrieves all node objects with the specified text (case sensitive).\n     *\n     * @param text     The text to search for.\n     * @param parent     The node element to start the search from. If not specified then search would start from the root of the tree.\n     */\n    /* istanbul ignore next */\n    public findNodesByText(text: string, parent?: Object): any[] { return; };\n\n    /**\n     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).\n     *\n     * @param text     The text to search for.\n     * @param parent     The node element the children of which would be searched.\n     */\n    /* istanbul ignore next */\n    public findImmediateNodesByText(text: string, parent?: Object): any[] { return; };\n\n    /**\n     * Retrieves the n-th jQuery node element child of the specified parent.\n     *\n     * @param index     Specifies the index the node at which to be retrieved.\n     * @param parent     The parent node element to start the search from.\n     */\n    /* istanbul ignore next */\n    public nodeByIndex(index: number, parent?: Object): Object { return; };\n\n    /**\n     * Retrieves a node object for the specified node element.\n     *\n     * @param element     Specifies the node element.\n     */\n    /* istanbul ignore next */\n    public nodeFromElement(element: Object): Object { return; };\n\n    /**\n     * Retrieves a node object collection of the immediate children of the provided node element.\n     *\n     * @param parent     Specifies the node element.\n     */\n    /* istanbul ignore next */\n    public children(parent: Object): any[] { return; };\n\n    /**\n     * Retrieves a node object collection of the immediate children of the node with the provided path.\n     *\n     * @param path     Specifies the path of the node the children of which are to be retrieved.\n     */\n    /* istanbul ignore next */\n    public childrenByPath(path: string): any[] { return; };\n\n    /**\n     * Returns true if the provided node element is selected and false otherwise.\n     *\n     * @param node     Specifies the node element.\n     */\n    /* istanbul ignore next */\n    public isSelected(node: Object): boolean { return; };\n\n    /**\n     * Returns true if the provided node element is expanded and false otherwise.\n     *\n     * @param node     Specifies the node element.\n     */\n    /* istanbul ignore next */\n    public isExpanded(node: Object): boolean { return; };\n\n    /**\n     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.\n     *\n     * @param node     Specifies the node element.\n     */\n    /* istanbul ignore next */\n    public isChecked(node: Object): boolean { return; };\n\n    /**\n     * Returns the specified node checkstate.\n     *\n     * @param node     Specifies the node element.\n     */\n    /* istanbul ignore next */\n    public checkState(node: Object): string { return; };\n\n    /**\n     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.\n     *\n     * @param node     Specifies the data used to create the new nodeÑ.\n     * @param parent     Specifies the element of the parent node the nodes are to be appended to.\n     * @param nodeIndex     Specifies the index at which the nodes to be inserted.\n     */\n    /* istanbul ignore next */\n    public addNode(node: Object, parent?: Object, nodeIndex?: number): void { return; };\n\n    /**\n     * Removes the node with with the specified path and all of its children.\n     *\n     * @param path     Specifies the path of the node to be removed.\n     */\n    /* istanbul ignore next */\n    public removeAt(path: string): void { return; };\n\n    /**\n     * Removing all the nodes with the specified value.\n     *\n     * @param value     Specifies the value of the nodes to be removed.\n     */\n    /* istanbul ignore next */\n    public removeNodesByValue(value: string): void { return; };\n\n    /**\n     * Performs a UI update on the provided node element with the provided data.\n     *\n     * @param element     Specifies the node to be updated.\n     * @param data     Specifies the new data item the node would update according to.\n     */\n    /* istanbul ignore next */\n    public applyChangesToNode(element: Object, data: Object): void { return; };\n\n    /**\n     * Returns the transaction log stack.\n     */\n    /* istanbul ignore next */\n    public transactionLog(): any[] { return; };\n\n    /**\n     * Returns the data for the node with specified path.\n     *\n     * @param path     Specifies the node path for which the data is returned.\n     */\n    /* istanbul ignore next */\n    public nodeDataFor(path: string): Object { return; };\n\n    /**\n     * Destructor for the igTree widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { IgControlBase } from \"./igcontrolbase\";\nimport { ElementRef, Renderer, KeyValueDiffers, IterableDiffers, ChangeDetectorRef } from \"@angular/core\";\n\n\nexport class IgContentControlBase<Model> extends IgControlBase<Model> {\n\tprivate childNodes: Array<any>;\n\n\tconstructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n\t\tsuper(el, renderer, differs, kvalDiffers, cdr);\n\t\tthis.childNodes = el.nativeElement.childNodes;\n\t}\n\n\tngOnInit() {\n\t\tjQuery(this._el).append(this.childNodes);\n\t\tsuper.ngOnInit();\n\t}\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgContentControlBase } from \"../igcontrolbase/igcontentcontrolbase\";\n\n@Component({\n    selector: \"ig-dialog\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"mainElement\", \"state\", \"pinned\", \"closeOnEscape\", \"showCloseButton\", \"showMaximizeButton\", \"showMinimizeButton\", \"showPinButton\", \"pinOnMinimized\", \"imageClass\", \"headerText\", \"showHeader\", \"showFooter\", \"footerText\", \"dialogClass\", \"container\", \"height\", \"width\", \"minHeight\", \"minWidth\", \"maxHeight\", \"maxWidth\", \"draggable\", \"position\", \"resizable\", \"tabIndex\", \"openAnimation\", \"closeAnimation\", \"zIndex\", \"modal\", \"trackFocus\", \"closeButtonTitle\", \"minimizeButtonTitle\", \"maximizeButtonTitle\", \"pinButtonTitle\", \"unpinButtonTitle\", \"restoreButtonTitle\", \"temporaryUrl\", \"enableHeaderFocus\", \"enableDblclick\"],\n    outputs: [\"stateChanging\", \"stateChanged\", \"animationEnded\", \"focus\", \"blur\"]\n})\nexport class IgDialogComponent extends IgContentControlBase<IgDialog> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n    /**\n     * Destroys the igDialog and moves the target element to its original parent.\n     */\n    /* istanbul ignore next */\n    public destroy(): Object { return; };\n\n    /**\n     * Gets/Sets the state of the editor.\n     * \t\t\t\tNote: If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     *\n     * @param state     New state.\n     */\n    /* istanbul ignore next */\n    public state(state?: string): string { return; };\n\n    /**\n     * Gets reference to the dynamically created DIV element which represents the dialog.\n     */\n    /* istanbul ignore next */\n    public mainElement(): Element { return; };\n\n    /**\n     * Closes the dialog if it is opened.\n     * \t\t\t\tNotes:\n     * \t\t\t\t1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     * \t\t\t\t2. That method does not change minimized or maximized state of the dialog.\n     * \t\t\t\tIt means that method \"open\" will open the dialog and keep previous minimized or maximized state.\n     *\n     * @param e     Browser event: internal use only.\n     */\n    /* istanbul ignore next */\n    public close(e?: Object): Object { return; };\n\n    /**\n     * Opens the dialog if it is closed. Notes:\n     * \t\t\t\t1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     * \t\t\t\t2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by \"close\" method, then the dialog will open in minimized or maximized state respectively.\n     */\n    /* istanbul ignore next */\n    public open(): Object { return; };\n\n    /**\n     * Minimizes the dialog if it is not minimized.\n     * \t\t\t\tNote: If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     */\n    /* istanbul ignore next */\n    public minimize(): Object { return; };\n\n    /**\n     * Maximizes the dialog if it is not maximized.\n     * \t\t\t\tNote: If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     */\n    /* istanbul ignore next */\n    public maximize(): Object { return; };\n\n    /**\n     * Sets the normal state for the dialog if it was maximized or minimized.\n     * \t\t\t\tNote: If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     */\n    /* istanbul ignore next */\n    public restore(): Object { return; };\n\n    /**\n     * Pins the dialog if it is not pinned.\n     * \t\t\t\tWhen the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.\n     * \t\t\t\tThe pinned dialog does not support modal state, maximized state and it can not be moved.\n     * \t\t\t\tNotes:\n     * \t\t\t\t1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.\n     * \t\t\t\t2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     */\n    /* istanbul ignore next */\n    public pin(): Object { return; };\n\n    /**\n     * Unpins the dialog if it is pinned.\n     * \t\t\t\tNote: If the state of the dialog changes, then stateChanging and stateChanged events are raised.\n     */\n    /* istanbul ignore next */\n    public unpin(): Object { return; };\n\n    /**\n     * Gets a reference to the top modal dialog.\n     */\n    /* istanbul ignore next */\n    public getTopModal(): Object { return; };\n\n    /**\n     * Checks if the dialog is modal and if it is currently active.\n     */\n    /* istanbul ignore next */\n    public isTopModal(): boolean { return; };\n\n    /**\n     * Moves a not modal dialog to the top.\n     *\n     * @param e     Original event of browser.\n     */\n    /* istanbul ignore next */\n    public moveToTop(e?: Object): Object { return; };\n\n    /**\n     * Retrieves the igDialog content container or sets its content to be the new content provided.\n     *\n     * @param newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.\n     */\n    /* istanbul ignore next */\n    public content(newContent?: string): Object { return; };\n}","import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgContentControlBase } from \"../igcontrolbase/igcontentcontrolbase\";\n\n@Component({\n    selector: \"ig-splitter\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"orientation\", \"panels\", \"dragDelta\", \"resizeOtherSplitters\"],\n    outputs: [\"collapsed\", \"expanded\", \"resizeStarted\", \"resizing\", \"resizeEnded\", \"layoutRefreshing\", \"layoutRefreshed\"]\n})\nexport class IgSplitterComponent extends IgContentControlBase<IgSplitter> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n\n    /**\n     * Returns the element that represents this widget.\n     */\n    /* istanbul ignore next */\n    public widget(): Object { return; };\n\n\n    /**\n     * Expand the specified panel by index.\n     *\n     * @param index Specifies the index of the panel to expand.\n     */\n    /* istanbul ignore next */\n    public expandAt(index: Object): void { return; };\n\n\n    /**\n     * Collapse the specified panel.\n     *\n     * @param index Specifies the index of the panel to collapse.\n     */\n    /* istanbul ignore next */\n    public collapseAt(index: Object): void { return; };\n\n\n    /**\n     * Retrieves the jQuery element of the first panel.\n     */\n    /* istanbul ignore next */\n    public firstPanel(): Object { return; };\n\n\n    /**\n     * Retrieves the jQuery element of the second panel.\n     */\n    /* istanbul ignore next */\n    public secondPanel(): Object { return; };\n\n\n    /**\n     * Refresh splitter layout, use this method to re-render the splitter if some changes to the layout are applied.\n     */\n    /* istanbul ignore next */\n    public refreshLayout(): void { return; };\n\n\n    /**\n     * You can set new size of the first panel after the splitter is rendered.\n     *\n     * @param size Specifies the new size of the first panel.\n     */\n    /* istanbul ignore next */\n    public setFirstPanelSize(size: Object): void { return; };\n\n\n    /**\n     * You can set new size of the second panel after the splitter is rendered.\n     *\n     * @param size Specifies the new size of the second panel.\n     */\n    /* istanbul ignore next */\n    public setSecondPanelSize(size: Object): void { return; };\n\n    /**\n     * Destroys the igSplitter widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgContentControlBase } from \"../igcontrolbase/igcontentcontrolbase\";\n\n@Component({\n    selector: \"ig-layout-manager\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"borderLayout\", \"gridLayout\", \"height\", \"itemCount\", \"items\", \"layoutMode\", \"width\"],\n    outputs: [\"internalResized\", \"internalResizing\", \"itemRendered\", \"itemRendering\", \"rendered\"]\n})\nexport class IgLayoutManagerComponent extends IgContentControlBase<IgLayoutManager> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n\n    /**\n     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)\n     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.\n     *\n     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.\n     * @param animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.\n     * @param event Indicates the browser even which triggered this action (not API).\n     */\n    /* istanbul ignore next */\n    public reflow(forceReflow?: boolean, animationDuration?: number, event?: Object): void { return; };\n\n    /**\n     * Destroy is part of the jQuery UI widget API and does the following:\n     *                     1. Remove custom CSS classes that were added.\n     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup\n     *                     3. Unbind all events that were bound.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgContentControlBase } from \"../igcontrolbase/igcontentcontrolbase\";\n\n@Component({\n    selector: \"ig-tile-manager\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"columnWidth\", \"columnHeight\", \"cols\", \"rows\", \"marginLeft\", \"marginTop\", \"rearrangeItems\", \"items\", \"dataSource\", \"minimizedState\", \"maximizedState\", \"maximizedTileIndex\", \"rightPanelCols\", \"rightPanelTilesWidth\", \"rightPanelTilesHeight\", \"showRightPanelScroll\", \"splitterOptions\", \"preventMaximizingSelector\", \"animationDuration\", \"dataSourceUrl\", \"responseDataKey\", \"responseDataType\", \"dataSourceType\", \"requestType\", \"responseContentType\"],\n    outputs: [\"dataBinding\", \"dataBound\", \"rendering\", \"rendered\", \"tileRendering\", \"tileRendered\", \"tileMaximizing\", \"tileMaximized\", \"tileMinimizing\", \"tileMinimized\"]\n})\nexport class IgTileManagerComponent extends IgContentControlBase<IgTileManager> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const widget = jQuery(this._el).data(this._widgetName);\n        if (widget) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /**\n     * Maximizes a given tile.\n     *\n     * @param $tileToMaximize Specifies the jQuery object of the tile element to be maximized.\n     * @param animDuration Specifies the animation duration for this maximizing.\n     * @param event Indicates the browser even which triggered this action (not API).\n     */\n    /* istanbul ignore next */\n    public maximize($tileToMaximize: Object, animDuration?: number, event?: Object): void { return; };\n\n    /**\n     * Minimizes the maximized tile. Has no effect if no maximized tile is present.\n     *\n     * @param animDuration Specifies the animation duration for this minimize.\n     * @param event Indicates the browser even which triggered this action (not API).\n     */\n    /* istanbul ignore next */\n    public minimize(animDuration?: number, event?: Object): void { return; };\n\n    /**\n     * Returns the maximized tile or null if such is not present.\n     * @return object|null Returns the maximized tile or null if such is not present.\n     */\n    /* istanbul ignore next */\n    public maximizedTile(): Object { return; };\n\n    /**\n     * Returns an array with the tiles in minimized state or null if such are not present.\n     * @return object|null Returns an array with the tiles in minimized state or null if such are not present.\n     */\n    /* istanbul ignore next */\n    public minimizedTiles(): Object { return; };\n\n    /**\n     * Returns the splitter associated with this tile manager or\n     *                 null if the tile manager was instantiated with maximizedTileIndex.\n     * @return object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.\n     */\n    /* istanbul ignore next */\n    public splitter(): Object { return; };\n\n    /**\n     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.\n     */\n    /* istanbul ignore next */\n    public layoutManager(): Object { return; };\n\n    /**\n     * Reflow the tile manager. Rearranging the tiles to fit in the container\n     *\n     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.\n     * @param animationDuration The animation duration to be used for this reflow only.\n     * @param event Indicates the browser even which triggered this action (not API).\n     */\n    /* istanbul ignore next */\n    public reflow(forceReflow?: Object, animationDuration?: number, event?: Object): void { return; };\n\n    /**\n     * Returns the element that represents this widget.\n     */\n    /* istanbul ignore next */\n    public widget(): Object { return; };\n\n    /**\n     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.\n     */\n    /* istanbul ignore next */\n    public dataBind(): void { return; };\n\n    /**\n     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.\n     */\n    /* istanbul ignore next */\n    public destroy(): Object { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, Optional, NgZone, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\nimport { ControlValueAccessor, NgModel } from \"@angular/forms\";\n\ndeclare var jQuery: any;\n\n@Component({\n    selector: \"ig-html-editor\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"showFormattingToolbar\", \"showTextToolbar\", \"showInsertObjectToolbar\", \"showCopyPasteToolbar\", \"width\", \"height\", \"toolbarSettings\", \"customToolbars\", \"inputName\", \"value\"],\n    outputs: [\"rendered\", \"rendering\", \"actionExecuting\", \"actionExecuted\", \"toolbarCollapsing\", \"toolbarCollapsed\", \"toolbarExpanding\", \"toolbarExpanded\", \"cut\", \"copy\", \"paste\", \"undo\", \"redo\", \"workspaceResized\"]\n})\nexport class IgHtmlEditorComponent extends IgControlBase<IgHtmlEditor> implements ControlValueAccessor {\n    protected _model: any;\n    protected _zone: any;\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, @Optional() public model: NgModel, private zone: NgZone, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n        if (model) {\n            model.valueAccessor = this;\n            this._zone = zone;\n            this._model = model;\n        }\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        let that = this;\n        if (this._model) {\n            var iframe = jQuery(this._el).find(\"iframe\")[0].contentWindow.document;\n            jQuery(iframe).find(\"body[contenteditable=true]\").on(\"keyup\", function (evt, ui) {\n                that._model.viewToModelUpdate(jQuery(evt.target).html());\n                that._zone.run(() => {\n                    that._model.viewToModelUpdate(jQuery(evt.target).html());\n                });\n            });\n        }\n\n    }\n    writeValue(value: any) {\n        if (!!jQuery(this._el).data(this._widgetName) && value !== null && value !== jQuery(this._el)[this._widgetName](\"getContent\", \"html\")) {\n            jQuery(this._el)[this._widgetName](\"setContent\", value, \"html\");\n        }\n    }\n\n    onChange = (_: any) => {\n    };\n    onTouched = () => {\n    };\n\n    registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Returns the element on which the widget was instantiated\n     */\n    /* istanbul ignore next */\n    public widget(): void { return; };\n\n    /**\n     * Resizes the height of the workspace\n     */\n    /* istanbul ignore next */\n    public resizeWorkspace(): void { return; };\n\n    /**\n     * Gets the content of the html editor.\n     *\n     * @param format Returns the content as html or plain text. Values can be \"text\" or \"html\".\n     */\n    /* istanbul ignore next */\n    public getContent(format: string): string { return; };\n\n    /**\n     * Sets the content of the html editor.\n     *\n     * @param content The content which will be set.\n     * @param format The content type: \"text\" or \"html\".\n     */\n    /* istanbul ignore next */\n    public setContent(content: string, format: string): void { return; };\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Executes htmleditor commands.\n     *\n     * @param actionName The command name.\n     * @param args Additional parameter for the command.\n     */\n    /* istanbul ignore next */\n    public executeAction(actionName: string, args?: Object): void { return; };\n\n    /**\n     * Returns true/false if the editor contents were modified or not.\n     */\n    /* istanbul ignore next */\n    public isDirty(): Object { return; };\n\n    /**\n     * Returns the window object associated with the Html Editor's content editable area\n     */\n    /* istanbul ignore next */\n    public contentWindow(): Object { return; };\n\n    /**\n     * Returns the document object associated with the Html Editor's content editable area\n     */\n    /* istanbul ignore next */\n    public contentDocument(): Object { return; };\n\n    /**\n     * Returns the content editable associated with this Html Editor\n     */\n    /* istanbul ignore next */\n    public contentEditable(): Object { return; };\n\n    /**\n     * Returns Selection object that represent the current selection in the content editable\n     */\n    /* istanbul ignore next */\n    public selection(): Object { return; };\n\n    /**\n     * Returns Range object that represent the current range in the content editable\n     */\n    /* istanbul ignore next */\n    public range(): Object { return; };\n\n    /**\n     * Inserts the provided content at the position of the caret.\n     *\n     * @param element Accepts html string, DOM element or a jQuery object.\n     */\n    /* istanbul ignore next */\n    public insertAtCaret(element: Object): void { return; };\n}","import { Component, Renderer, IterableDiffers, ElementRef, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\ndeclare var jQuery: any;\n\n@Component({\n    selector: \"ig-validator\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"onchange\", \"onblur\", \"onsubmit\", \"required\", \"number\", \"date\", \"email\", \"lengthRange\", \"valueRange\", \"creditCard\", \"pattern\", \"messageTarget\", \"errorMessage\", \"successMessage\", \"threshold\", \"equalTo\", \"custom\", \"fields\", \"notificationOptions\", \"requiredIndication\", \"optionalIndication\"],\n    outputs: [\"validating\", \"validated\", \"success\", \"error\", \"errorShowing\", \"errorHiding\", \"errorShown\", \"errorHidden\", \"successShowing\", \"successHiding\", \"successShown\", \"successHidden\", \"formValidating\", \"formValidated\", \"formError\", \"formSuccess\"]\n})\nexport class IgValidatorComponent extends IgControlBase<IgValidator> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n\n    ngOnInit() {\n        var evtName;\n        this._el = jQuery(document).find(\"#\" + this.widgetId);\n        jQuery(this._el)[this._widgetName](this.options);\n        this._events = new Map<string, string>();\n        //events binding\n        let that = this;\n        for (var propt in jQuery.ui[this._widgetName].prototype.events) {\n            evtName = this._widgetName.toLowerCase() + propt.toLowerCase();\n            this._events[evtName] = propt;\n            jQuery(this._el).on(evtName, function (evt, ui) {\n                that[that._events[evt.type]].emit({ event: evt, ui: ui });\n            });\n        }\n    }\n\n    /**\n     * Trigger validation and show errors for invalid fields.\n     *\n     * @param field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.\n     */\n    /* istanbul ignore next */\n    public validate(field?: Object): boolean { return; };\n\n    /**\n     * Trigger validation but do not display error messages.\n     *\n     * @param field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.\n     */\n    /* istanbul ignore next */\n    public isValid(field?: Object): boolean { return; };\n\n    /**\n     * Hide any possible message(s) (either messageTarget or igNotifier).\n     * \t\t\tNote: When the validator has a fields colleciton, not passing a field will hide messages on all fields.\n     *\n     * @param field    Optional field object, its selector or zero-based index to hide message for.\n     */\n    /* istanbul ignore next */\n    public hide(field?: Object): void { return; };\n\n    /**\n     * Gets all current error messages for invalid field(s). Note that this method does not valdiate and states and messages are only updated on validation, so\n     * \t\t\tthis can be used on formValidated event or after validate/isValid method calls.\n     *\n     * @param field    Optional field object, selector or zero-based index for a single field to get error message for.\n     */\n    /* istanbul ignore next */\n    public getErrorMessages(field?: Object): any[] { return; };\n\n    /**\n     * Check for currently displayed message(s). Takes an optional field.\n     * \t\t\tNote: When the validator has a fields colleciton, not passing a field will return a cumulative true even if just one field has a visible message.\n     *\n     * @param field    Optional field object, selector or zero-based index for a single field to get error message for.\n     */\n    /* istanbul ignore next */\n    public isMessageDisplayed(field?: Object): boolean { return; };\n\n    /**\n     * Gets the notifier for the igValidator or for a single filed.\n     *\n     * @param field    Optional field object, its selector or zero-based index to get notifier for.\n     */\n    /* istanbul ignore next */\n    public notifier(field?: Object): Object { return; };\n\n    /**\n     * Adds an new input to the fields collection and initializes it with the validator. Note: Additional fields are only accepted if the validator has been created with the collection.\n     *\n     * @param field    An object with the field selector and options.\n     */\n    /* istanbul ignore next */\n    public addField(field: Object): void { return; };\n\n    /**\n     * Removes an input from the fields collection.\n     *\n     * @param field    The field object to remove, its zero-based index or selector.\n     */\n    /* istanbul ignore next */\n    public removeField(field: Object): void { return; };\n\n    /**\n     * Updates a field in the validator collection. Used to reinitialize field in case a control has been created after the validator or to pass in new options.\n     *\n     * @param field    The field object to update, its zero-based index or selector.\n     * @param fieldOptions    New options to apply to the field.\n     */\n    /* istanbul ignore next */\n    public updateField(field: Object, fieldOptions?: Object): void { return; };\n\n    /**\n     * Destroys the validator widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-pivot-data-selector\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"dataSource\", \"dataSourceOptions\", \"deferUpdate\", \"dragAndDropSettings\", \"dropDownParent\", \"disableRowsDropArea\", \"disableColumnsDropArea\", \"disableMeasuresDropArea\", \"disableFiltersDropArea\", \"customMoveValidation\"],\n    outputs: [\"dataSelectorRendered\", \"dataSourceInitialized\", \"dataSourceUpdated\", \"deferUpdateChanged\", \"dragStart\", \"drag\", \"dragStop\", \"metadataDropping\", \"metadataDropped\", \"metadataRemoving\", \"metadataRemoved\", \"filterDropDownOpening\", \"filterDropDownOpened\", \"filterMembersLoaded\", \"filterDropDownOk\", \"filterDropDownClosing\", \"filterDropDownClosed\"]\n})\nexport class IgPivotDataSelectorComponent extends IgControlBase<IgPivotDataSelector> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); } public option(): void { return; };\n\n        @Input()\n        public set dataSource(value: any) {\n            this._dataSource = value;\n        const widget = jQuery(this._el).data(this._widgetName);\n        if (widget) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /**\n     * Updates the data source.\n     */\n    /* istanbul ignore next */\n    public update(): void { return; };\n\n    /**\n     * Destroy is part of the jQuery UI widget API and does the following:\n     *                 1. Remove custom CSS classes that were added.\n     *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.\n     *                 3. Unbind all events that were bound.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-pivot-grid\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"dataSource\", \"dataSourceOptions\", \"deferUpdate\", \"isParentInFrontForColumns\", \"isParentInFrontForRows\", \"compactColumnHeaders\", \"compactRowHeaders\", \"rowHeadersLayout\", \"compactColumnHeaderIndentation\", \"compactRowHeaderIndentation\", \"rowHeaderLinkGroupIndentation\", \"treeRowHeaderIndentation\", \"defaultRowHeaderWidth\", \"allowSorting\", \"firstSortDirection\", \"allowHeaderRowsSorting\", \"allowHeaderColumnsSorting\", \"levelSortDirections\", \"defaultLevelSortBehavior\", \"firstLevelSortDirection\", \"gridOptions\", \"dragAndDropSettings\", \"dropDownParent\", \"disableRowsDropArea\", \"disableColumnsDropArea\", \"disableMeasuresDropArea\", \"disableFiltersDropArea\", \"hideRowsDropArea\", \"hideColumnsDropArea\", \"hideMeasuresDropArea\", \"hideFiltersDropArea\", \"customMoveValidation\"],\n    outputs: [\"dataSourceInitialized\", \"dataSourceUpdated\", \"pivotGridHeadersRendered\", \"pivotGridRendered\", \"tupleMemberExpanding\", \"tupleMemberExpanded\", \"tupleMemberCollapsing\", \"tupleMemberCollapsed\", \"sorting\", \"sorted\", \"headersSorting\", \"headersSorted\", \"dragStart\", \"drag\", \"dragStop\", \"metadataDropping\", \"metadataDropped\", \"metadataRemoving\", \"metadataRemoved\", \"filterDropDownOpening\", \"filterDropDownOpened\", \"filterMembersLoaded\", \"filterDropDownOk\", \"filterDropDownClosing\", \"filterDropDownClosed\"]\n})\nexport class IgPivotGridComponent extends IgControlBase<IgPivotGrid> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); } public option(): void { return; };\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const widget = jQuery(this._el).data(this._widgetName);\n        if (widget) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /**\n     * Returns the igGrid instance used to render the OLAP data.\n     */\n    /* istanbul ignore next */\n    public grid(): Object { return; };\n\n    /**\n     * Triggers an update on the data source and the igPivotGrid.\n     */\n    /* istanbul ignore next */\n    public updateGrid(): void { return; };\n\n    /**\n     * Expands a member from the data source and returns true if the expand succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.\n     *\n     * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.\n     * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.\n     * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.\n     * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.\n     */\n    /* istanbul ignore next */\n    public expandTupleMember(tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean { return; };\n\n    /**\n     * Collapses a member from the data source and returns true if the collapse succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.\n     *\n     * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.\n     * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.\n     * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.\n     * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.\n     */\n    /* istanbul ignore next */\n    public collapseTupleMember(tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean { return; };\n\n    /**\n     * Returns an array with the applied sort directions on the igPivotGrid's columns. The returned array contains objects with the following properties:\n     *             memberNames: The names of the members in the tuple.\n     *             tupleIndex: The index of the tuple on the column axis in the original unsorted result.\n     *             sortDirection: The direction of the sort - ascending or descending.\n     */\n    /* istanbul ignore next */\n    public appliedColumnSortDirections(): any[] { return; };\n\n    /**\n     * Returns an array with the applied level sort direction items, which were used for the sorting of the header cells. The returned array contains objects with the following properties:\n     *             levelUniqueName: Specifies the unique name of the level, which was sorted.\n     *             sortDirection: The direction of the header sort - ascending or descending.\n     */\n    /* istanbul ignore next */\n    public appliedLevelSortDirections(): any[] { return; };\n\n    /**\n     * Destroy is part of the jQuery UI widget API and does the following:\n     *             1. Remove custom CSS classes that were added.\n     *             2. Unwrap any wrapping elements such as scrolling divs and other containers.\n     *             3. Unbind all events that were bound.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}\n","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-data-chart\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"isPagePanningAllowed\", \"syncChannel\", \"synchronizeVertically\", \"synchronizeHorizontally\", \"crosshairPoint\", \"windowRect\", \"horizontalZoomable\", \"verticalZoomable\", \"windowResponse\", \"windowRectMinWidth\", \"overviewPlusDetailPaneVisibility\", \"crosshairVisibility\", \"plotAreaBackground\", \"defaultInteraction\", \"dragModifier\", \"panModifier\", \"previewRect\", \"windowPositionHorizontal\", \"windowPositionVertical\", \"windowScaleHorizontal\", \"windowScaleVertical\", \"circleMarkerTemplate\", \"triangleMarkerTemplate\", \"pyramidMarkerTemplate\", \"squareMarkerTemplate\", \"diamondMarkerTemplate\", \"pentagonMarkerTemplate\", \"hexagonMarkerTemplate\", \"tetragramMarkerTemplate\", \"pentagramMarkerTemplate\", \"hexagramMarkerTemplate\", \"topMargin\", \"leftMargin\", \"rightMargin\", \"bottomMargin\", \"autoMarginWidth\", \"autoMarginHeight\", \"isSquare\", \"gridMode\", \"brushes\", \"markerBrushes\", \"outlines\", \"markerOutlines\", \"width\", \"height\", \"size\", \"dataSource\", \"dataSourceUrl\", \"dataSourceType\", \"responseDataKey\", \"isSurfaceInteractionDisabled\", \"animateSeriesWhenAxisRangeChanges\", \"title\", \"subtitle\", \"titleTextStyle\", \"titleTopMargin\", \"titleLeftMargin\", \"titleRightMargin\", \"titleBottomMargin\", \"subtitleTextStyle\", \"subtitleTopMargin\", \"subtitleLeftMargin\", \"subtitleRightMargin\", \"subtitleBottomMargin\", \"titleTextColor\", \"subtitleTextColor\", \"titleHorizontalAlignment\", \"subtitleHorizontalAlignment\", \"highlightingTransitionDuration\", \"useTiledZooming\", \"preferHigherResolutionTiles\", \"pixelScalingRatio\", \"zoomTileCacheSize\", \"contentHitTestMode\", \"legend\", \"axes\", \"series\", \"theme\"],\n    outputs: [\"tooltipShowing\", \"tooltipShown\", \"tooltipHiding\", \"tooltipHidden\", \"browserNotSupported\", \"seriesCursorMouseMove\", \"seriesMouseLeftButtonDown\", \"seriesMouseLeftButtonUp\", \"seriesMouseMove\", \"seriesMouseEnter\", \"seriesMouseLeave\", \"windowRectChanged\", \"gridAreaRectChanged\", \"refreshCompleted\", \"axisRangeChanged\", \"typicalBasedOn\", \"progressiveLoadStatusChanged\", \"assigningCategoryStyle\", \"assigningCategoryMarkerStyle\"]\n})\nexport class IgDataChartComponent extends IgControlBase<IgDataChart> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const chart = jQuery(this._el).data(this._widgetName);\n        if (chart) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    public option(): void { return; };\n\n    /**\n     * Returns the element holding the chart.\n     */\n    /* istanbul ignore next */\n    public widget(): void { return; };\n\n    /**\n     * Returns the ID of parent element holding the chart.\n     */\n    /* istanbul ignore next */\n    public id(): string { return; };\n\n    /**\n     * Exports the chart to a PNG image.\n     *\n     * @param width     The width of the image.\n     * @param height     The height of the image.\n     */\n    /* istanbul ignore next */\n    public exportImage(width?: Object, height?: Object): Object { return; };\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Notify the chart that styles it draws colors from may have been updated.\n     */\n    /* istanbul ignore next */\n    public styleUpdated(): Object { return; };\n\n    /**\n     * Resets the zoom level of the chart to default.\n     */\n    /* istanbul ignore next */\n    public resetZoom(): Object { return; };\n\n    /**\n     * Adds a new item to the data source and notifies the chart.\n     *\n     * @param item     The item that we want to add to the data source.\n     * @param targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.\n     */\n    /* istanbul ignore next */\n    public addItem(item: Object, targetName: string): void { return; };\n\n    /**\n     * Inserts a new item to the data source and notifies the chart.\n     *\n     * @param item     the new item that we want to insert in the data source.\n     * @param index     The index in the data source where the new item will be inserted.\n     * @param targetName     The name of the series or axis bound to the data source.\n     */\n    /* istanbul ignore next */\n    public insertItem(item: Object, index: number, targetName: string): void { return; };\n\n    /**\n     * Deletes an item from the data source and notifies the chart.\n     *\n     * @param index     The index in the data source from where the item will be been removed.\n     * @param targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.\n     */\n    /* istanbul ignore next */\n    public removeItem(index: number, targetName: string): void { return; };\n\n    /**\n     * Updates an item in the data source and notifies the chart.\n     *\n     * @param index     The index of the item in the data source that we want to change.\n     * @param item     The new item object that will be set in the data source.\n     * @param targetName     The name of the series or axis bound to the data source.\n     */\n    /* istanbul ignore next */\n    public setItem(index: number, item: Object, targetName: string): void { return; };\n\n    /**\n     * Notifies the chart that an item has been set in an associated data source.\n     *\n     * @param dataSource     The data source in which the change happened.\n     * @param index     The index in the items source that has been changed.\n     * @param newItem     the new item that has been set in the collection.\n     * @param oldItem     the old item that has been overwritten in the collection.\n     */\n    /* istanbul ignore next */\n    public notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object { return; };\n\n    /**\n     * Notifies the chart that the items have been cleared from an associated data source.\n     * \t\t\t\tIt's not necessary to notify more than one target of a change if they share the same items source.\n     *\n     * @param dataSource     The data source in which the change happened.\n     */\n    /* istanbul ignore next */\n    public notifyClearItems(dataSource: Object): Object { return; };\n\n    /**\n     * Notifies the target axis or series that an item has been inserted at the specified index in its data source.\n     * \t\t\t\tIt's not necessary to notify more than one target of a change if they share the same items source.\n     *\n     * @param dataSource     The data source in which the change happened.\n     * @param index     The index in the items source where the new item has been inserted.\n     * @param newItem     the new item that has been set in the collection.\n     */\n    /* istanbul ignore next */\n    public notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object { return; };\n\n    /**\n     * Notifies the target axis or series that an item has been removed from the specified index in its data source.\n     * \t\t\t\tIt's not necessary to notify more than one target of a change if they share the same items source.\n     *\n     * @param dataSource     The data source in which the change happened.\n     * @param index     The index in the items source from where the old item has been removed.\n     * @param oldItem     the old item that has been removed from the collection.\n     */\n    /* istanbul ignore next */\n    public notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object { return; };\n\n    /**\n     * Notifies the target axis or series that it should scroll the requested data item into view.\n     *\n     * @param targetName     The name of the axis or series notify.\n     * @param item     The data item to bring into view, if possible.\n     */\n    /* istanbul ignore next */\n    public scrollIntoView(targetName: string, item: Object): Object { return; };\n\n    /**\n     * Notifies the target axis that it should scale the requested value into chart space from axis space.\n     * \t\t\t\tFor example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.\n     *\n     * @param targetName     The name of the axis to notify.\n     * @param unscaledValue     The value in axis space to translate into chart space.\n     */\n    /* istanbul ignore next */\n    public scaleValue(targetName: string, unscaledValue: number): number { return; };\n\n    /**\n     * Notifies the target axis that it should unscale the requested value into axis space from chart space.\n     * \t\t\t\tFor example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.\n     *\n     * @param targetName     The name of the axis to notify.\n     * @param scaledValue     The value in chart space to translate into axis space.\n     */\n    /* istanbul ignore next */\n    public unscaleValue(targetName: string, scaledValue: number): number { return; };\n\n    /**\n     * For the target axis, if using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.\n     *\n     * @param targetName     The name of the axis to notify.\n     */\n    /* istanbul ignore next */\n    public resetCachedEnhancedInterval(targetName: string): Object { return; };\n\n    /**\n     * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.\n     *\n     * @param targetName     The name of the series to notify.\n     */\n    /* istanbul ignore next */\n    public notifyVisualPropertiesChanged(targetName: string): Object { return; };\n\n    /**\n     * Forces any pending deferred work to render on the chart before continuing\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Exports visual data from the chart to aid in unit testing\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): void { return; };\n\n    /**\n     * Gets the actual minimum value of the target numeric or date time axis\n     *\n     * @param targetName    The name of the axis from which to get the minimum value.\n     */\n    /* istanbul ignore next */\n    public getActualMinimumValue(targetName: string): void { return; };\n\n    /**\n     * Gets the actual maximum value of the target numeric or date time axis\n     *\n     * @param targetName    The name of the axis from which to get the maximum value.\n     */\n    /* istanbul ignore next */\n    public getActualMaximumValue(targetName: string): void { return; };\n\n    /**\n     * Gets the actual interval of the target numeric or date time axis\n     *\n     * @param targetName    The name of the axis from which to get the interval.\n     */\n    /* istanbul ignore next */\n    public getActualInterval(targetName: string): void { return; };\n\n    /**\n     * Creates a print preview page with the chart, hiding all other elements on the page.\n     */\n    /* istanbul ignore next */\n    public print(): void { return; };\n\n    /**\n     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.\n     *\n     * @param targetName     The name of the series to render.\n     * @param animate     Whether the change should be animated, if possible.\n     */\n    /* istanbul ignore next */\n    public renderSeries(targetName: string, animate: boolean): void { return; };\n\n    /**\n     * Gets the item item index associated with the specified world position.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     */\n    /* istanbul ignore next */\n    public getItemIndex(targetName: string, worldPoint: Object): number { return; };\n\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     */\n    /* istanbul ignore next */\n    public getItem(targetName: string, worldPoint: Object): Object { return; };\n\n    /**\n     * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n     *\n     * @param targetName    The name of the series to target.\n     */\n    /* istanbul ignore next */\n    public getItemSpan(targetName: string): number { return; };\n\n    /**\n     * If possible, will return the best available main value of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number { return; };\n\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     */\n    /* istanbul ignore next */\n    public getSeriesValueBoundingBox(targetName: string, worldPoint: Object): Object { return; };\n\n    /**\n     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for the world position provided.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     */\n    /* istanbul ignore next */\n    public getSeriesValueFineGrainedBoundingBoxes(targetName: string, worldPoint: Object): Object { return; };\n\n    /**\n     * If possible, will return the best available main value position of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object { return; };\n\n    /**\n     * If possible, will return the best available main value position of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object { return; };\n\n    /**\n     * If possible, will return the best available main value of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number { return; };\n\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the given series pixel coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.\n     */\n    /* istanbul ignore next */\n    public getSeriesValueBoundingBoxFromSeriesPixel(targetName: string, seriesPoint: Object): Object { return; };\n\n    /**\n     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for series pixel position provided.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.\n     */\n    /* istanbul ignore next */\n    public getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel(targetName: string, worldPoint: Object): Object { return; };\n\n    /**\n     * If possible, will return the best available high value of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesHighValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number { return; };\n\n    /**\n     * If possible, will return the best available high value position of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesHighValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object { return; };\n\n    /**\n     * If possible, will return the best available high value position of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesHighValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object { return; };\n\n    /**\n     * If possible, will return the best available high value of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesHighValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number { return; };\n\n    /**\n     * If possible, will return the best available low value of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesLowValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number { return; };\n\n    /**\n     * If possible, will return the best available low value position of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesLowValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object { return; };\n\n    /**\n     * If possible, will return the best available low value position of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesLowValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object { return; };\n\n    /**\n     * If possible, will return the best available low value of the series for a given world coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.\n     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.\n     * @param skipUnknowns    If true, unknown values should be skipped.\n     */\n    /* istanbul ignore next */\n    public getSeriesLowValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number { return; };\n\n    /**\n     * Gets the item item index associated with the specified series pixel coordinate.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.\n     */\n    /* istanbul ignore next */\n    public getItemIndexFromSeriesPixel(targetName: string, seriesPoint: Object): number { return; };\n\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.\n     */\n    /* istanbul ignore next */\n    public getItemFromSeriesPixel(targetName: string, seriesPoint: Object): Object { return; };\n\n    /**\n     * Gets the category offset for a series, if applicable.\n     *\n     * @param targetName    The name of the series to target.\n     */\n    /* istanbul ignore next */\n    public getSeriesOffsetValue(targetName: string): number { return; };\n\n    /**\n     * Gets the category width for a series, if applicable.\n     *\n     * @param targetName    The name of the series to target.\n     */\n    /* istanbul ignore next */\n    public getSeriesCategoryWidth(targetName: string): number { return; };\n\n    /**\n     * Replays the transition in animation for a series, if applicable.\n     *\n     * @param targetName    The name of the series to target.\n     */\n    /* istanbul ignore next */\n    public replayTransitionIn(targetName: string): Object { return; };\n\n    /**\n     * Simulates a hover interaction over a given point in the viewport of a series.\n     *\n     * @param targetName    The name of the series to target.\n     * @param seriesPoint    The point at which to hover. Should have an x property with type number and a y property with type number.\n     */\n    /* istanbul ignore next */\n    public simulateHover(targetName: string, seriesPoint: Object): Object { return; };\n\n    /**\n     * Moves the cursor point of the target annotation layer to the desired world coordinates.\n     *\n     * @param targetName    The name of the series to target.\n     * @param worldPoint    The point to which to move the cursor. Should have an x property with type number and a y property with type number.\n     */\n    /* istanbul ignore next */\n    public moveCursorPoint(targetName: string, worldPoint: Object): Object { return; };\n\n    /**\n     * Manually starts a tiled zoom if one isn't already running.\n     */\n    /* istanbul ignore next */\n    public startTiledZoomingIfNecessary(): void { return; };\n\n    /**\n     * Manually ends a tiled zoom if one is running.\n     */\n    /* istanbul ignore next */\n    public endTiledZoomingIfRunning(): void { return; };\n\n    /**\n     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.\n     */\n    /* istanbul ignore next */\n    public clearTileZoomCache(): void { return; };\n}\n\n","import { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\nimport { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\n\n@Component({\n    selector: \"ig-pie-chart\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"dataSource\", \"dataSourceUrl\", \"dataSourceType\", \"responseDataKey\", \"valueMemberPath\", \"labelMemberPath\", \"dataValue\", \"dataLabel\", \"labelsPosition\", \"labelOuterColor\", \"labelInnerColor\", \"selectionMode\", \"selectedItem\", \"selectedItems\", \"leaderLineVisibility\", \"leaderLineType\", \"leaderLineMargin\", \"othersCategoryThreshold\", \"formatLabel\", \"othersCategoryStyle\", \"othersCategoryType\", \"othersCategoryText\", \"explodedRadius\", \"radiusFactor\", \"allowSliceSelection\", \"allowSliceExplosion\", \"explodedSlices\", \"selectedSlices\", \"showTooltip\", \"tooltipTemplate\", \"legend\", \"labelExtent\", \"startAngle\", \"sweepDirection\", \"selectedStyle\", \"brushes\", \"outlines\", \"legendItemTemplate\", \"legendItemBadgeTemplate\", \"textStyle\", \"theme\"],\n    outputs: [\"tooltipShowing\", \"tooltipShown\", \"tooltipHiding\", \"tooltipHidden\", \"browserNotSupported\", \"sliceClick\", \"labelClick\", \"selectedItemChanging\", \"selectedItemChanged\", \"selectedItemsChanging\", \"selectedItemsChanged\"]\n})\nexport class IgPieChartComponent extends IgControlBase<IgPieChart> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); } public option(): void { return; };\n    //public option(): void { return; } ;\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const chart = jQuery(this._el).data(this._widgetName);\n        if (chart) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /**\n     * Adds a new item to the data source and notifies the chart.\n     *\n     * @param item     the new item that will be added to the data source.\n     */\n    /* istanbul ignore next */\n    public addItem(item: Object): void { return; };\n\n    /**\n     * Inserts a new item to the data source and notifies the chart.\n     *\n     * @param item     the new item that will be inserted in the data source.\n     * @param index     The index in the data source where the new item will be inserted.\n     */\n    /* istanbul ignore next */\n    public insertItem(item: Object, index: number): void { return; };\n\n    /**\n     * Deletes an item from the data source and notifies the chart.\n     *\n     * @param index     The index in the data source from where the item will be been removed.\n     */\n    /* istanbul ignore next */\n    public removeItem(index: number): void { return; };\n\n    /**\n     * Updates an item in the data source and notifies the chart.\n     *\n     * @param index     The index in the data source that we want to change.\n     * @param item     the new item that we want to set in the data source.\n     */\n    /* istanbul ignore next */\n    public setItem(index: number, item: Object): void { return; };\n\n    /**\n     * Exports the chart to a PNG image.\n     *\n     * @param width     The width of the image.\n     * @param height     The height of the image.\n     */\n    /* istanbul ignore next */\n    public exportImage(width?: Object, height?: Object): Object { return; };\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the ID of parent element holding the chart.\n     */\n    /* istanbul ignore next */\n    public id(): string { return; };\n\n    /**\n     * Returns the element holding the chart.\n     */\n    /* istanbul ignore next */\n    public widget(): void { return; };\n\n    /**\n     * Creates a print preview page with the chart, hiding all other elements on the page.\n     */\n    /* istanbul ignore next */\n    public print(): void { return; };\n\n    /**\n     * Exports visual data from the pie chart to aid in unit testing\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-doughnut-chart\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"tooltipTemplate\", \"maxRecCount\", \"dataSource\", \"dataSourceType\", \"dataSourceUrl\", \"responseTotalRecCountKey\", \"responseDataKey\", \"series\", \"allowSliceSelection\", \"isSurfaceInteractionDisabled\", \"allowSliceExplosion\", \"innerExtent\", \"selectedStyle\"],\n    outputs: [\"dataBinding\", \"dataBound\", \"updateTooltip\", \"hideTooltip\", \"tooltipShowing\", \"tooltipShown\", \"tooltipHiding\", \"tooltipHidden\", \"browserNotSupported\", \"sliceClick\", \"holeDimensionsChanged\"]\n})\nexport class IgDoughnutChartComponent extends IgControlBase<IgDoughnutChart> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const chart = jQuery(this._el).data(this._widgetName);\n        if (chart) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /**\n     * Adds a new series to the doughnut chart.\n     *\n     * @param seriesObj     The series object to be added.\n     */\n    /* istanbul ignore next */\n    public addSeries(seriesObj: Object): void { return; };\n\n    /**\n     * Removes the specified series from the doughnut chart.\n     *\n     * @param seriesObj     The series object identifying the series to be removed.\n     */\n    /* istanbul ignore next */\n    public removeSeries(seriesObj: Object): void { return; };\n\n    /**\n     * Updates the series with the specified name with the specified new property values.\n     *\n     * @param value     The series object identifying the series to be updated.\n     */\n    /* istanbul ignore next */\n    public updateSeries(value: Object): void { return; };\n\n    /**\n     * Returns the center of the doughnut chart.\n     */\n    /* istanbul ignore next */\n    public getCenterCoordinates(): Object { return; };\n\n    /**\n     * Returns the radius of the chart's hole.\n     */\n    /* istanbul ignore next */\n    public getHoleRadius(): number { return; };\n\n    /**\n     * Returns information about how the doughnut chart is rendered.\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): Object { return; };\n\n    /**\n     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-funnel-chart\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"tooltipTemplate\", \"maxRecCount\", \"dataSource\", \"dataSourceType\", \"dataSourceUrl\", \"responseTotalRecCountKey\", \"responseDataKey\", \"bezierPoints\", \"legend\", \"valueMemberPath\", \"brushes\", \"outlines\", \"bottomEdgeWidth\", \"innerLabelMemberPath\", \"outerLabelMemberPath\", \"innerLabelVisibility\", \"outerLabelVisibility\", \"outerLabelAlignment\", \"funnelSliceDisplay\", \"formatInnerLabel\", \"formatOuterLabel\", \"transitionDuration\", \"isInverted\", \"useBezierCurve\", \"allowSliceSelection\", \"useUnselectedStyle\", \"selectedSliceStyle\", \"unselectedSliceStyle\", \"legendItemBadgeTemplate\", \"useOuterLabelsForLegend\", \"textStyle\", \"outerLabelTextStyle\", \"outlineThickness\", \"pixelScalingRatio\", \"outerLabelTextColor\", \"textColor\"],\n    outputs: [\"dataBinding\", \"dataBound\", \"updateTooltip\", \"hideTooltip\", \"sliceClicked\"]\n})\nexport class IgFunnelChartComponent extends IgControlBase<IgFunnelChart> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const chart = jQuery(this._el).data(this._widgetName);\n        if (chart) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /**\n     * Gets array of selected slice items.\n     *\n     * @param selection     Array or selected slice items.\n     * @return array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.\n     */\n    /* istanbul ignore next */\n    public selectedSliceItems(selection?: any[]): any[] { return; };\n\n    /**\n     * Gets sets array of indexes of selected slices.\n     *\n     * @param selection     Array or selected slice indexes.\n     * @return array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.\n     */\n    /* istanbul ignore next */\n    public selectedSliceIndexes(selection?: any[]): any[] { return; };\n\n    /**\n     * Checks if slice is selected.\n     *\n     * @param slice     Index of slice or reference to slice-data-item.\n     */\n    /* istanbul ignore next */\n    public isSelected(slice: Object): boolean { return; };\n\n    /**\n     * Toggles selected state of slice.\n     *\n     * @param slice     Index of slice or reference to slice-data-item.\n     */\n    /* istanbul ignore next */\n    public toggleSelection(slice: Object): Object { return; };\n    public exportVisualData(): void { return; };\n\n    /**\n     * Destroys widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-radial-gauge\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"ranges\", \"rangeBrushes\", \"rangeOutlines\", \"minimumValue\", \"maximumValue\", \"interval\", \"centerX\", \"centerY\", \"value\", \"scaleStartAngle\", \"scaleEndAngle\", \"scaleSweepDirection\", \"transitionDuration\", \"transitionEasingFunction\", \"needleBrush\", \"needleOutline\", \"needleStartExtent\", \"needleEndExtent\", \"needleShape\", \"needleStartWidthRatio\", \"needleEndWidthRatio\", \"needleBaseFeatureWidthRatio\", \"needleBaseFeatureExtent\", \"needlePointFeatureWidthRatio\", \"needlePointFeatureExtent\", \"needlePivotWidthRatio\", \"needlePivotInnerWidthRatio\", \"needlePivotShape\", \"scaleStartExtent\", \"needlePivotBrush\", \"needlePivotOutline\", \"needleStrokeThickness\", \"needlePivotStrokeThickness\", \"scaleEndExtent\", \"labelExtent\", \"labelInterval\", \"tickStartExtent\", \"tickEndExtent\", \"tickStrokeThickness\", \"tickBrush\", \"fontBrush\", \"minorTickStartExtent\", \"minorTickEndExtent\", \"minorTickStrokeThickness\", \"minorTickBrush\", \"minorTickCount\", \"scaleBrush\", \"backingBrush\", \"backingOutline\", \"backingStrokeThickness\", \"backingOuterExtent\", \"backingOversweep\", \"scaleOversweep\", \"scaleOversweepShape\", \"backingCornerRadius\", \"backingInnerExtent\", \"backingShape\", \"radiusMultiplier\", \"duplicateLabelOmissionStrategy\", \"isNeedleDraggingEnabled\", \"isNeedleDraggingConstrained\", \"font\", \"transitionProgress\", \"pixelScalingRatio\"],\n    outputs: [\"formatLabel\", \"alignLabel\", \"valueChanged\"]\n})\nexport class IgRadialGaugeComponent extends IgControlBase<IgRadialGauge> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n    /**\n     * Returns a string containing the names of all the ranges delimited with a \\n symbol.\n     */\n    /* istanbul ignore next */\n    public getRangeNames(): string { return; };\n\n    /**\n     * Adds a new range to the radial gauge.\n     *\n     * @param value \n     */\n    /* istanbul ignore next */\n    public addRange(value: Object): void { return; };\n\n    /**\n     * Removes a specified range.\n     *\n     * @param value \n     */\n    /* istanbul ignore next */\n    public removeRange(value: Object): void { return; };\n\n    /**\n     * Updates the range.\n     *\n     * @param value \n     */\n    /* istanbul ignore next */\n    public updateRange(value: Object): void { return; };\n\n    /**\n     * Clears the ranges in the radial gauge.\n     */\n    /* istanbul ignore next */\n    public clearRanges(): void { return; };\n\n    /**\n     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.\n     *\n     * @param value \n     */\n    /* istanbul ignore next */\n    public scaleValue(value: Object): void { return; };\n\n    /**\n     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.\n     *\n     * @param value \n     */\n    /* istanbul ignore next */\n    public unscaleValue(value: Object): void { return; };\n\n    /**\n     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.\n     *\n     * @param x \n     * @param y \n     */\n    /* istanbul ignore next */\n    public getValueForPoint(x: Object, y: Object): number { return; };\n\n    /**\n     * Gets the point on the gauge for a given scale value and extent.\n     *\n     * @param value \n     * @param extent \n     */\n    /* istanbul ignore next */\n    public getPointForValue(value: Object, extent: Object): void { return; };\n\n    /**\n     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.\n     *\n     * @param x \n     * @param y \n     */\n    /* istanbul ignore next */\n    public needleContainsPoint(x: Object, y: Object): void { return; };\n\n    /**\n     * Exports the visual data for the radial gauge.\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): void { return; };\n\n    /**\n     * Flushes the gauge.\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Destroys widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns true if the style was updated for the radial gauge.\n     */\n    /* istanbul ignore next */\n    public styleUpdated(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-zoombar\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"target\", \"clone\", \"width\", \"height\", \"zoomAction\", \"zoomWindowMoveDistance\", \"defaultZoomWindow\", \"zoomWindowMinWidth\", \"hoverStyleAnimationDuration\", \"windowPanDuration\", \"tabIndex\"],\n    outputs: [\"zoomChanging\", \"zoomChanged\", \"providerCreated\", \"windowDragStarting\", \"windowDragStarted\", \"windowDragging\", \"windowDragEnding\", \"windowDragEnded\", \"windowResizing\", \"windowResized\"]\n})\nexport class IgZoombarComponent extends IgControlBase<IgZoombar> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n\n    /**\n     * Destroys the Zoombar widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the main zoombar element\n     */\n    /* istanbul ignore next */\n    public widget(): void { return; };\n\n    /**\n     * Returns the ID of the element the zoombar is initialized on\n     */\n    /* istanbul ignore next */\n    public id(): string { return; };\n\n    /**\n     * Returns the DIV that is the topmost container of the zoombar widget\n     */\n    /* istanbul ignore next */\n    public container(): Element { return; };\n\n    /**\n     * Returns the element the clone widget is initialized on\n     */\n    /* istanbul ignore next */\n    public clone(): Element { return; };\n\n    /**\n     * Gets or sets the current zoom window\n     *\n     * @param left     The left parameter of the new zoom window in percentages\n     * @param width     The width parameter of the new zoom window in percentages\n     */\n    /* istanbul ignore next */\n    public zoom(left?: number, width?: number): Object { return; };\n}","import { Component, Renderer, IterableDiffers, ElementRef, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-map\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"dataSource\", \"dataSourceUrl\", \"dataSourceType\", \"responseDataKey\", \"autoMarginWidth\", \"autoMarginHeight\", \"crosshairVisibility\", \"crosshairPoint\", \"plotAreaBackground\", \"defaultInteraction\", \"dragModifier\", \"panModifier\", \"previewRect\", \"windowRect\", \"zoomable\", \"windowScale\", \"windowResponse\", \"windowRectMinWidth\", \"windowPositionHorizontal\", \"windowPositionVertical\", \"circleMarkerTemplate\", \"triangleMarkerTemplate\", \"pyramidMarkerTemplate\", \"squareMarkerTemplate\", \"diamondMarkerTemplate\", \"pentagonMarkerTemplate\", \"hexagonMarkerTemplate\", \"tetragramMarkerTemplate\", \"pentagramMarkerTemplate\", \"hexagramMarkerTemplate\", \"overviewPlusDetailPaneBackgroundImageUri\", \"useTiledZooming\", \"preferHigherResolutionTiles\", \"zoomTileCacheSize\", \"backgroundContent\", \"series\", \"theme\"],\n    outputs: [\"tooltipShowing\", \"tooltipShown\", \"tooltipHiding\", \"tooltipHidden\", \"browserNotSupported\", \"seriesCursorMouseMove\", \"seriesMouseLeftButtonDown\", \"seriesMouseLeftButtonUp\", \"seriesMouseMove\", \"seriesMouseEnter\", \"seriesMouseLeave\", \"windowRectChanged\", \"gridAreaRectChanged\", \"refreshCompleted\", \"triangulationStatusChanged\"]\n})\nexport class IgMapComponent extends IgControlBase<IgMap> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); } public option(): void { return; };\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const map = jQuery(this._el).data(this._widgetName);\n        if (map) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the ID of parent element holding the map.\n     */\n    /* istanbul ignore next */\n    public id(): string { return; };\n\n    /**\n     * Exports the map to a PNG image.\n     *\n     * @param width The width of the image.\n     * @param height The height of the image.\n     */\n    /* istanbul ignore next */\n    public exportImage(width?: Object, height?: Object): Object { return; };\n\n    /**\n     * Notify the map that styles it draws colors from may have been updated.\n     */\n    /* istanbul ignore next */\n    public styleUpdated(): Object { return; };\n\n    /**\n     * Resets the zoom level of the map to default.\n     */\n    /* istanbul ignore next */\n    public resetZoom(): Object { return; };\n\n    /**\n     * Adds a new item to the data source and notifies the map.\n     *\n     * @param item     The item that we want to add to the data source.\n     * @param targetName     The name of the series bound to the data source.\n     */\n    /* istanbul ignore next */\n    public addItem(item: Object, targetName: string): void { return; };\n\n    /**\n     * Inserts a new item to the data source and notifies the map.\n     *\n     * @param item     the new item that we want to insert in the data source.\n     * @param index     The index in the data source where the new item will be inserted.\n     * @param targetName     The name of the series bound to the data source.\n     */\n    /* istanbul ignore next */\n    public insertItem(item: Object, index: number, targetName: string): void { return; };\n\n    /**\n     * Deletes an item from the data source and notifies the map.\n     *\n     * @param index     The index in the data source from where the item will be been removed.\n     * @param targetName     The name of the series bound to the data source.\n     */\n    /* istanbul ignore next */\n    public removeItem(index: number, targetName: string): void { return; };\n\n    /**\n     * Updates an item in the data source and notifies the map.\n     *\n     * @param index     The index of the item in the data source that we want to change.\n     * @param item     The new item object that will be set in the data source.\n     * @param targetName     The name of the series bound to the data source.\n     */\n    /* istanbul ignore next */\n    public setItem(index: number, item: Object, targetName: string): void { return; };\n\n    /**\n     * Notifies the the map that an item has been set in an associated data source.\n     *\n     * @param dataSource The data source in which the change happened.\n     * @param index The index in the items source that has been changed.\n     * @param newItem the new item that has been set in the collection.\n     * @param oldItem the old item that has been overwritten in the collection.\n     */\n    /* istanbul ignore next */\n    public notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object { return; };\n\n    /**\n     * Notifies the the map that the items have been cleared from an associated data source.\n     *                 It's not necessary to notify more than one target of a change if they share the same items source.\n     *\n     * @param dataSource The data source in which the change happened.\n     */\n    /* istanbul ignore next */\n    public notifyClearItems(dataSource: Object): Object { return; };\n\n    /**\n     * Notifies the the target series that an item has been inserted at the specified index in its data source.\n     *                 It's not necessary to notify more than one target of a change if they share the same items source.\n     *\n     * @param dataSource The data source in which the change happened.\n     * @param index The index in the items source where the new item has been inserted.\n     * @param newItem the new item that has been set in the collection.\n     */\n    /* istanbul ignore next */\n    public notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object { return; };\n\n    /**\n     * Notifies the the target series that an item has been removed from the specified index in its data source.\n     *                 It's not necessary to notify more than one target of a change if they share the same items source.\n     *\n     * @param dataSource The data source in which the change happened.\n     * @param index The index in the items source from where the old item has been removed.\n     * @param oldItem the old item that has been removed from the collection.\n     */\n    /* istanbul ignore next */\n    public notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object { return; };\n\n    /**\n     * Notifies the target series or axis that it should scroll the requested data item into view.\n     *\n     * @param targetName The name of the series or axis notify.\n     * @param item The data item to bring into view, if possible.\n     */\n    /* istanbul ignore next */\n    public scrollIntoView(targetName: string, item: Object): Object { return; };\n\n    /**\n     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.\n     * \t\t\t\tFor example you can use this method if you want to find where longitude 50 stands scaled to map's width.\n     *\n     * @param targetName Either xAxis or yAxis to notify.\n     * @param unscaledValue The value in axis space to translate into map space.\n     */\n    /* istanbul ignore next */\n    public scaleValue(targetName: string, unscaledValue: number): number { return; };\n\n    /**\n     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.\n     * \t\t\t\tFor example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.\n     *\n     * @param targetName Either xAxis or yAxis to notify.\n     * @param scaledValue The value in map space to translate into axis space.\n     */\n    /* istanbul ignore next */\n    public unscaleValue(targetName: string, scaledValue: number): number { return; };\n\n    /**\n     * Manually starts a tiled zoom if one isn't already running.\n     */\n    /* istanbul ignore next */\n    public startTiledZoomingIfNecessary(): void { return; };\n\n    /**\n     * Manually ends a tiled zoom if one is running.\n     */\n    /* istanbul ignore next */\n    public endTiledZoomingIfRunning(): void { return; };\n\n    /**\n     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..\n     */\n    /* istanbul ignore next */\n    public clearTileZoomCache(): void { return; };\n\n    /**\n     * Forces any pending deferred work to render on the map before continuing\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Exports visual data from the map to aid in unit testing\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): void { return; };\n\n    /**\n     * Gets the actual minimum value of the target xAxis or yAxis\n     *\n     * @param targetName \n     */\n    /* istanbul ignore next */\n    public getActualMinimumValue(targetName: Object): void { return; };\n\n    /**\n     * Gets the actual maximum value of the target xAxis or yAxis\n     *\n     * @param targetName \n     */\n    /* istanbul ignore next */\n    public getActualMaximumValue(targetName: Object): void { return; };\n\n    /**\n     * Notifies the map that the container was resized\n     */\n    /* istanbul ignore next */\n    public notifyContainerResized(): void { return; };\n\n    /**\n     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).\n     *\n     * @param rect The geographic area rectangle.\n     */\n    /* istanbul ignore next */\n    public zoomToGeographic(rect: Object): Object { return; };\n\n    /**\n     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.\n     *\n     * @param rect The geographic area rectangle.\n     */\n    /* istanbul ignore next */\n    public getGeographicFromZoom(rect: Object): Object { return; };\n\n    /**\n     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.\n     *\n     * @param rect The geographic area rectangle.\n     */\n    /* istanbul ignore next */\n    public getZoomFromGeographic(rect: Object): Object { return; };\n\n    /**\n     * Creates a print preview page with the map, hiding all other elements on the page.\n     */\n    /* istanbul ignore next */\n    public print(): void { return; };\n\n    /**\n     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.\n     *\n     * @param targetName     The name of the series to render.\n     * @param animate     Whether the change should be animated, if possible.\n     */\n    /* istanbul ignore next */\n    public renderSeries(targetName: string, animate: boolean): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-sparkline\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\",\"disabled\",\"create\",\"width\",\"height\",\"tooltipTemplate\",\"maxRecCount\",\"dataSource\",\"dataSourceType\",\"dataSourceUrl\",\"responseTotalRecCountKey\",\"responseDataKey\",\"brush\",\"negativeBrush\",\"markerBrush\",\"negativeMarkerBrush\",\"firstMarkerBrush\",\"lastMarkerBrush\",\"highMarkerBrush\",\"lowMarkerBrush\",\"trendLineBrush\",\"horizontalAxisBrush\",\"verticalAxisBrush\",\"normalRangeFill\",\"horizontalAxisVisibility\",\"verticalAxisVisibility\",\"markerVisibility\",\"negativeMarkerVisibility\",\"firstMarkerVisibility\",\"lastMarkerVisibility\",\"lowMarkerVisibility\",\"highMarkerVisibility\",\"normalRangeVisibility\",\"displayNormalRangeInFront\",\"markerSize\",\"firstMarkerSize\",\"lastMarkerSize\",\"highMarkerSize\",\"lowMarkerSize\",\"negativeMarkerSize\",\"lineThickness\",\"valueMemberPath\",\"labelMemberPath\",\"trendLineType\",\"trendLinePeriod\",\"trendLineThickness\",\"normalRangeMinimum\",\"normalRangeMaximum\",\"displayType\",\"unknownValuePlotting\",\"verticalAxisLabel\",\"horizontalAxisLabel\",\"formatLabel\",\"pixelScalingRatio\"],\n    outputs: [\"dataBinding\",\"dataBound\",\"updateTooltip\",\"hideTooltip\"]\n})\nexport class IgSparklineComponent extends IgControlBase<IgSparkline> { \n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { \n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n\n    @Input()\n    public set dataSource(value: any) {\n        this._dataSource = value;\n        const widget = jQuery(this._el).data(this._widgetName);\n        if (widget) {\n            jQuery(this._el)[this._widgetName](\"option\", \"dataSource\", this._dataSource);\n        }\n    };\n\n    private _dataSource: any;\n\n    ngOnInit() {\n        if (this._dataSource === null || this._dataSource === undefined) {\n            this._dataSource = this.options[\"dataSource\"];\n        }\n        if (!this.options[\"dataSource\"] && this._dataSource) {\n            this.options[\"dataSource\"] = this._dataSource;\n        }\n        super.ngOnInit();\n    }\n\n    /* istanbul ignore next */\n    public destroy(): void { return; } ;\n}","import { Component, Renderer, IterableDiffers, ElementRef, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n\n@Component({\n    selector: \"ig-bullet-graph\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"ranges\", \"rangeToolTipTemplate\", \"valueToolTipTemplate\", \"targetValueToolTipTemplate\", \"orientation\", \"rangeBrushes\", \"rangeOutlines\", \"minimumValue\", \"maximumValue\", \"targetValue\", \"targetValueName\", \"value\", \"valueName\", \"rangeInnerExtent\", \"rangeOuterExtent\", \"valueInnerExtent\", \"valueOuterExtent\", \"interval\", \"ticksPostInitial\", \"ticksPreTerminal\", \"labelInterval\", \"labelExtent\", \"labelsPostInitial\", \"labelsPreTerminal\", \"minorTickCount\", \"tickStartExtent\", \"tickEndExtent\", \"tickStrokeThickness\", \"tickBrush\", \"fontBrush\", \"valueBrush\", \"valueOutline\", \"valueStrokeThickness\", \"minorTickStartExtent\", \"minorTickEndExtent\", \"minorTickStrokeThickness\", \"minorTickBrush\", \"isScaleInverted\", \"backingBrush\", \"backingOutline\", \"backingStrokeThickness\", \"backingInnerExtent\", \"backingOuterExtent\", \"scaleStartExtent\", \"scaleEndExtent\", \"targetValueBrush\", \"targetValueBreadth\", \"targetValueInnerExtent\", \"targetValueOuterExtent\", \"targetValueOutline\", \"targetValueStrokeThickness\", \"transitionDuration\", \"showToolTipTimeout\", \"showToolTip\", \"font\", \"pixelScalingRatio\"],\n    outputs: [\"formatLabel\", \"alignLabel\"]\n})\nexport class IgBulletGraphComponent extends IgControlBase<IgBulletGraph> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n\n    /**\n     * Returns a string containing the names of all the ranges delimited with a \\n symbol.\n     */\n    /* istanbul ignore next */\n    public getRangeNames(): void { return; };\n\n    /**\n     * Adds a new range to the bullet graph.\n     *\n     * @param value     The range object to be added.\n     */\n    /* istanbul ignore next */\n    public addRange(value: Object): void { return; };\n\n    /**\n     * Removes a range from the bullet graph.\n     *\n     * @param value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true\n     */\n    /* istanbul ignore next */\n    public removeRange(value: Object): void { return; };\n\n    /**\n     * Updates the specified range of the bullet graph.\n     *\n     * @param value     The range object to be updated.\n     */\n    /* istanbul ignore next */\n    public updateRange(value: Object): void { return; };\n\n    /**\n     * Returns information about how the bullet graph is rendered.\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): Object { return; };\n\n    /**\n     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Destroys widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.\n     */\n    /* istanbul ignore next */\n    public styleUpdated(): void { return; };\n\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-linear-gauge\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"ranges\", \"rangeToolTipTemplate\", \"needleToolTipTemplate\", \"orientation\", \"rangeBrushes\", \"rangeOutlines\", \"minimumValue\", \"maximumValue\", \"value\", \"needleShape\", \"needleName\", \"rangeInnerExtent\", \"scaleInnerExtent\", \"rangeOuterExtent\", \"scaleOuterExtent\", \"needleInnerExtent\", \"needleOuterExtent\", \"needleInnerBaseWidth\", \"needleOuterBaseWidth\", \"needleInnerPointWidth\", \"needleOuterPointWidth\", \"needleInnerPointExtent\", \"needleOuterPointExtent\", \"interval\", \"ticksPostInitial\", \"ticksPreTerminal\", \"labelInterval\", \"labelExtent\", \"labelsPostInitial\", \"labelsPreTerminal\", \"minorTickCount\", \"tickStartExtent\", \"tickEndExtent\", \"tickStrokeThickness\", \"tickBrush\", \"fontBrush\", \"needleBreadth\", \"needleBrush\", \"needleOutline\", \"needleStrokeThickness\", \"minorTickStartExtent\", \"minorTickEndExtent\", \"minorTickStrokeThickness\", \"minorTickBrush\", \"isScaleInverted\", \"backingBrush\", \"backingOutline\", \"backingStrokeThickness\", \"backingInnerExtent\", \"backingOuterExtent\", \"scaleStartExtent\", \"scaleEndExtent\", \"scaleBrush\", \"scaleOutline\", \"scaleStrokeThickness\", \"isNeedleDraggingEnabled\", \"transitionDuration\", \"showToolTipTimeout\", \"showToolTip\", \"font\", \"pixelScalingRatio\"],\n    outputs: [\"formatLabel\", \"alignLabel\", \"valueChanged\"]\n})\nexport class IgLinearGaugeComponent extends IgControlBase<IgLinearGauge> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n    /**\n     * Returns a string containing the names of all the ranges delimited with a \\n symbol.\n     */\n    /* istanbul ignore next */\n    public getRangeNames(): string { return; };\n\n    /**\n     * Adds a new range to the linear gauge.\n     *\n     * @param value     The range object to be added.\n     */\n    /* istanbul ignore next */\n    public addRange(value: Object): void { return; };\n\n    /**\n     * Removes a range from the linear gauge.\n     *\n     * @param value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true\n     */\n    /* istanbul ignore next */\n    public removeRange(value: Object): void { return; };\n\n    /**\n     * Updates the specified range of the linear gauge.\n     *\n     * @param value     The range object to be updated.\n     */\n    /* istanbul ignore next */\n    public updateRange(value: Object): void { return; };\n\n    /**\n     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.\n     *\n     * @param x \n     * @param y \n     */\n    /* istanbul ignore next */\n    public getValueForPoint(x: Object, y: Object): number { return; };\n\n    /**\n     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.\n     *\n     * @param x The x coordinate of the point.\n     * @param y The y coordinate of the point.\n     */\n    /* istanbul ignore next */\n    public needleContainsPoint(x: number, y: number): void { return; };\n\n    /**\n     * Returns information about how the linear gauge is rendered.\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): Object { return; };\n\n    /**\n     * Causes all pending changes of the linear gauge e.g. by changed property values to be rendered immediately.\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Destroys widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.\n     */\n    /* istanbul ignore next */\n    public styleUpdated(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-q-r-code-barcode\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"backingBrush\", \"backingOutline\", \"backingStrokeThickness\", \"barBrush\", \"fontBrush\", \"font\", \"data\", \"errorMessageText\", \"stretch\", \"barsFillMode\", \"widthToHeightRatio\", \"xDimension\", \"errorCorrectionLevel\", \"sizeVersion\", \"encodingMode\", \"eciNumber\", \"eciHeaderDisplayMode\", \"fnc1Mode\", \"applicationIndicator\"],\n    outputs: [\"errorMessageDisplaying\", \"dataChanged\"]\n})\nexport class IgQRCodeBarcodeComponent extends IgControlBase<IgQRCodeBarcode> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); } public option(): void { return; };\n\n    /**\n     * Returns information about how the barcode is rendered.\n     */\n    /* istanbul ignore next */\n    public exportVisualData(): Object { return; };\n\n    /**\n     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Destroys widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.\n     */\n    /* istanbul ignore next */\n    public styleUpdated(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n\n@Component({\n    selector: \"ig-upload\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"autostartupload\", \"labelUploadButton\", \"labelAddButton\", \"labelClearAllButton\", \"labelSummaryTemplate\", \"labelSummaryProgressBarTemplate\", \"labelShowDetails\", \"labelHideDetails\", \"labelSummaryProgressButtonCancel\", \"labelSummaryProgressButtonContinue\", \"labelSummaryProgressButtonDone\", \"labelProgressBarFileNameContinue\", \"errorMessageMaxFileSizeExceeded\", \"errorMessageGetFileStatus\", \"errorMessageCancelUpload\", \"errorMessageNoSuchFile\", \"errorMessageOther\", \"errorMessageValidatingFileExtension\", \"errorMessageAJAXRequestFileSize\", \"errorMessageTryToRemoveNonExistingFile\", \"errorMessageTryToStartNonExistingFile\", \"errorMessageMaxUploadedFiles\", \"errorMessageMaxSimultaneousFiles\", \"errorMessageDropMultipleFilesWhenSingleModel\", \"uploadUrl\", \"progressUrl\", \"allowedExtensions\", \"showFileExtensionIcon\", \"css\", \"fileExtensionIcons\", \"mode\", \"multipleFiles\", \"maxUploadedFiles\", \"maxSimultaneousFilesUploads\", \"fileSizeMetric\", \"controlId\", \"fileSizeDecimalDisplay\", \"maxFileSize\"],\n    outputs: [\"fileSelecting\", \"fileSelected\", \"fileUploading\", \"fileUploaded\", \"fileUploadAborted\", \"cancelAllClicked\", \"onError\", \"fileExtensionsValidating\", \"onXHRLoad\", \"onFormDataSubmit\"]\n})\nexport class IgUploadComponent extends IgControlBase<IgUpload> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n\n    /**\n     * Return jquery object of fileupload container - html DOM element\n     */\n    /* istanbul ignore next */\n    public container(): void { return; };\n\n    /**\n     * Returns the current widget element\n     */\n    /* istanbul ignore next */\n    public widget(): void { return; };\n\n    /**\n     * Hide finished files\n     */\n    /* istanbul ignore next */\n    public clearAll(): void { return; };\n\n    /**\n     * Append additional data field to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server\n     *\n     * @param formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server\n     * @param field    Data field that should be appended to the formData. The object has 2 properties - value and name. If the browser supports HTML5 the data field is appended to the formData object. Otherwise it is appended as input hidden field to the <form>\n     */\n    /* istanbul ignore next */\n    public addDataField(formData: Object, field: Object): void { return; };\n\n    /**\n     * Append additional data fields to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server\n     *\n     * @param formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server\n     * @param fields    Array of data fields that should be appended to the formData. Each data field is object with 2 properties - value and name. If the browser supports HTML5 these data fields are added to the formData. Otherwise each of these data field is appended as input hidden field to the <form>\n     */\n    /* istanbul ignore next */\n    public addDataFields(formData: Object, fields: any[]): void { return; };\n\n    /**\n     * Start uploading file as submitting form with the specified formNumber.\n     *\n     * @param formNumber    id of the upload form\n     */\n    /* istanbul ignore next */\n    public startUpload(formNumber: number): void { return; };\n\n    /**\n     * Cancel upload for the specified file id\n     * \t\t\t formNumber - id of the file to be canceled\n     *\n     * @param formNumber    id of the form which should be cancelled\n     */\n    /* istanbul ignore next */\n    public cancelUpload(formNumber: number): void { return; };\n\n    /**\n     * Destroy the widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the information about uploading files - all files uploaded/uploading/pending\n     */\n    /* istanbul ignore next */\n    public getFileInfoData(): Object { return; };\n\n    /**\n     * Cancel all uploading and pending files\n     */\n    /* istanbul ignore next */\n    public cancelAll(): void { return; };\n\n    /**\n     * Returns the information about the file by specified file identifier. It could be file which is uploading/uploaded or uploading is not started. If there isn\"t file with the specified file id returns null\n     *\n     * @param fileIndex    unique identifier of the file\n     */\n    /* istanbul ignore next */\n    public getFileInfo(fileIndex: number): Object { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\ndeclare var jQuery: any;\n\n@Component({\n    selector: \"ig-popover\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"closeOnBlur\", \"direction\", \"position\", \"width\", \"height\", \"minWidth\", \"maxWidth\", \"maxHeight\", \"animationDuration\", \"contentTemplate\", \"selectors\", \"headerTemplate\", \"showOn\", \"containment\", \"appendTo\"],\n    outputs: [\"showing\", \"shown\", \"hiding\", \"hidden\"]\n})\nexport class IgPopoverComponent extends IgControlBase<IgPopover> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); } public option(): void { return; };\n\n\n    ngOnInit() {\n        var elem = jQuery(document).find(\"#\" + this.widgetId);\n        if (elem.length === 1) {\n            this._el = elem;\n            this._events = new Map<string, string>();\n            //events binding\n            let that = this;\n            var evtName;\n            for (var propt in jQuery.ui[this._widgetName].prototype.events) {\n                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();\n                this._events[evtName] = propt;\n                jQuery(this._el).on(evtName, function (evt, ui) {\n                    that[that._events[evt.type]].emit({ event: evt, ui: ui });\n                });\n            }\n\n            jQuery(this._el)[this._widgetName](this.options);\n        } else {\n            super.ngOnInit();\n        }\n\n    }\n\n    /**\n     * Destroys the popover widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Returns the ID of the element the popover is attached to\n     */\n    /* istanbul ignore next */\n    public id(): string { return; };\n\n    /**\n     * Returns the container for the popover contents\n     */\n    /* istanbul ignore next */\n    public container(): Object { return; };\n\n    /**\n     * Shows the popover for the specified target\n     *\n     * @param trg     The element to show popover for.\n     * @param content     The string to set for the popover to show.\n     */\n    /* istanbul ignore next */\n    public show(trg?: Element, content?: string): void { return; };\n\n    /**\n     * Hides the popover for the specified target\n     */\n    /* istanbul ignore next */\n    public hide(): void { return; };\n\n    /**\n     * Gets the currently set content for the popover container\n     */\n    /* istanbul ignore next */\n    public getContent(): string { return; };\n\n    /**\n     * Sets the content for the popover container\n     *\n     * @param newCnt     The popover content to set.\n     */\n    /* istanbul ignore next */\n    public setContent(newCnt: string): void { return; };\n\n    /**\n     * Gets the popover current target\n     */\n    /* istanbul ignore next */\n    public target(): Object { return; };\n\n    /**\n     * Gets the current coordinates of the popover\n     */\n    /* istanbul ignore next */\n    public getCoordinates(): Object { return; };\n\n    /**\n     * Sets the popover to specific coordinates.\n     *\n     * @param pos     The popover coordinates in pixels.\n     */\n    /* istanbul ignore next */\n    public setCoordinates(pos: Object): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\ndeclare var jQuery;\n\n@Component({\n    selector: \"ig-notifier\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"closeOnBlur\", \"direction\", \"position\", \"width\", \"height\", \"minWidth\", \"maxWidth\", \"maxHeight\", \"animationDuration\", \"contentTemplate\", \"selectors\", \"headerTemplate\", \"showOn\", \"containment\", \"appendTo\", \"state\", \"notifyLevel\", \"mode\", \"allowCSSOnTarget\", \"messages\", \"showIcon\", \"animationSlideDistance\"],\n    outputs: [\"showing\", \"shown\", \"hiding\", \"hidden\"]\n})\n//TODO: change the model from any to IgNotifier when added to igniteui typescript definitions\nexport class IgNotifierComponent extends IgControlBase<IgNotifier> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); } public option(): void { return; };\n\n\n    ngOnInit() {\n        var elem = jQuery(document).find(\"#\" + this.widgetId);\n        if (elem.length === 1) {\n            this._el = elem;\n            this._events = new Map<string, string>();\n            //events binding\n            let that = this;\n            var evtName;\n            for (var propt in jQuery.ui[this._widgetName].prototype.events) {\n                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();\n                this._events[evtName] = propt;\n                jQuery(this._el).on(evtName, function (evt, ui) {\n                    that[that._events[evt.type]].emit({ event: evt, ui: ui });\n                });\n            }\n\n            jQuery(this._el)[this._widgetName](this.options);\n        } else {\n            super.ngOnInit();\n        }\n    }\n\n    /**\n     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.\n     *\n     * @param state    The state to show notification for.\n     * @param message    Optional message to show, overrides defaults.\n     */\n    /* istanbul ignore next */\n    public notify(state: Object, message?: string): void { return; };\n\n    /**\n     * Returns true if the notification is currently visible\n     */\n    /* istanbul ignore next */\n    public isVisible(): void { return; };\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-rating\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\",\"disabled\",\"create\",\"vertical\",\"value\",\"valueHover\",\"voteCount\",\"voteWidth\",\"voteHeight\",\"swapDirection\",\"valueAsPercent\",\"focusable\",\"precision\",\"precisionZeroVote\",\"roundedDecimalPlaces\",\"theme\",\"validatorOptions\",\"cssVotes\"],\n    outputs: [\"hoverChange\",\"valueChange\"]\n})\nexport class IgRatingComponent extends IgControlBase<IgRating> { \n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { \n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\t\n\n    /**\n     * Gets reference to [igValidator](ui.igvalidator) used by igRating.\n     *\n     * @param destroy     Request to destroy validator.\n     */\n    /* istanbul ignore next */\n    public validator(destroy?: boolean): Object { return; } ;\n\n    /**\n     * Triggers validation.\n     */\n    /* istanbul ignore next */\n    public validate(): boolean { return; } ;\n\n    /**\n     * Gets/Sets (selected) value.\n     *\n     * @param val     New value which is rendered with selected css.\n     * @return number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.\n     */\n    /* istanbul ignore next */\n    public value(val: number): number|Object { return; } ;\n\n    /**\n     * Gets/Sets hover value.\n     *\n     * @param val     New value which will be rendered with hover css when rating gets mouse.\n     * @return number|object     If parameter is not \"number\", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.\n     */\n    /* istanbul ignore next */\n    public valueHover(val?: number): number|Object { return; } ;\n\n    /**\n     * Checks if igRating has focus.\n     */\n    /* istanbul ignore next */\n    public hasFocus(): boolean { return; } ;\n\n    /**\n     * Sets focus to igRating. That has effect only when options.focusable is enabled.\n     */\n    /* istanbul ignore next */\n    public focus(): Object { return; } ;\n\n    /**\n     * Destroys igRating widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): Object { return; } ;\n}","import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-video-player\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"sources\", \"width\", \"height\", \"posterUrl\", \"preload\", \"autoplay\", \"autohide\", \"volumeAutohideDelay\", \"centerButtonHideDelay\", \"loop\", \"browserControls\", \"fullscreen\", \"volume\", \"muted\", \"title\", \"showSeekTime\", \"progressLabelFormat\", \"bookmarks\", \"relatedVideos\", \"banners\", \"commercials\"],\n    outputs: [\"ended\", \"playing\", \"paused\", \"buffering\", \"progress\", \"waiting\", \"bookmarkHit\", \"bookmarkClick\", \"enterFullScreen\", \"exitFullScreen\", \"relatedVideoClick\", \"bannerVisible\", \"bannerHidden\", \"bannerClick\", \"browserNotSupported\"]\n})\nexport class IgVideoPlayerComponent extends IgControlBase<IgVideoPlayer> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n\n    /**\n     * Returns the element on which the widget was instantiated\n     */\n    /* istanbul ignore next */\n    public widget(): void { return; };\n\n    /**\n     * Hide the add message if shown.\n     */\n    /* istanbul ignore next */\n    public hideAdMessage(): void { return; };\n\n    /**\n     * Play a linked commercial for this video.\n     *\n     * @param commercial     Specify the linked commercial to play.\n     */\n    /* istanbul ignore next */\n    public playCommercial(commercial: Object): void { return; };\n\n    /**\n     * Shows the ad banner, if there is such.\n     *\n     * @param index    Specify the index of the banner from the banners array.\n     */\n    /* istanbul ignore next */\n    public showBanner(index: number): void { return; };\n\n    /**\n     * Hide the ad banner, if there is such.\n     *\n     * @param index    Specify the index of the banner from the banners array.\n     */\n    /* istanbul ignore next */\n    public hideBanner(index: number): void { return; };\n\n    /**\n     * Resets the commercials, to be shown again.\n     */\n    /* istanbul ignore next */\n    public resetCommercialsShow(): void { return; };\n\n    /**\n     * Toggle control play state. If video is playing it will pause, if video is paused it will play.\n     */\n    /* istanbul ignore next */\n    public togglePlay(): void { return; };\n\n    /**\n     * Start playing current loaded video if any.\n     */\n    /* istanbul ignore next */\n    public play(): void { return; };\n\n    /**\n     * Pause the currently playing video if any.\n     */\n    /* istanbul ignore next */\n    public pause(): void { return; };\n\n    /**\n     * Gets/Sets the current time of the playing video.\n     *\n     * @param val     Specify the playback position in seconds to navigate to.\n     */\n    /* istanbul ignore next */\n    public currentTime(val: number): number { return; };\n\n    /**\n     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.\n     *\n     * @param scaleFactor    Specify scale factor between 0 and 1.\n     */\n    /* istanbul ignore next */\n    public screenshot(scaleFactor?: number): Object { return; };\n\n    /**\n     * Get whether the current browser supports video tag.\n     */\n    /* istanbul ignore next */\n    public supportsVideo(): boolean { return; };\n\n    /**\n     * Get whether the current browser supports H.264 codec.\n     */\n    /* istanbul ignore next */\n    public supportsH264BaselineVideo(): boolean { return; };\n\n    /**\n     * Get whether the current browser supports Theora codec.\n     */\n    /* istanbul ignore next */\n    public supportsOggTheoraVideo(): boolean { return; };\n\n    /**\n     * Get whether the current browser supports WEBM codec.\n     */\n    /* istanbul ignore next */\n    public supportsWebmVideo(): boolean { return; };\n\n    /**\n     * Returns whether the currently played video is paused.\n     */\n    /* istanbul ignore next */\n    public paused(): boolean { return; };\n\n    /**\n     * Get whether the current played video has ended.\n     */\n    /* istanbul ignore next */\n    public ended(): boolean { return; };\n\n    /**\n     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.\n     */\n    /* istanbul ignore next */\n    public duration(): number { return; };\n\n    /**\n     * Get whether the player is seeking to find the new playback position specified.\n     */\n    /* istanbul ignore next */\n    public seeking(): boolean { return; };\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n}\n\n","import { Component, Renderer, IterableDiffers, ElementRef, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-radial-menu\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"items\", \"currentOpenMenuItemName\", \"centerButtonContentWidth\", \"centerButtonContentHeight\", \"centerButtonClosedFill\", \"centerButtonClosedStroke\", \"centerButtonFill\", \"centerButtonHotTrackFill\", \"centerButtonHotTrackStroke\", \"centerButtonStroke\", \"centerButtonStrokeThickness\", \"font\", \"isOpen\", \"menuBackground\", \"menuItemOpenCloseAnimationDuration\", \"menuItemOpenCloseAnimationEasingFunction\", \"menuOpenCloseAnimationDuration\", \"menuOpenCloseAnimationEasingFunction\", \"minWedgeCount\", \"outerRingFill\", \"outerRingThickness\", \"outerRingStroke\", \"outerRingStrokeThickness\", \"rotationInDegrees\", \"rotationAsPercentageOfWedge\", \"wedgePaddingInDegrees\", \"pixelScalingRatio\"],\n    outputs: [\"formatLabel\", \"alignLabel\", \"valueChanged\"]\n})\nexport class IgRadialMenuComponent extends IgControlBase<IgRadialMenu> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n    /* istanbul ignore next */\n    public itemOption(itemKey: Object, key: Object, value: Object): void { return; };\n    /* istanbul ignore next */\n    public exportVisualData(): void { return; };\n    /* istanbul ignore next */\n    public flush(): void { return; };\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n    /* istanbul ignore next */\n    public styleUpdated(): void { return; };\n}","import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-split-button\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"items\", \"defaultItemName\", \"swapDefaultEnabled\"],\n    outputs: [\"click\", \"expanded\", \"expanding\", \"collapsed\", \"collapsing\"]\n})\nexport class IgSplitButtonComponent extends IgControlBase<IgSplitButton> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { super(el, renderer, differs, kvalDiffers, cdr); }\n\n\n    /**\n     * Switch to given igToolbar button.\n     *\n     * @param button . The button jQuery element.\n     */\n    /* istanbul ignore next */\n    public switchToButton(button: Object): void { return; };\n\n\n    /**\n     * Toggle widget state between collapsed and expanded.\n     *\n     * @param e The igSplitButton to be expanded/collapsed.\n     */\n    /* istanbul ignore next */\n    public toggle(e: Object): Object { return; };\n\n\n    /**\n     * Collapse the widget.\n     *\n     * @param e Indicates the browser event which triggered this action (not API).\n     */\n    /* istanbul ignore next */\n    public collapse(e?: Object): Object { return; };\n\n\n    /**\n     * Expands the widget.\n     *\n     * @param e Indicates the browser event which triggered this action (not API).\n     */\n    /* istanbul ignore next */\n    public expand(e?: Object): Object { return; };\n\n    /**\n     * Destroy the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n    /* istanbul ignore next */\n    public widget(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-spreadsheet\",\n    template: \"<ng-content></ng-content>\",\n    inputs: [\"widgetId\", \"options\", \"changeDetectionInterval\", \"disabled\", \"create\", \"width\", \"height\", \"activeCell\", \"isScrollLocked\", \"activeWorksheet\", \"allowAddWorksheet\", \"allowDeleteWorksheet\", \"areGridlinesVisible\", \"areHeadersVisible\", \"enterKeyNavigationDirection\", \"isEnterKeyNavigationEnabled\", \"isFormulaBarVisible\", \"isInEndMode\", \"isUndoEnabled\", \"nameBoxWidth\", \"selectionMode\", \"selectedWorksheets\", \"validationInputMessagePosition\", \"workbook\", \"zoomLevel\"],\n    outputs: [\"actionExecuted\", \"actionExecuting\", \"activeCellChanged\", \"activePaneChanged\", \"activeWorksheetChanged\", \"editRangePasswordNeeded\", \"hyperlinkExecuting\", \"selectionChanged\", \"userPromptDisplaying\", \"workbookDirtied\"]\n})\nexport class IgSpreadsheetComponent extends IgControlBase<IgSpreadsheet> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) {\n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\n    /**\n     * Returns an object that represents the pane with the focus.\n     */\n    /* istanbul ignore next */\n    public getActivePane(): Object { return; };\n\n    /**\n     * Returns an object that represents the current selection of the active pane.\n     */\n    /* istanbul ignore next */\n    public getActiveSelection(): Object { return; };\n\n    /**\n     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.\n     *\t\t\t\tAny changes made to this object will affect all the objects in the selection. So for example, the \n    *\t\t\t\tFont.Name may return \"Arial\" because the active cell has that as its resolved font name even though the other \n    *\t\t\t\tcells are using a different font but if you set the Font.Name of this object to \"Arial\" then all the objects \n    *\t\t\t\taffected by the selection will have their Font.Name updated to that value.\n    */\n    /* istanbul ignore next */\n    public getActiveSelectionCellRangeFormat(): Object { return; };\n\n    /**\n     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.\n     */\n    /* istanbul ignore next */\n    public getIsRenamingWorksheet(): boolean { return; };\n\n    /**\n     * Returns an array of the panes for the activeWorksheet.\n     *\t\t\t \n    *\t\t\t\t returnType=\"ig.spreadsheet.SpreadsheetPane[]\"\n    */\n    /* istanbul ignore next */\n    public getPanes(): void { return; };\n\n    /**\n     * Executes the action associated with the specified id.\n     *\n     * @param action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.\n     */\n    /* istanbul ignore next */\n    public executeAction(action: Object): boolean { return; };\n\n    /**\n     * Forces any pending deferred work to render on the spreadsheet before continuing\n     */\n    /* istanbul ignore next */\n    public flush(): void { return; };\n\n    /**\n     * Destroys the widget.\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.\n     */\n    /* istanbul ignore next */\n    public styleUpdated(): void { return; };\n}","import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from \"@angular/core\";\nimport { IgControlBase } from \"../igcontrolbase/igcontrolbase\";\n\n@Component({\n    selector: \"ig-scheduler\",\n    template: \"<ng-content></ng-content>\",\n    inputs:[\"widgetId\",\"options\",\"changeDetectionInterval\",\"disabled\",\"create\",\"views\",\"viewMode\",\"selectedDate\",\"enableTodayButton\",\"width\",\"height\",\"agendaViewSettings\",\"monthViewSettings\",\"appointmentDialogSuppress\"],\n    outputs:[\"agendaRangeChanging\",\"agendaRangeChanged\",\"daySelected\",\"monthChanging\",\"monthChanged\",\"rendering\",\"rendered\",\"viewChanging\",\"viewChanged\",\"appointmentDialogOpening\",\"appointmentDialogOpened\",\"appointmentDialogClosing\",\"appointmentDialogClosed\",\"appointmentCreating\",\"appointmentCreated\",\"appointmentDeleting\",\"appointmentDeleted\",\"appointmentEditing\",\"appointmentEdited\"]\n})\nexport class IgSchedulerComponent extends IgControlBase<IgScheduler> {\n    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef) { \n        super(el, renderer, differs, kvalDiffers, cdr);\n    }\t\n\n    /**\n     * Gets reference to appointment by id\n     *\n     * @param id \n     */\n    /* istanbul ignore next */\n    public getAppointmentById(id: Object): Object { return; };\n\n    /**\n     * Creates a new appointment and renders it to the scheduler\n     *\n     * @param appointment \n     */\n    /* istanbul ignore next */\n    public createAppointment(appointment: Object): Object { return; };\n\n    /**\n     * Deletes appointment from the appointment collection\n     *\n     * @param appointment\tappointment\n     */\n    /* istanbul ignore next */\n    public deleteAppointment(appointment: Object): Object { return; };\n\n    /**\n     * Deletes appointment from the appointment collection\n     *\n     * @param appointment\tappointment\n     * @param updateAppoinment\tupdateAppoinment\n     */\n    /* istanbul ignore next */\n    public editAppointment(appointment: Object, updateAppoinment: Object): Object { return; };\n\n    /**\n     * Destroys the widget\n     */\n    /* istanbul ignore next */\n    public destroy(): void { return; };\n\n    /**\n     * Gets reference to the today UI button.\n     */\n    /* istanbul ignore next */\n    public todayButton(): string { return; };\n\n    /**\n     * Gets reference to the previous UI button.\n     */\n    /* istanbul ignore next */\n    public previousButton(): string { return; };\n\n    /**\n     * Gets reference to the date range UI button.\n     */\n    /* istanbul ignore next */\n    public dateRangeButton(): string { return; };\n\n    /**\n     * Gets reference to the next UI button.\n     */\n    /* istanbul ignore next */\n    public nextButton(): string { return; };\n\n    /**\n     * Gets reference to the jQuery calendar UI control.\n     */\n    /* istanbul ignore next */\n    public getCalendar(): string { return; };\n}","import {NgModule} from '@angular/core';\nimport { Column } from './iggrid/column.directive';\nimport { IgGridMultiColumnHeadersFeature } from './iggrid/iggridfeatures/iggridmulticolumnheaders.directive';\nimport { IgGridSortingFeature } from './iggrid/iggridfeatures/iggridsorting.directive';\nimport { IgGridFilteringFeature } from './iggrid/iggridfeatures/iggridfiltering.directive';\nimport { IgGridPagingFeature } from './iggrid/iggridfeatures/iggridpaging.directive';\nimport { IgGridUpdatingFeature } from './iggrid/iggridfeatures/iggridupdating.directive';\nimport { IgGridGroupByFeature } from './iggrid/iggridfeatures/iggridgroupby.directive';\nimport { IgGridColumnMovingFeature } from './iggrid/iggridfeatures/iggridcolumnmoving';\nimport { IgGridHidingFeature } from './iggrid/iggridfeatures/iggridhiding.directive';\nimport { IgGridCellMergingFeature } from './iggrid/iggridfeatures/iggridcellmerging.directive';\nimport { IgGridResponsiveFeature } from './iggrid/iggridfeatures/iggridresponsive.directive';\nimport { IgGridResizingFeature } from './iggrid/iggridfeatures/iggridresizing.directive';\nimport { IgGridSelectionFeature } from './iggrid/iggridfeatures/iggridselection.directive';\nimport { IgGridRowSelectorsFeature } from './iggrid/iggridfeatures/iggridrowselectors.directive';\nimport { IgGridSummariesFeature } from './iggrid/iggridfeatures/iggridsummaries.directive';\nimport { IgGridColumnFixingFeature } from './iggrid/iggridfeatures/iggridcolumnfixing.directive';\nimport { IgGridTooltipsFeature } from './iggrid/iggridfeatures/iggridtooltips.directive';\nimport { IgGridAppendRowsOnDemandFeature } from './iggrid/iggridfeatures/iggridappendrowsondemand.directive';\nimport { Features } from './iggrid/features.directive';\nimport { IgGridComponent } from './iggrid/iggrid.component';\nimport { IgTreeGridComponent } from './igtreegrid/igtreegrid.component';\nimport { IgHierarchicalGridComponent } from './ighierarchicalgrid/ighierarchicalgrid.component';\nimport { IgComboComponent } from './igcombo/igcombo.component';\nimport { IgCheckboxEditorComponent } from './igeditors/igcheckboxeditor.component';\nimport { IgCurrencyEditorComponent } from './igeditors/igcurrencyeditor.component';\nimport { IgDateEditorComponent } from './igeditors/igdateeditor.component';\nimport { IgDatePickerComponent } from './igeditors/igdatepicker.component';\nimport { IgTimePickerComponent } from './igeditors/igtimepicker.component';\nimport { IgMaskEditorComponent } from './igeditors/igmaskeditor.component';\nimport { IgNumericEditorComponent } from './igeditors/ignumericeditor.component';\nimport { IgPercentEditorComponent } from './igeditors/igpercenteditor.component';\nimport { IgTextEditorComponent } from './igeditors/igtexteditor.component';\nimport { IgTreeComponent } from './igtree/igtree.component';\nimport { IgDialogComponent } from './igdialog/igdialog.component';\nimport { IgSplitterComponent } from './igsplitter/igsplitter.component';\nimport { IgLayoutManagerComponent } from './iglayoutmanager/iglayoutmanager.component';\nimport { IgTileManagerComponent } from './igtilemanager/igtilemanager.component';\nimport { IgHtmlEditorComponent } from './ightmleditor/ightmleditor.component';\nimport { IgValidatorComponent } from './igvalidator/igvalidator.component';\nimport { IgPivotDataSelectorComponent } from './igpivotdataselector/igpivotdataselector.component';\nimport { IgPivotGridComponent } from './igpivotgrid/igpivotgrid.component';\nimport { IgDataChartComponent } from './igdatachart/igdatachart.component';\nimport { IgPieChartComponent } from './igpiechart/igpiechart.component';\nimport { IgDoughnutChartComponent } from './igdoughnutchart/igdoughnutchart.component';\nimport { IgFunnelChartComponent } from './igfunnelchart/igfunnelchart.component';\nimport { IgRadialGaugeComponent } from './igradialgauge/igradialgauge.component';\nimport { IgZoombarComponent } from './igzoombar/igzoombar.component';\nimport { IgMapComponent } from './igmap/igmap.component';\nimport { IgSparklineComponent } from './igsparkline/igsparkline.component';\nimport { IgBulletGraphComponent } from './igbulletgraph/igbulletgraph.component';\nimport { IgLinearGaugeComponent } from './iglineargauge/iglineargauge.component';\nimport { IgQRCodeBarcodeComponent } from './igqrcodebarcode/igqrcodebarcode.component';\nimport { IgUploadComponent } from './igupload/igupload.component';\nimport { IgPopoverComponent } from './igpopover/igpopover.component';\nimport { IgNotifierComponent } from './ignotifier/ignotifier.component';\nimport { IgRatingComponent } from './igrating/igrating.component';\nimport { IgVideoPlayerComponent } from './igvideoplayer/igvideoplayer.component';\nimport { IgRadialMenuComponent } from './igradialmenu/igradialmenu.component';\nimport { IgSplitButtonComponent } from './igsplitbutton/igsplitbutton.component';\nimport { IgSpreadsheetComponent } from './igspreadsheet/igspreadsheet.component';\nimport { IgSchedulerComponent } from './igscheduler/igscheduler.component';\n\nexport { Column };\nexport { IgGridMultiColumnHeadersFeature };\nexport { IgGridSortingFeature };\nexport { IgGridFilteringFeature };\nexport { IgGridPagingFeature };\nexport { IgGridUpdatingFeature };\nexport { IgGridGroupByFeature };\nexport { IgGridColumnMovingFeature };\nexport { IgGridHidingFeature };\nexport { IgGridCellMergingFeature };\nexport { IgGridResponsiveFeature };\nexport { IgGridResizingFeature };\nexport { IgGridSelectionFeature };\nexport { IgGridRowSelectorsFeature };\nexport { IgGridSummariesFeature };\nexport { IgGridColumnFixingFeature };\nexport { IgGridTooltipsFeature };\nexport { IgGridAppendRowsOnDemandFeature };\nexport { Features };\nexport { IgGridComponent };\nexport { IgTreeGridComponent };\nexport { IgHierarchicalGridComponent };\nexport { IgComboComponent };\nexport { IgCheckboxEditorComponent };\nexport { IgCurrencyEditorComponent };\nexport { IgDateEditorComponent };\nexport { IgDatePickerComponent };\nexport { IgTimePickerComponent };\nexport { IgMaskEditorComponent };\nexport { IgNumericEditorComponent };\nexport { IgPercentEditorComponent };\nexport { IgTextEditorComponent };\nexport { IgTreeComponent };\nexport { IgDialogComponent };\nexport { IgSplitterComponent };\nexport { IgLayoutManagerComponent };\nexport { IgTileManagerComponent };\nexport { IgHtmlEditorComponent };\nexport { IgValidatorComponent };\nexport { IgPivotDataSelectorComponent };\nexport { IgPivotGridComponent };\nexport { IgDataChartComponent };\nexport { IgPieChartComponent };\nexport { IgDoughnutChartComponent };\nexport { IgFunnelChartComponent };\nexport { IgRadialGaugeComponent };\nexport { IgZoombarComponent };\nexport { IgMapComponent };\nexport { IgSparklineComponent };\nexport { IgBulletGraphComponent };\nexport { IgLinearGaugeComponent };\nexport { IgQRCodeBarcodeComponent };\nexport { IgUploadComponent };\nexport { IgPopoverComponent };\nexport { IgNotifierComponent };\nexport { IgRatingComponent };\nexport { IgVideoPlayerComponent };\nexport { IgRadialMenuComponent };\nexport { IgSplitButtonComponent };\nexport { IgSpreadsheetComponent };\nexport { IgSchedulerComponent };\n\n@NgModule({\n\tdeclarations: [Column,IgGridMultiColumnHeadersFeature,IgGridSortingFeature,IgGridFilteringFeature,IgGridPagingFeature,IgGridUpdatingFeature,IgGridGroupByFeature,IgGridColumnMovingFeature,IgGridHidingFeature,IgGridCellMergingFeature,IgGridResponsiveFeature,IgGridResizingFeature,IgGridSelectionFeature,IgGridRowSelectorsFeature,IgGridSummariesFeature,IgGridColumnFixingFeature,IgGridTooltipsFeature,IgGridAppendRowsOnDemandFeature,Features,IgGridComponent,IgTreeGridComponent,IgHierarchicalGridComponent,IgComboComponent,IgCheckboxEditorComponent,IgCurrencyEditorComponent,IgDateEditorComponent,IgDatePickerComponent,IgDatePickerComponent,IgTimePickerComponent,IgMaskEditorComponent,IgNumericEditorComponent,IgPercentEditorComponent,IgTextEditorComponent,IgTreeComponent,IgDialogComponent,IgSplitterComponent,IgLayoutManagerComponent,IgTileManagerComponent,IgHtmlEditorComponent,IgValidatorComponent,IgPivotDataSelectorComponent,IgPivotGridComponent,IgDataChartComponent,IgPieChartComponent,IgDoughnutChartComponent,IgFunnelChartComponent,IgRadialGaugeComponent,IgZoombarComponent,IgMapComponent,IgSparklineComponent,IgBulletGraphComponent,IgLinearGaugeComponent,IgQRCodeBarcodeComponent,IgUploadComponent,IgPopoverComponent,IgNotifierComponent,IgRatingComponent,IgVideoPlayerComponent,IgRadialMenuComponent,IgSplitButtonComponent, IgSpreadsheetComponent, IgSchedulerComponent],\n\texports: [Column, IgGridMultiColumnHeadersFeature, IgGridSortingFeature,IgGridFilteringFeature,IgGridPagingFeature,IgGridUpdatingFeature,IgGridGroupByFeature,IgGridColumnMovingFeature,IgGridHidingFeature,IgGridCellMergingFeature,IgGridResponsiveFeature,IgGridResizingFeature,IgGridSelectionFeature,IgGridRowSelectorsFeature,IgGridSummariesFeature,IgGridColumnFixingFeature,IgGridTooltipsFeature,IgGridAppendRowsOnDemandFeature,Features,IgGridComponent,IgTreeGridComponent,IgHierarchicalGridComponent,IgComboComponent,IgCheckboxEditorComponent,IgCurrencyEditorComponent,IgDateEditorComponent,IgDatePickerComponent,IgDatePickerComponent,IgTimePickerComponent,IgMaskEditorComponent,IgNumericEditorComponent,IgPercentEditorComponent,IgTextEditorComponent,IgTreeComponent,IgDialogComponent,IgSplitterComponent,IgLayoutManagerComponent,IgTileManagerComponent,IgHtmlEditorComponent,IgValidatorComponent,IgPivotDataSelectorComponent,IgPivotGridComponent,IgDataChartComponent,IgPieChartComponent,IgDoughnutChartComponent,IgFunnelChartComponent,IgRadialGaugeComponent,IgZoombarComponent,IgMapComponent,IgSparklineComponent,IgBulletGraphComponent,IgLinearGaugeComponent,IgQRCodeBarcodeComponent,IgUploadComponent,IgPopoverComponent,IgNotifierComponent,IgRatingComponent,IgVideoPlayerComponent,IgRadialMenuComponent,IgSplitButtonComponent, IgSpreadsheetComponent, IgSchedulerComponent]\n})\nexport class IgniteUIModule {}"]}