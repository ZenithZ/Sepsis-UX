import { Directive, ElementRef, EventEmitter, ContentChild, Input, ContentChildren, Component, ChangeDetectionStrategy, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Optional, NgZone, NgModule } from '@angular/core';
import { __extends } from 'tslib';
import { NgModel } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Column = /** @class */ (function () {
    function Column(el) {
        this._settings = {};
        this._el = el;
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var i;
        /** @type {?} */
        var settings = ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass'];
        for (i = 0; i < settings.length; i++) {
            Object.defineProperty(self, settings[i], {
                set: self.createColumnsSetter(settings[i]),
                get: self.createColumnsGetter(settings[i]),
                enumerable: true,
                configurable: true
            });
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    Column.prototype.createColumnsSetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var grid = jQuery(this._el.nativeElement.parentElement).find("table[role='grid']");
            /** @type {?} */
            var columns = grid["igGrid"]("option", "columns");
            this._settings[name] = value;
            if (jQuery.ui["igGrid"] &&
                jQuery.ui["igGrid"].prototype.options &&
                jQuery.ui["igGrid"].prototype.options.hasOwnProperty("columns") &&
                grid.data("igGrid")) {
                //reapply all column settings when a column setting is changed
                grid["igGrid"]("option", "columns", columns);
            }
        });
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Column.prototype.createColumnsGetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @return {?}
         */
        function () {
            return this._settings[name];
        });
    };
    Column.decorators = [
        { type: Directive, args: [{
                    selector: 'column',
                    inputs: ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass']
                },] }
    ];
    /** @nocollapse */
    Column.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Column;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template Model
 */
var  /**
 * @template Model
 */
Feature = /** @class */ (function () {
    function Feature(el) {
        this._settings = {};
        this._el = el;
        this.name = this.normalizeName(el.nativeElement.nodeName.toLowerCase());
        this.featureName = "igGrid" + this.name;
        for (var propt in jQuery.ui["igGrid" + this.name].prototype.events) {
            this[propt] = new EventEmitter();
        }
    }
    /**
     * @return {?}
     */
    Feature.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        this.initSettings = jQuery.extend(true, {}, this);
        /** @type {?} */
        var evtName;
        this._events = new Map();
        /** @type {?} */
        var grid = jQuery(this._el.nativeElement).closest("ig-grid").find("table");
        //event binding for features
        for (var propt in jQuery.ui[this.featureName].prototype.events) {
            evtName = this.featureName.toLowerCase() + propt.toLowerCase();
            this._events[evtName] = propt;
            jQuery(grid).on(evtName, (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                self[self._events[evt.type]].emit({ event: evt, ui: ui });
            }));
        }
        for (var setting in jQuery.ui[this.featureName].prototype.options) {
            Object.defineProperty(self, setting, {
                set: self.createFeatureSetter(setting),
                get: self.createFeatureGetter(setting),
                enumerable: true,
                configurable: true
            });
        }
        /** @type {?} */
        var propNames = Object.getOwnPropertyNames(jQuery.ui[this.featureName].prototype);
        for (var i = 0; i < propNames.length; i++) {
            /** @type {?} */
            var name = propNames[i];
            if (name.indexOf("_") !== 0 && typeof jQuery.ui[this.featureName].prototype[name] === "function") {
                Object.defineProperty(self, name, {
                    get: self.createMethodGetter(name)
                });
            }
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Feature.prototype.createFeatureSetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var grid = jQuery(this._el.nativeElement).closest("ig-grid").find("table[role='grid']");
            this._settings[name] = value;
            if (jQuery.ui[this.featureName] &&
                jQuery.ui[this.featureName].prototype.options &&
                jQuery.ui[this.featureName].prototype.options.hasOwnProperty(name) &&
                grid.data(this.featureName)) {
                grid[this.featureName]("option", name, value);
            }
        });
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Feature.prototype.createFeatureGetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @return {?}
         */
        function () {
            return this._settings[name];
        });
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Feature.prototype.createMethodGetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var grid = jQuery(this._el.nativeElement).closest("ig-grid").find("table[role='grid']");
            if (grid.length === 0) {
                grid = jQuery(this._el.nativeElement).closest("ig-hierarchical-grid").find("table[role='grid']");
            }
            /** @type {?} */
            var feature = grid.data(this.featureName);
            return jQuery.proxy(feature[name], feature);
        });
    };
    /**
     * @param {?} str
     * @return {?}
     */
    Feature.prototype.normalizeName = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        //convert hyphen to camelCase
        /** @type {?} */
        var name = str.replace(/-([a-z])/g, (/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            return group[1].toUpperCase();
        }));
        return name.charAt(0).toUpperCase() + name.slice(1);
    };
    return Feature;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridMultiColumnHeadersFeature = /** @class */ (function (_super) {
    __extends(IgGridMultiColumnHeadersFeature, _super);
    function IgGridMultiColumnHeadersFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Collapses an expanded group. If the group is collapsed, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     */
    /* istanbul ignore next */
    /**
     * Collapses an expanded group. If the group is collapsed, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.collapseGroup = /**
     * Collapses an expanded group. If the group is collapsed, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    function (groupKey, callback) { return; };
    /**
     * Expands a collapsed group. If the group is expanded, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     */
    /* istanbul ignore next */
    /**
     * Expands a collapsed group. If the group is expanded, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.expandGroup = /**
     * Expands a collapsed group. If the group is expanded, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    function (groupKey, callback) { return; };
    /**
     * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined.
     */
    /* istanbul ignore next */
    /**
     * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.getMultiColumnHeaders = /**
     * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Toggles a collapsible group.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     */
    /* istanbul ignore next */
    /**
     * Toggles a collapsible group.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.toggleGroup = /**
     * Toggles a collapsible group.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    function (groupKey, callback) { return; };
    IgGridMultiColumnHeadersFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'multi-column-headers',
                    inputs: ["inherit"],
                    outputs: ["groupCollapsing", "groupCollapsed", "groupExpanding", "groupExpanded"]
                },] }
    ];
    /** @nocollapse */
    IgGridMultiColumnHeadersFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridMultiColumnHeadersFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridSortingFeature = /** @class */ (function (_super) {
    __extends(IgGridSortingFeature, _super);
    function IgGridSortingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Sorts the data in a grid column  and updates the UI.
     *
     * @param index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param direction     Specifies sorting direction (ascending or descending)
     * @param header
     */
    /* istanbul ignore next */
    /**
     * Sorts the data in a grid column  and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} direction     Specifies sorting direction (ascending or descending)
     * @param {?} header
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.sortColumn = /**
     * Sorts the data in a grid column  and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} direction     Specifies sorting direction (ascending or descending)
     * @param {?} header
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, direction, header) { return; };
    /**
     * Sorts the data in grid columns and updates the UI.\
     */
    /* istanbul ignore next */
    /**
     * Sorts the data in grid columns and updates the UI.\
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.sortMultiple = /**
     * Sorts the data in grid columns and updates the UI.\
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Removes current sorting(for all sorted columns) and updates the UI.
     */
    /* istanbul ignore next */
    /**
     * Removes current sorting(for all sorted columns) and updates the UI.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.clearSorting = /**
     * Removes current sorting(for all sorted columns) and updates the UI.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
     *
     * @param index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param header     - if specified client events should be fired
     */
    /* istanbul ignore next */
    /**
     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} header     - if specified client events should be fired
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.unsortColumn = /**
     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} header     - if specified client events should be fired
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, header) { return; };
    /**
     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
     */
    /* istanbul ignore next */
    /**
     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.destroy = /**
     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Opens the multiple sorting dialog.
     */
    /* istanbul ignore next */
    /**
     * Opens the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.openMultipleSortingDialog = /**
     * Opens the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Closes the multiple sorting dialog.
     */
    /* istanbul ignore next */
    /**
     * Closes the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.closeMultipleSortingDialog = /**
     * Closes the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param isToCallEvents
     */
    /* istanbul ignore next */
    /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param {?} isToCallEvents
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.renderMultipleSortingDialogContent = /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param {?} isToCallEvents
     * @return {?}
     */
    /* istanbul ignore next */
    function (isToCallEvents) { return; };
    /**
     * Remove clear button for multiple sorting dialog
     */
    /* istanbul ignore next */
    /**
     * Remove clear button for multiple sorting dialog
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.removeDialogClearButton = /**
     * Remove clear button for multiple sorting dialog
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridSortingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'sorting',
                    inputs: ["disabled", "create", "type", "caseSensitive", "applySortedColumnCss", "sortUrlKey", "sortUrlKeyAscValue", "sortUrlKeyDescValue", "mode", "customSortFunction", "firstSortDirection", "sortedColumnTooltip", "modalDialogSortOnClick", "modalDialogSortByButtonText", "modalDialogResetButtonLabel", "modalDialogCaptionButtonDesc", "modalDialogCaptionButtonAsc", "modalDialogCaptionButtonUnsort", "modalDialogWidth", "modalDialogHeight", "modalDialogAnimationDuration", "featureChooserText", "unsortedColumnTooltip", "columnSettings", "modalDialogCaptionText", "modalDialogButtonApplyText", "modalDialogButtonCancelText", "featureChooserSortAsc", "featureChooserSortDesc", "persist", "sortingDialogContainment", "dialogWidget", "inherit"],
                    outputs: ["columnSorting", "columnSorted", "modalDialogOpening", "modalDialogOpened", "modalDialogMoving", "modalDialogClosing", "modalDialogClosed", "modalDialogContentsRendering", "modalDialogContentsRendered", "modalDialogSortingChanged", "modalDialogButtonUnsortClick", "modalDialogSortClick", "modalDialogButtonApplyClick", "modalDialogButtonResetClick"]
                },] }
    ];
    /** @nocollapse */
    IgGridSortingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridSortingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridFilteringFeature = /** @class */ (function (_super) {
    __extends(IgGridFilteringFeature, _super);
    function IgGridFilteringFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the filtering widget - remove fitler row, unbinds events, returns the grid to its previous state.
     */
    /* istanbul ignore next */
    /**
     * Destroys the filtering widget - remove fitler row, unbinds events, returns the grid to its previous state.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridFilteringFeature.prototype.destroy = /**
     * Destroys the filtering widget - remove fitler row, unbinds events, returns the grid to its previous state.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the count of data records that match filtering conditions
     */
    /* istanbul ignore next */
    /**
     * Returns the count of data records that match filtering conditions
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridFilteringFeature.prototype.getFilteringMatchesCount = /**
     * Returns the count of data records that match filtering conditions
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Toggle filter row when mode is simple or [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is true. Otherwise show/hide advanced dialog.
     *
     * @param event     Column key
     */
    /* istanbul ignore next */
    /**
     * Toggle filter row when mode is simple or [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is true. Otherwise show/hide advanced dialog.
     *
     * @param {?} event     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridFilteringFeature.prototype.toggleFilterRowByFeatureChooser = /**
     * Toggle filter row when mode is simple or [advancedModeEditorsVisible](ui.iggridfiltering#options:advancedModeEditorsVisible) is true. Otherwise show/hide advanced dialog.
     *
     * @param {?} event     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (event) { return; };
    /**
     * Applies filtering programmatically and updates the UI by default.
     *
     * @param expressions     An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
     * @param updateUI     specifies whether the filter row should be also updated once the grid is filtered
     * @param addedFromAdvanced
     */
    /* istanbul ignore next */
    /**
     * Applies filtering programmatically and updates the UI by default.
     *
     * @param {?} expressions     An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
     * @param {?=} updateUI     specifies whether the filter row should be also updated once the grid is filtered
     * @param {?=} addedFromAdvanced
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridFilteringFeature.prototype.filter = /**
     * Applies filtering programmatically and updates the UI by default.
     *
     * @param {?} expressions     An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
     * @param {?=} updateUI     specifies whether the filter row should be also updated once the grid is filtered
     * @param {?=} addedFromAdvanced
     * @return {?}
     */
    /* istanbul ignore next */
    function (expressions, updateUI, addedFromAdvanced) { return; };
    /**
     * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
     *
     * @param filterCondition    filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
     */
    /* istanbul ignore next */
    /**
     * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
     *
     * @param {?} filterCondition    filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridFilteringFeature.prototype.requiresFilteringExpression = /**
     * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
     *
     * @param {?} filterCondition    filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
     * @return {?}
     */
    /* istanbul ignore next */
    function (filterCondition) { return; };
    IgGridFilteringFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'filtering',
                    inputs: ["disabled", "create", "caseSensitive", "filterSummaryAlwaysVisible", "renderFC", "filterSummaryTemplate", "filterDropDownAnimations", "filterDropDownAnimationDuration", "filterDropDownWidth", "filterDropDownHeight", "filterExprUrlKey", "filterDropDownItemIcons", "columnSettings", "type", "filterDelay", "mode", "advancedModeEditorsVisible", "advancedModeHeaderButtonLocation", "filterDialogWidth", "filterDialogHeight", "filterDialogFilterDropDownDefaultWidth", "filterDialogExprInputDefaultWidth", "filterDialogColumnDropDownDefaultWidth", "renderFilterButton", "filterButtonLocation", "nullTexts", "labels", "tooltipTemplate", "filterDialogAddConditionTemplate", "filterDialogAddConditionDropDownTemplate", "filterDialogFilterTemplate", "filterDialogFilterConditionTemplate", "filterDialogAddButtonWidth", "filterDialogOkCancelButtonWidth", "filterDialogMaxFilterCount", "filterDialogContainment", "showEmptyConditions", "showNullConditions", "featureChooserText", "featureChooserTextHide", "featureChooserTextAdvancedFilter", "dialogWidget", "persist", "inherit"],
                    outputs: ["dataFiltering", "dataFiltered", "dropDownOpening", "dropDownOpened", "dropDownClosing", "dropDownClosed", "filterDialogOpening", "filterDialogOpened", "filterDialogMoving", "filterDialogFilterAdding", "filterDialogFilterAdded", "filterDialogClosing", "filterDialogClosed", "filterDialogContentsRendering", "filterDialogContentsRendered", "filterDialogFiltering"]
                },] }
    ];
    /** @nocollapse */
    IgGridFilteringFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridFilteringFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridPagingFeature = /** @class */ (function (_super) {
    __extends(IgGridPagingFeature, _super);
    function IgGridPagingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
     *
     * @param index     The page index to go to.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
     *
     * @param {?=} index     The page index to go to.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridPagingFeature.prototype.pageIndex = /**
     * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
     *
     * @param {?=} index     The page index to go to.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
     *
     * @param size     The new page size.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
     *
     * @param {?=} size     The new page size.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridPagingFeature.prototype.pageSize = /**
     * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
     *
     * @param {?=} size     The new page size.
     * @return {?}
     */
    /* istanbul ignore next */
    function (size) { return; };
    /**
     * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging.
     */
    /* istanbul ignore next */
    /**
     * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridPagingFeature.prototype.destroy = /**
     * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridPagingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'paging',
                    inputs: ["disabled", "create", "pageSize", "recordCountKey", "pageSizeUrlKey", "pageIndexUrlKey", "currentPageIndex", "type", "showPageSizeDropDown", "pageSizeDropDownLabel", "pageSizeDropDownTrailingLabel", "pageSizeDropDownLocation", "showPagerRecordsLabel", "pagerRecordsLabelTemplate", "nextPageLabelText", "prevPageLabelText", "firstPageLabelText", "lastPageLabelText", "showFirstLastPages", "showPrevNextPages", "currentPageDropDownLeadingLabel", "currentPageDropDownTrailingLabel", "currentPageDropDownTooltip", "pageSizeDropDownTooltip", "pagerRecordsLabelTooltip", "prevPageTooltip", "nextPageTooltip", "firstPageTooltip", "lastPageTooltip", "pageTooltipFormat", "pageSizeList", "pageCountLimit", "visiblePageCount", "defaultDropDownWidth", "delayOnPageChanged", "persist", "inherit"],
                    outputs: ["pageIndexChanging", "pageIndexChanged", "pageSizeChanging", "pageSizeChanged", "pagerRendering", "pagerRendered"]
                },] }
    ];
    /** @nocollapse */
    IgGridPagingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridPagingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridUpdatingFeature = /** @class */ (function (_super) {
    __extends(IgGridUpdatingFeature, _super);
    function IgGridUpdatingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
     * 			If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
     *
     * @param rowId    The primary key of the row the cell is a child of.
     * @param colKey    The column key of the cell.
     * @param value    The new value for the cell.
     */
    /* istanbul ignore next */
    /**
     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
     * 			If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
     *
     * @param {?} rowId    The primary key of the row the cell is a child of.
     * @param {?} colKey    The column key of the cell.
     * @param {?} value    The new value for the cell.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.setCellValue = /**
     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
     * 			If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
     *
     * @param {?} rowId    The primary key of the row the cell is a child of.
     * @param {?} colKey    The column key of the cell.
     * @param {?} value    The new value for the cell.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, colKey, value) { return; };
    /**
     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
     * 			If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
     *
     * @param rowId    The primary key of the row to update.
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    /* istanbul ignore next */
    /**
     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
     * 			If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
     *
     * @param {?} rowId    The primary key of the row to update.
     * @param {?} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.updateRow = /**
     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
     * 			If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
     *
     * @param {?} rowId    The primary key of the row to update.
     * @param {?} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, values) { return; };
    /**
     * Adds a new row to the grid. It also creates a transaction and updates the UI.
     *
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    /* istanbul ignore next */
    /**
     * Adds a new row to the grid. It also creates a transaction and updates the UI.
     *
     * @param {?} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.addRow = /**
     * Adds a new row to the grid. It also creates a transaction and updates the UI.
     *
     * @param {?} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     * @return {?}
     */
    /* istanbul ignore next */
    function (values) { return; };
    /**
     * Deletes a row from the grid. It also creates a transaction and updates the UI.
     *
     * @param rowId    The primary key of the row to delete.
     */
    /* istanbul ignore next */
    /**
     * Deletes a row from the grid. It also creates a transaction and updates the UI.
     *
     * @param {?} rowId    The primary key of the row to delete.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.deleteRow = /**
     * Deletes a row from the grid. It also creates a transaction and updates the UI.
     *
     * @param {?} rowId    The primary key of the row to delete.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId) { return; };
    /**
     * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
     *
     * @param rowId    The row id.
     * @param column    The column key or index.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    /* istanbul ignore next */
    /**
     * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
     *
     * @param {?} rowId    The row id.
     * @param {?} column    The column key or index.
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.startEdit = /**
     * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
     *
     * @param {?} rowId    The row id.
     * @param {?} column    The column key or index.
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, column, raiseEvents) { return; };
    /**
     * Starts editing for adding a new row.
     *
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    /* istanbul ignore next */
    /**
     * Starts editing for adding a new row.
     *
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.startAddRowEdit = /**
     * Starts editing for adding a new row.
     *
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    function (raiseEvents) { return; };
    /**
     * Ends the currently active edit mode.
     *
     * @param update    Specifies if the edit process should accept the current changes. Default is 'false'.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    /* istanbul ignore next */
    /**
     * Ends the currently active edit mode.
     *
     * @param {?=} update    Specifies if the edit process should accept the current changes. Default is 'false'.
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.endEdit = /**
     * Ends the currently active edit mode.
     *
     * @param {?=} update    Specifies if the edit process should accept the current changes. Default is 'false'.
     * @param {?=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
     * @return {?}
     */
    /* istanbul ignore next */
    function (update, raiseEvents) { return; };
    /**
     * Finds and returns the key of the first column the editor for which has invalid value.
     */
    /* istanbul ignore next */
    /**
     * Finds and returns the key of the first column the editor for which has invalid value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.findInvalid = /**
     * Finds and returns the key of the first column the editor for which has invalid value.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Checks if the grid is in edit mode.
     */
    /* istanbul ignore next */
    /**
     * Checks if the grid is in edit mode.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.isEditing = /**
     * Checks if the grid is in edit mode.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
     *
     * @param key    The key of the column.
     */
    /* istanbul ignore next */
    /**
     * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
     *
     * @param {?} key    The key of the column.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.editorForKey = /**
     * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
     *
     * @param {?} key    The key of the column.
     * @return {?}
     */
    /* istanbul ignore next */
    function (key) { return; };
    /**
     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
     *
     * @param cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
     * @param create    Requests to create the editor if it has not been created yet.
     */
    /* istanbul ignore next */
    /**
     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
     *
     * @param {?} cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
     * @param {?=} create    Requests to create the editor if it has not been created yet.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.editorForCell = /**
     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
     *
     * @param {?} cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
     * @param {?=} create    Requests to create the editor if it has not been created yet.
     * @return {?}
     */
    /* istanbul ignore next */
    function (cell, create) { return; };
    /**
     * Destroys igGridUpdating.
     */
    /* istanbul ignore next */
    /**
     * Destroys igGridUpdating.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.destroy = /**
     * Destroys igGridUpdating.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows the delete button for specific row.
     *
     * @param row    A jQuery object of the targeted row.
     */
    /* istanbul ignore next */
    /**
     * Shows the delete button for specific row.
     *
     * @param {?} row    A jQuery object of the targeted row.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.showDeleteButtonFor = /**
     * Shows the delete button for specific row.
     *
     * @param {?} row    A jQuery object of the targeted row.
     * @return {?}
     */
    /* istanbul ignore next */
    function (row) { return; };
    /**
     * Hides the delete button.
     */
    /* istanbul ignore next */
    /**
     * Hides the delete button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridUpdatingFeature.prototype.hideDeleteButton = /**
     * Hides the delete button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridUpdatingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'updating',
                    inputs: ["disabled", "create", "columnSettings", "editMode", "enableDeleteRow", "enableAddRow", "validation", "doneLabel", "doneTooltip", "cancelLabel", "cancelTooltip", "addRowLabel", "addRowTooltip", "deleteRowLabel", "deleteRowTooltip", "showDoneCancelButtons", "enableDataDirtyException", "startEditTriggers", "horizontalMoveOnEnter", "excelNavigationMode", "saveChangesSuccessHandler", "saveChangesErrorHandler", "swipeDistance", "wrapAround", "rowEditDialogOptions", "dialogWidget", "inherit"],
                    outputs: ["editRowStarting", "editRowStarted", "editRowEnding", "editRowEnded", "editCellStarting", "editCellStarted", "editCellEnding", "editCellEnded", "rowAdding", "rowAdded", "rowDeleting", "rowDeleted", "dataDirty", "generatePrimaryKeyValue", "rowEditDialogBeforeOpen", "rowEditDialogAfterOpen", "rowEditDialogBeforeClose", "rowEditDialogAfterClose", "rowEditDialogContentsRendered"]
                },] }
    ];
    /** @nocollapse */
    IgGridUpdatingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridUpdatingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridGroupByFeature = /** @class */ (function (_super) {
    __extends(IgGridGroupByFeature, _super);
    function IgGridGroupByFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Open groupby modal dialog
     */
    /* istanbul ignore next */
    /**
     * Open groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.openGroupByDialog = /**
     * Open groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Close groupby modal dialog
     */
    /* istanbul ignore next */
    /**
     * Close groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.closeGroupByDialog = /**
     * Close groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Render groupby modal dialog and its content
     */
    /* istanbul ignore next */
    /**
     * Render groupby modal dialog and its content
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.renderGroupByModalDialog = /**
     * Render groupby modal dialog and its content
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Open layouts dropdown
     */
    /* istanbul ignore next */
    /**
     * Open layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.openDropDown = /**
     * Open layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Close layouts dropdown
     */
    /* istanbul ignore next */
    /**
     * Close layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.closeDropDown = /**
     * Close layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Check whether column with specified key and layout is grouped
     *
     * @param key    key of the column
     * @param layout    layout name
     */
    /* istanbul ignore next */
    /**
     * Check whether column with specified key and layout is grouped
     *
     * @param {?} key    key of the column
     * @param {?} layout    layout name
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.checkColumnIsGrouped = /**
     * Check whether column with specified key and layout is grouped
     *
     * @param {?} key    key of the column
     * @param {?} layout    layout name
     * @return {?}
     */
    /* istanbul ignore next */
    function (key, layout) { return; };
    /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param data    data (sorted by colKey) that is used to get the records from.
     * @param colKey    key of the column for which grouping will be applied.
     * @param idval    value of the column by which grouping will be applied.
     */
    /* istanbul ignore next */
    /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param {?} data    data (sorted by colKey) that is used to get the records from.
     * @param {?} colKey    key of the column for which grouping will be applied.
     * @param {?=} idval    value of the column by which grouping will be applied.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.getGroupedData = /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param {?} data    data (sorted by colKey) that is used to get the records from.
     * @param {?} colKey    key of the column for which grouping will be applied.
     * @param {?=} idval    value of the column by which grouping will be applied.
     * @return {?}
     */
    /* istanbul ignore next */
    function (data, colKey, idval) { return; };
    /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     */
    /* istanbul ignore next */
    /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.groupByColumns = /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Groups by a column
     *
     * @param key    Column Key - group by the column with the specified key
     * @param layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param sortingDirection    if not set it is taken from option defaultSortingDirection
     */
    /* istanbul ignore next */
    /**
     * Groups by a column
     *
     * @param {?} key    Column Key - group by the column with the specified key
     * @param {?=} layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param {?=} sortingDirection    if not set it is taken from option defaultSortingDirection
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.groupByColumn = /**
     * Groups by a column
     *
     * @param {?} key    Column Key - group by the column with the specified key
     * @param {?=} layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param {?=} sortingDirection    if not set it is taken from option defaultSortingDirection
     * @return {?}
     */
    /* istanbul ignore next */
    function (key, layout, sortingDirection) { return; };
    /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param key    Column Key - ungroup by the column with the specified key
     * @param layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     */
    /* istanbul ignore next */
    /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param {?} key    Column Key - ungroup by the column with the specified key
     * @param {?=} layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.ungroupByColumn = /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param {?} key    Column Key - ungroup by the column with the specified key
     * @param {?=} layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     * @return {?}
     */
    /* istanbul ignore next */
    function (key, layout) { return; };
    /**
     * Expand group row with specified id
     *
     * @param rowId    data-id attribute of the group row in the DOM
     */
    /* istanbul ignore next */
    /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.expand = /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId) { return; };
    /**
     * Expand group row with specified id
     *
     * @param rowId    data-id attribute of the group row in the DOM
     */
    /* istanbul ignore next */
    /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.collapse = /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId) { return; };
    /**
     * Clears the group by columns list and updates the view.
     */
    /* istanbul ignore next */
    /**
     * Clears the group by columns list and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.ungroupAll = /**
     * Clears the group by columns list and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the group by feature object.
     */
    /* istanbul ignore next */
    /**
     * Destroys the group by feature object.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.destroy = /**
     * Destroys the group by feature object.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridGroupByFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'group-by',
                    inputs: ["disabled", "create", "groupByAreaVisibility", "initialExpand", "emptyGroupByAreaContent", "emptyGroupByAreaContentSelectColumns", "expansionIndicatorVisibility", "groupByLabelWidth", "labelDragHelperOpacity", "indentation", "defaultSortingDirection", "groupedColumns", "resultResponseKey", "groupedRowTextTemplate", "type", "groupByUrlKey", "groupByUrlKeyAscValue", "groupByUrlKeyDescValue", "summarySettings", "columnSettings", "expandTooltip", "collapseTooltip", "removeButtonTooltip", "modalDialogGroupByOnClick", "modalDialogGroupByButtonText", "modalDialogCaptionButtonDesc", "modalDialogCaptionButtonAsc", "modalDialogCaptionButtonUngroup", "modalDialogCaptionText", "modalDialogDropDownLabel", "modalDialogRootLevelHierarchicalGrid", "modalDialogDropDownButtonCaption", "modalDialogClearAllButtonLabel", "emptyGroupByAreaContentSelectColumnsCaption", "modalDialogDropDownWidth", "modalDialogDropDownAreaWidth", "modalDialogAnimationDuration", "modalDialogWidth", "modalDialogHeight", "modalDialogButtonApplyText", "modalDialogButtonCancelText", "useGridColumnFormatter", "persist", "groupByDialogContainment", "dialogWidget", "inherit"],
                    outputs: ["groupedColumnsChanging", "groupedColumnsChanged", "modalDialogMoving", "modalDialogClosing", "modalDialogClosed", "modalDialogOpening", "modalDialogOpened", "modalDialogContentsRendering", "modalDialogContentsRendered", "modalDialogButtonApplyClick", "modalDialogButtonResetClick", "modalDialogGroupingColumn", "modalDialogGroupColumn", "modalDialogUngroupingColumn", "modalDialogUngroupColumn", "modalDialogSortGroupedColumn"]
                },] }
    ];
    /** @nocollapse */
    IgGridGroupByFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridGroupByFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridColumnMovingFeature = /** @class */ (function (_super) {
    __extends(IgGridColumnMovingFeature, _super);
    function IgGridColumnMovingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Restoring overwritten functions
     */
    /* istanbul ignore next */
    /**
     * Restoring overwritten functions
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnMovingFeature.prototype.destroy = /**
     * Restoring overwritten functions
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param after    Specifies whether the column moved should be moved after or before the target column.
     * @param inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param callback    Specifies a custom function to be called when the column is moved.
     */
    /* istanbul ignore next */
    /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param {?} target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param {?=} after    Specifies whether the column moved should be moved after or before the target column.
     * @param {?=} inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param {?=} callback    Specifies a custom function to be called when the column is moved.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnMovingFeature.prototype.moveColumn = /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param {?} target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param {?=} after    Specifies whether the column moved should be moved after or before the target column.
     * @param {?=} inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param {?=} callback    Specifies a custom function to be called when the column is moved.
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, target, after, inDom, callback) { return; };
    IgGridColumnMovingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'column-moving',
                    inputs: ["disabled", "create", "columnSettings", "mode", "moveType", "addMovingDropdown", "movingDialogWidth", "movingDialogHeight", "movingDialogAnimationDuration", "movingAcceptanceTolerance", "movingScrollTolerance", "scrollSpeedMultiplier", "scrollDelta", "hideHeaderContentsDuringDrag", "dragHelperOpacity", "movingDialogCaptionButtonDesc", "movingDialogCaptionButtonAsc", "movingDialogCaptionText", "movingDialogDisplayText", "movingDialogDropTooltipText", "movingDialogDropTooltipMarkup", "dropDownMoveLeftText", "dropDownMoveRightText", "dropDownMoveFirstText", "dropDownMoveLastText", "movingToolTipMove", "featureChooserSubmenuText", "columnMovingDialogContainment", "dialogWidget", "inherit"],
                    outputs: ["columnDragStart", "columnDragEnd", "columnDragCanceled", "columnMoving", "columnMoved", "movingDialogOpening", "movingDialogOpened", "movingDialogDragged", "movingDialogClosing", "movingDialogClosed", "movingDialogContentsRendering", "movingDialogContentsRendered", "movingDialogMoveUpButtonPressed", "movingDialogMoveDownButtonPressed", "movingDialogDragColumnMoving", "movingDialogDragColumnMoved"]
                },] }
    ];
    /** @nocollapse */
    IgGridColumnMovingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridColumnMovingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridHidingFeature = /** @class */ (function (_super) {
    __extends(IgGridHidingFeature, _super);
    function IgGridHidingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the hiding widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the hiding widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.destroy = /**
     * Destroys the hiding widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows the Column Chooser dialog. If it is visible the method does nothing.
     */
    /* istanbul ignore next */
    /**
     * Shows the Column Chooser dialog. If it is visible the method does nothing.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.showColumnChooser = /**
     * Shows the Column Chooser dialog. If it is visible the method does nothing.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Hides the Column Chooser dialog. If it is not visible the method does nothing.
     */
    /* istanbul ignore next */
    /**
     * Hides the Column Chooser dialog. If it is not visible the method does nothing.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.hideColumnChooser = /**
     * Hides the Column Chooser dialog. If it is not visible the method does nothing.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param callback    Specifies a custom function to be called when the column(s) is shown(optional)
     */
    /* istanbul ignore next */
    /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param {?=} callback    Specifies a custom function to be called when the column(s) is shown(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.showColumn = /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param {?=} callback    Specifies a custom function to be called when the column(s) is shown(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, isMultiColumnHeader, callback) { return; };
    /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param callback    Specifies a custom function to be called when the column is hidden(optional)
     */
    /* istanbul ignore next */
    /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param {?=} callback    Specifies a custom function to be called when the column is hidden(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.hideColumn = /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param {?=} callback    Specifies a custom function to be called when the column is hidden(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, isMultiColumnHeader, callback) { return; };
    /**
     * Hides visible columns specified by the array. If the column is hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param callback    Specifies a custom function to be called when all columns are hidden(optional)
     */
    /* istanbul ignore next */
    /**
     * Hides visible columns specified by the array. If the column is hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} callback    Specifies a custom function to be called when all columns are hidden(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.hideMultiColumns = /**
     * Hides visible columns specified by the array. If the column is hidden the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} callback    Specifies a custom function to be called when all columns are hidden(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (columns, callback) { return; };
    /**
     * Show visible columns specified by the array. If the column is shown the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param callback    Specifies a custom function to be called when all columns are shown(optional)
     */
    /* istanbul ignore next */
    /**
     * Show visible columns specified by the array. If the column is shown the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} callback    Specifies a custom function to be called when all columns are shown(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.showMultiColumns = /**
     * Show visible columns specified by the array. If the column is shown the method does nothing.
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param {?=} callback    Specifies a custom function to be called when all columns are shown(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (columns, callback) { return; };
    /**
     * Gets whether the reset button in the column chooser dialog is to be rendered or not.
     */
    /* istanbul ignore next */
    /**
     * Gets whether the reset button in the column chooser dialog is to be rendered or not.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.isToRenderButtonReset = /**
     * Gets whether the reset button in the column chooser dialog is to be rendered or not.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Reset hidden/shown column to initial state of dialog(when it is opened)
     */
    /* istanbul ignore next */
    /**
     * Reset hidden/shown column to initial state of dialog(when it is opened)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.resetHidingColumnChooser = /**
     * Reset hidden/shown column to initial state of dialog(when it is opened)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Renders the Reset button in the Column Chooser dialog.
     */
    /* istanbul ignore next */
    /**
     * Renders the Reset button in the Column Chooser dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.renderColumnChooserResetButton = /**
     * Renders the Reset button in the Column Chooser dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Remove Reset button in column chooser modal dialog
     */
    /* istanbul ignore next */
    /**
     * Remove Reset button in column chooser modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridHidingFeature.prototype.removeColumnChooserResetButton = /**
     * Remove Reset button in column chooser modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridHidingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'hiding',
                    inputs: ["disabled", "create", "columnSettings", "hiddenColumnIndicatorHeaderWidth", "columnChooserContainment", "columnChooserWidth", "columnChooserHeight", "dropDownAnimationDuration", "columnChooserCaptionText", "columnChooserDisplayText", "hiddenColumnIndicatorTooltipText", "columnHideText", "columnChooserShowText", "columnChooserHideText", "columnChooserHideOnClick", "columnChooserResetButtonLabel", "columnChooserAnimationDuration", "columnChooserButtonApplyText", "columnChooserButtonCancelText", "dialogWidget", "inherit"],
                    outputs: ["columnHiding", "columnHidingRefused", "columnShowingRefused", "multiColumnHiding", "columnHidden", "columnShowing", "columnShown", "columnChooserOpening", "columnChooserOpened", "columnChooserMoving", "columnChooserClosing", "columnChooserClosed", "columnChooserContentsRendering", "columnChooserContentsRendered", "columnChooserButtonApplyClick", "columnChooserButtonResetClick"]
                },] }
    ];
    /** @nocollapse */
    IgGridHidingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridHidingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridCellMergingFeature = /** @class */ (function (_super) {
    __extends(IgGridCellMergingFeature, _super);
    function IgGridCellMergingFeature(el) {
        return _super.call(this, el) || this;
    }
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgGridCellMergingFeature.prototype.destroy = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    IgGridCellMergingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'cell-merging',
                    inputs: ["disabled", "create", "initialState", "inherit"],
                    outputs: ["cellsMerging", "cellsMerged"]
                },] }
    ];
    /** @nocollapse */
    IgGridCellMergingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridCellMergingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridResponsiveFeature = /** @class */ (function (_super) {
    __extends(IgGridResponsiveFeature, _super);
    function IgGridResponsiveFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the responsive widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the responsive widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridResponsiveFeature.prototype.destroy = /**
     * Destroys the responsive widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently active responsive mode.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently active responsive mode.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridResponsiveFeature.prototype.getCurrentResponsiveMode = /**
     * Returns the currently active responsive mode.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridResponsiveFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'responsive',
                    inputs: ["disabled", "create", "columnSettings", "reactOnContainerWidthChanges", "forceResponsiveGridWidth", "responsiveSensitivity", "responsiveModes", "enableVerticalRendering", "windowWidthToRenderVertically", "propertiesColumnWidth", "valuesColumnWidth", "allowedColumnWidthPerType", "singleColumnTemplate", "inherit"],
                    outputs: ["responsiveColumnHiding", "responsiveColumnHidden", "responsiveColumnShowing", "responsiveColumnShown", "responsiveModeChanged"]
                },] }
    ];
    /** @nocollapse */
    IgGridResponsiveFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridResponsiveFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridResizingFeature = /** @class */ (function (_super) {
    __extends(IgGridResizingFeature, _super);
    function IgGridResizingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the resizing widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the resizing widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridResizingFeature.prototype.destroy = /**
     * Destroys the resizing widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
     */
    /* istanbul ignore next */
    /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param {?=} width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridResizingFeature.prototype.resize = /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param {?=} width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, width) { return; };
    IgGridResizingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'resizing',
                    inputs: ["disabled", "create", "allowDoubleClickToResize", "deferredResizing", "columnSettings", "handleThreshold", "inherit"],
                    outputs: ["columnResizing", "columnResizingRefused", "columnResized"]
                },] }
    ];
    /** @nocollapse */
    IgGridResizingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridResizingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridSelectionFeature = /** @class */ (function (_super) {
    __extends(IgGridSelectionFeature, _super);
    function IgGridSelectionFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the selection widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the selection widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.destroy = /**
     * Destroys the selection widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     */
    /* istanbul ignore next */
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.clearSelection = /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Selects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.
     */
    /* istanbul ignore next */
    /**
     * Selects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectCell = /**
     * Selects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    function (row, col, isFixed) { return; };
    /**
     * Selects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    /* istanbul ignore next */
    /**
     * Selects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectCellById = /**
     * Selects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (id, colKey) { return; };
    /**
     * Deselects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.
     */
    /* istanbul ignore next */
    /**
     * Deselects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectCell = /**
     * Deselects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    function (row, col, isFixed) { return; };
    /**
     * Deselects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    /* istanbul ignore next */
    /**
     * Deselects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectCellById = /**
     * Deselects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (id, colKey) { return; };
    /**
     * Selects a row by index
     *
     * @param index     Row index
     */
    /* istanbul ignore next */
    /**
     * Selects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectRow = /**
     * Selects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Selects a row by row id
     *
     * @param id     Row Id
     */
    /* istanbul ignore next */
    /**
     * Selects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectRowById = /**
     * Selects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    function (id) { return; };
    /**
     * Deselects a row by index
     *
     * @param index     Row index
     */
    /* istanbul ignore next */
    /**
     * Deselects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectRow = /**
     * Deselects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Deselects a row by row id
     *
     * @param id     Row Id
     */
    /* istanbul ignore next */
    /**
     * Deselects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectRowById = /**
     * Deselects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    function (id) { return; };
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedCells = /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedRows = /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedCell = /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedRow = /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.activeCell = /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.activeRow = /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridSelectionFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'selection',
                    inputs: ["disabled", "create", "multipleSelection", "mouseDragSelect", "mode", "activation", "wrapAround", "skipChildren", "multipleCellSelectOnClick", "touchDragSelect", "persist", "allowMultipleRangeSelection"],
                    outputs: ["rowSelectionChanging", "rowSelectionChanged", "cellSelectionChanging", "cellSelectionChanged", "activeCellChanging", "activeCellChanged", "activeRowChanging", "activeRowChanged"]
                },] }
    ];
    /** @nocollapse */
    IgGridSelectionFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridSelectionFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridRowSelectorsFeature = /** @class */ (function (_super) {
    __extends(IgGridRowSelectorsFeature, _super);
    function IgGridRowSelectorsFeature(el) {
        return _super.call(this, el) || this;
    }
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgGridRowSelectorsFeature.prototype.destroy = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    IgGridRowSelectorsFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'row-selectors',
                    inputs: ["disabled", "create", "enableRowNumbering", "enableCheckBoxes", "rowNumberingSeed", "rowSelectorColumnWidth", "requireSelection", "showCheckBoxesOnFocus", "inherit", "enableSelectAllForPaging", "selectAllForPagingTemplate", "deselectAllForPagingTemplate"],
                    outputs: ["rowSelectorClicked", "checkBoxStateChanging", "checkBoxStateChanged"]
                },] }
    ];
    /** @nocollapse */
    IgGridRowSelectorsFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridRowSelectorsFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridSummariesFeature = /** @class */ (function (_super) {
    __extends(IgGridSummariesFeature, _super);
    function IgGridSummariesFeature(el) {
        return _super.call(this, el) || this;
    }
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgGridSummariesFeature.prototype.destroy = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /**
     * Returns whether summaries rows are hidden
     */
    /* istanbul ignore next */
    /**
     * Returns whether summaries rows are hidden
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.isSummariesRowsHidden = /**
     * Returns whether summaries rows are hidden
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Calculate summaries
     */
    /* istanbul ignore next */
    /**
     * Calculate summaries
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.calculateSummaries = /**
     * Calculate summaries
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Remove all summaries dropdown buttons.
     */
    /* istanbul ignore next */
    /**
     * Remove all summaries dropdown buttons.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.clearAllFooterIcons = /**
     * Remove all summaries dropdown buttons.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Toggle drop down
     *
     * @param columnKey    toggle drop down for the column with the specified key
     * @param event    event object. Its data should contain current columnKey, isAnimating, buttonId
     */
    /* istanbul ignore next */
    /**
     * Toggle drop down
     *
     * @param {?} columnKey    toggle drop down for the column with the specified key
     * @param {?} event    event object. Its data should contain current columnKey, isAnimating, buttonId
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.toggleDropDown = /**
     * Toggle drop down
     *
     * @param {?} columnKey    toggle drop down for the column with the specified key
     * @param {?} event    event object. Its data should contain current columnKey, isAnimating, buttonId
     * @return {?}
     */
    /* istanbul ignore next */
    function (columnKey, event) { return; };
    /**
     * Show/Hide dialog
     *
     * @param $dialog     jQuery object representation of dropdown div element
     */
    /* istanbul ignore next */
    /**
     * Show/Hide dialog
     *
     * @param {?} $dialog     jQuery object representation of dropdown div element
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.showHideDialog = /**
     * Show/Hide dialog
     *
     * @param {?} $dialog     jQuery object representation of dropdown div element
     * @return {?}
     */
    /* istanbul ignore next */
    function ($dialog) { return; };
    /**
     * Toggle summaries rows
     *
     * @param isToShow    Specifies whether to show or not summaries
     * @param isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.
     */
    /* istanbul ignore next */
    /**
     * Toggle summaries rows
     *
     * @param {?} isToShow    Specifies whether to show or not summaries
     * @param {?} isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.toggleSummariesRows = /**
     * Toggle summaries rows
     *
     * @param {?} isToShow    Specifies whether to show or not summaries
     * @param {?} isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function (isToShow, isInternalCall) { return; };
    /**
     * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param $checkbox     Specifies the jQuery object of the checkbox.
     */
    /* istanbul ignore next */
    /**
     * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} $checkbox     Specifies the jQuery object of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.toggleCheckstate = /**
     * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} $checkbox     Specifies the jQuery object of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    function ($checkbox) { return; };
    /**
     * Select/Unselect specified checkbox
     *
     * @param $checkbox     Specifies the jQuery object for checkbox
     * @param isToSelect     Specify whether to select or not checkbox
     */
    /* istanbul ignore next */
    /**
     * Select/Unselect specified checkbox
     *
     * @param {?} $checkbox     Specifies the jQuery object for checkbox
     * @param {?} isToSelect     Specify whether to select or not checkbox
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.selectCheckBox = /**
     * Select/Unselect specified checkbox
     *
     * @param {?} $checkbox     Specifies the jQuery object for checkbox
     * @param {?} isToSelect     Specify whether to select or not checkbox
     * @return {?}
     */
    /* istanbul ignore next */
    function ($checkbox, isToSelect) { return; };
    /**
     * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)
     *
     * @param ck    ColumnKey
     * @param columnMethods    Array of column methods objects
     * @param data    Object which represents result
 represents dataType for the current column
    * @param dataType
    */
    /* istanbul ignore next */
    /**
     * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)
     *
     * @param {?} ck    ColumnKey
     * @param {?} columnMethods    Array of column methods objects
     * @param {?} data    Object which represents result
     * represents dataType for the current column
     * @param {?} dataType
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.calculateSummaryColumn = /**
     * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)
     *
     * @param {?} ck    ColumnKey
     * @param {?} columnMethods    Array of column methods objects
     * @param {?} data    Object which represents result
     * represents dataType for the current column
     * @param {?} dataType
     * @return {?}
     */
    /* istanbul ignore next */
    function (ck, columnMethods, data, dataType) { return; };
    /**
     * Return a JQUERY object which holds all summaries for all columns
     */
    /* istanbul ignore next */
    /**
     * Return a JQUERY object which holds all summaries for all columns
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.summaryCollection = /**
     * Return a JQUERY object which holds all summaries for all columns
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Return a JQUERY object which holds all summaries for column with the specified column key
     *
     * @param columnKey
     */
    /* istanbul ignore next */
    /**
     * Return a JQUERY object which holds all summaries for column with the specified column key
     *
     * @param {?} columnKey
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSummariesFeature.prototype.summariesFor = /**
     * Return a JQUERY object which holds all summaries for column with the specified column key
     *
     * @param {?} columnKey
     * @return {?}
     */
    /* istanbul ignore next */
    function (columnKey) { return; };
    IgGridSummariesFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'summaries',
                    inputs: ["disabled", "create", "type", "dialogButtonOKText", "dialogButtonCancelText", "calculateRenderMode", "featureChooserText", "featureChooserTextHide", "compactRenderingMode", "defaultDecimalDisplay", "showSummariesButton", "summariesResponseKey", "summaryExprUrlKey", "callee", "dropDownHeight", "dropDownWidth", "showDropDownButton", "summaryExecution", "dropDownDialogAnimationDuration", "emptyCellText", "summariesHeaderButtonTooltip", "resultTemplate", "isGridFormatter", "renderSummaryCellFunc", "columnSettings", "inherit"],
                    outputs: ["dropDownOpening", "dropDownOpened", "dropDownClosing", "dropDownClosed", "summariesCalculating", "summariesCalculated", "summariesMethodSelectionChanged", "summariesToggling", "summariesToggled", "dropDownOKClicked", "dropDownCancelClicked"]
                },] }
    ];
    /** @nocollapse */
    IgGridSummariesFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridSummariesFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridColumnFixingFeature = /** @class */ (function (_super) {
    __extends(IgGridColumnFixingFeature, _super);
    function IgGridColumnFixingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Unfixes a column by specified column identifier - column key or column index.
     *
     * @param colIdentifier    An identifier of the column to be unfixed - column index or column key.
     * @param target    Key of the column where the unfixed column should move to.
     * @param after    Specifies where the unfixed column should be rendered after or before the target column. This parameter is disregarded if there is no target column specified.
     */
    /* istanbul ignore next */
    /**
     * Unfixes a column by specified column identifier - column key or column index.
     *
     * @param {?} colIdentifier    An identifier of the column to be unfixed - column index or column key.
     * @param {?=} target    Key of the column where the unfixed column should move to.
     * @param {?=} after    Specifies where the unfixed column should be rendered after or before the target column. This parameter is disregarded if there is no target column specified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.unfixColumn = /**
     * Unfixes a column by specified column identifier - column key or column index.
     *
     * @param {?} colIdentifier    An identifier of the column to be unfixed - column index or column key.
     * @param {?=} target    Key of the column where the unfixed column should move to.
     * @param {?=} after    Specifies where the unfixed column should be rendered after or before the target column. This parameter is disregarded if there is no target column specified.
     * @return {?}
     */
    /* istanbul ignore next */
    function (colIdentifier, target, after) { return; };
    /**
     * Checks whether the heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.
     */
    /* istanbul ignore next */
    /**
     * Checks whether the heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.checkAndSyncHeights = /**
     * Checks whether the heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * If the 'check' argument is set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. Similar check is made for heights of table rows. If the clearRowsHeights argument is set to true, clears rows heights before syncing them.
     *
     * @param check    If set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. If this argument is set to false sync is performed regardless of the current heights.
     * @param clearRowsHeights    Clears row heigths for all visible rows.
     */
    /* istanbul ignore next */
    /**
     * If the 'check' argument is set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. Similar check is made for heights of table rows. If the clearRowsHeights argument is set to true, clears rows heights before syncing them.
     *
     * @param {?=} check    If set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. If this argument is set to false sync is performed regardless of the current heights.
     * @param {?=} clearRowsHeights    Clears row heigths for all visible rows.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.syncHeights = /**
     * If the 'check' argument is set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. Similar check is made for heights of table rows. If the clearRowsHeights argument is set to true, clears rows heights before syncing them.
     *
     * @param {?=} check    If set to true, checks whether the heights of fixed and unfixed tables are equal, if not sync them. If this argument is set to false sync is performed regardless of the current heights.
     * @param {?=} clearRowsHeights    Clears row heigths for all visible rows.
     * @return {?}
     */
    /* istanbul ignore next */
    function (check, clearRowsHeights) { return; };
    /**
     * Returns whether the column with the specified key is a column group header, when the [multi-column headers](http://www.igniteui.com/help/iggrid-multicolumnheaders-landingpage) feature is used.
     *
     * @param colKey    The key of the column to perform the check for.
     */
    /* istanbul ignore next */
    /**
     * Returns whether the column with the specified key is a column group header, when the [multi-column headers](http://www.igniteui.com/help/iggrid-multicolumnheaders-landingpage) feature is used.
     *
     * @param {?} colKey    The key of the column to perform the check for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.isGroupHeader = /**
     * Returns whether the column with the specified key is a column group header, when the [multi-column headers](http://www.igniteui.com/help/iggrid-multicolumnheaders-landingpage) feature is used.
     *
     * @param {?} colKey    The key of the column to perform the check for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (colKey) { return; };
    /**
     * Checks whether column fixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the unfixed area.
     *
     * @param columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
     */
    /* istanbul ignore next */
    /**
     * Checks whether column fixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the unfixed area.
     *
     * @param {?} columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.checkFixingAllowed = /**
     * Checks whether column fixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the unfixed area.
     *
     * @param {?} columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (columns) { return; };
    /**
     * Checks whether unfixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the fixed area.
     *
     * @param columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
     */
    /* istanbul ignore next */
    /**
     * Checks whether unfixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the fixed area.
     *
     * @param {?} columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.checkUnfixingAllowed = /**
     * Checks whether unfixing is allowed for the specified columns. It should not be allowed if there is only one visible column in the fixed area.
     *
     * @param {?} columns    Array of columns and/or column identifiers - could be column indexes, column keys, column object or mixed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (columns) { return; };
    /**
     * Fixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
     */
    /* istanbul ignore next */
    /**
     * Fixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.fixNonDataColumns = /**
     * Fixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * This function is deprecated - use function fixNonDataColumns.
     */
    /* istanbul ignore next */
    /**
     * This function is deprecated - use function fixNonDataColumns.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.fixDataSkippedColumns = /**
     * This function is deprecated - use function fixNonDataColumns.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Unfixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
     */
    /* istanbul ignore next */
    /**
     * Unfixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.unfixNonDataColumns = /**
     * Unfixes non-data columns (such as the row numbering column of row selectors) if any and if [fixingDirection](ui.iggridcolumnfixing#options:fixingDirection) is left. Does nothing if the non-data columns are already fixed.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * This function is deprecated - use function unfixNonDataColumns.
     */
    /* istanbul ignore next */
    /**
     * This function is deprecated - use function unfixNonDataColumns.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.unfixDataSkippedColumns = /**
     * This function is deprecated - use function unfixNonDataColumns.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Unfixes all fixed columns.
     */
    /* istanbul ignore next */
    /**
     * Unfixes all fixed columns.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.unfixAllColumns = /**
     * Unfixes all fixed columns.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Syncs rows heights between two collections of rows.
     *
     * @param $trs    An array of rows of the first(fixed/unfixed) container.
     * @param $anotherRows    An array of rows of the second(fixed/unfixed) container.
     */
    /* istanbul ignore next */
    /**
     * Syncs rows heights between two collections of rows.
     *
     * @param {?} $trs    An array of rows of the first(fixed/unfixed) container.
     * @param {?} $anotherRows    An array of rows of the second(fixed/unfixed) container.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.syncRowsHeights = /**
     * Syncs rows heights between two collections of rows.
     *
     * @param {?} $trs    An array of rows of the first(fixed/unfixed) container.
     * @param {?} $anotherRows    An array of rows of the second(fixed/unfixed) container.
     * @return {?}
     */
    /* istanbul ignore next */
    function ($trs, $anotherRows) { return; };
    /**
     * Calculates widths of the fixed columns.
     *
     * @param fCols    Array of grid columns. If not set then the total width of the fixed columns are returned.
     * @param excludeNonDataColumns    If set to true do not calculate the width of non-data fixed columns (like the row selector row numbering column).
     * @param includeHidden    If set to true calculates width of the hidden fixed columns (their initial width before hiding).
     */
    /* istanbul ignore next */
    /**
     * Calculates widths of the fixed columns.
     *
     * @param {?=} fCols    Array of grid columns. If not set then the total width of the fixed columns are returned.
     * @param {?=} excludeNonDataColumns    If set to true do not calculate the width of non-data fixed columns (like the row selector row numbering column).
     * @param {?=} includeHidden    If set to true calculates width of the hidden fixed columns (their initial width before hiding).
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.getWidthOfFixedColumns = /**
     * Calculates widths of the fixed columns.
     *
     * @param {?=} fCols    Array of grid columns. If not set then the total width of the fixed columns are returned.
     * @param {?=} excludeNonDataColumns    If set to true do not calculate the width of non-data fixed columns (like the row selector row numbering column).
     * @param {?=} includeHidden    If set to true calculates width of the hidden fixed columns (their initial width before hiding).
     * @return {?}
     */
    /* istanbul ignore next */
    function (fCols, excludeNonDataColumns, includeHidden) { return; };
    /**
     * Destroys the column fixing widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the column fixing widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridColumnFixingFeature.prototype.destroy = /**
     * Destroys the column fixing widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridColumnFixingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'column-fixing',
                    inputs: ["disabled", "create", "headerFixButtonText", "headerUnfixButtonText", "showFixButtons", "syncRowHeights", "scrollDelta", "fixingDirection", "columnSettings", "featureChooserTextFixedColumn", "featureChooserTextUnfixedColumn", "minimalVisibleAreaWidth", "fixNondataColumns", "populateDataRowsAttributes"],
                    outputs: ["columnFixing", "columnFixed", "columnUnfixing", "columnUnfixed", "columnFixingRefused", "columnUnfixingRefused"]
                },] }
    ];
    /** @nocollapse */
    IgGridColumnFixingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridColumnFixingFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridTooltipsFeature = /** @class */ (function (_super) {
    __extends(IgGridTooltipsFeature, _super);
    function IgGridTooltipsFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the tooltip widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the tooltip widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridTooltipsFeature.prototype.destroy = /**
     * Destroys the tooltip widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the ID of the parent div element bounding the ruler and the tooltip container
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of the parent div element bounding the ruler and the tooltip container
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridTooltipsFeature.prototype.id = /**
     * Returns the ID of the parent div element bounding the ruler and the tooltip container
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridTooltipsFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'tooltips',
                    inputs: ["disabled", "create", "visibility", "style", "showDelay", "hideDelay", "columnSettings", "fadeTimespan", "cursorLeftOffset", "cursorTopOffset", "inherit"],
                    outputs: ["tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden"]
                },] }
    ];
    /** @nocollapse */
    IgGridTooltipsFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridTooltipsFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridAppendRowsOnDemandFeature = /** @class */ (function (_super) {
    __extends(IgGridAppendRowsOnDemandFeature, _super);
    function IgGridAppendRowsOnDemandFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the append rows on demand widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the append rows on demand widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridAppendRowsOnDemandFeature.prototype.destroy = /**
     * Destroys the append rows on demand widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Loads the next chunk of data.
     */
    /* istanbul ignore next */
    /**
     * Loads the next chunk of data.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridAppendRowsOnDemandFeature.prototype.nextChunk = /**
     * Loads the next chunk of data.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgGridAppendRowsOnDemandFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'append-rows-on-demand',
                    inputs: ["type", "chunkSize", "recordCountKey", "chunkSizeUrlKey", "chunkIndexUrlKey", "defaultChunkIndex", "currentChunkIndex", "loadTrigger", "loadMoreDataButtonText"],
                    outputs: ["rowsRequesting", "rowsRequested"]
                },] }
    ];
    /** @nocollapse */
    IgGridAppendRowsOnDemandFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridAppendRowsOnDemandFeature;
}(Feature));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Features = /** @class */ (function () {
    function Features() {
        this.allFeatures = new Array();
    }
    /**
     * @param {?} name
     * @param {?} parent
     * @return {?}
     */
    Features.prototype.addFeature = /**
     * @param {?} name
     * @param {?} parent
     * @return {?}
     */
    function (name, parent) {
        /** @type {?} */
        var nodeName = name.replace(/([A-Z])/g, (/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return '-' + g[0].toLowerCase(); }));
        /** @type {?} */
        var el = document.createElement(nodeName);
        el = parent.appendChild(el);
        /** @type {?} */
        var child = new ElementRef(el);
        switch (nodeName) {
            case "filtering":
                this.filtering = new IgGridFilteringFeature(child);
                break;
            case "sorting":
                this.sorting = new IgGridSortingFeature(child);
                break;
            case "paging":
                this.paging = new IgGridPagingFeature(child);
                break;
            case "updating":
                this.updating = new IgGridUpdatingFeature(child);
                break;
            case "group-by":
                this.groupBy = new IgGridGroupByFeature(child);
                break;
            case "column-moving":
                this.columnMoving = new IgGridColumnMovingFeature(child);
                break;
            case "hiding":
                this.hiding = new IgGridHidingFeature(child);
                break;
            case "responsive":
                this.responsive = new IgGridResponsiveFeature(child);
                break;
            case "cell-merging":
                this.cellMerging = new IgGridCellMergingFeature(child);
                break;
            case "resizing":
                this.resizing = new IgGridResizingFeature(child);
                break;
            case "selection":
                this.selection = new IgGridSelectionFeature(child);
                break;
            case "row-selectors":
                this.rowSelectors = new IgGridRowSelectorsFeature(child);
                break;
            case "summaries":
                this.summaries = new IgGridSummariesFeature(child);
                break;
            case "column-fixing":
                this.columnFixing = new IgGridColumnFixingFeature(child);
                break;
            case "tooltips":
                this.tooltips = new IgGridTooltipsFeature(child);
                break;
            case "append-rows-on-demand":
                this.appendRowsOnDemand = new IgGridAppendRowsOnDemandFeature(child);
                break;
            case "multi-column-headers":
                this.multiColumnHeaders = new IgGridMultiColumnHeadersFeature(child);
                break;
        }
        this[name].ngOnInit();
        this.allFeatures.push(this[name]);
    };
    /**
     * @return {?}
     */
    Features.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.filtering ? this.allFeatures.push(this.filtering) : null;
        this.sorting ? this.allFeatures.push(this.sorting) : null;
        this.paging ? this.allFeatures.push(this.paging) : null;
        this.updating ? this.allFeatures.push(this.updating) : null;
        this.groupBy ? this.allFeatures.push(this.groupBy) : null;
        this.columnMoving ? this.allFeatures.push(this.columnMoving) : null;
        this.hiding ? this.allFeatures.push(this.hiding) : null;
        this.responsive ? this.allFeatures.push(this.responsive) : null;
        this.cellMerging ? this.allFeatures.push(this.cellMerging) : null;
        this.resizing ? this.allFeatures.push(this.resizing) : null;
        this.selection ? this.allFeatures.push(this.selection) : null;
        this.rowSelectors ? this.allFeatures.push(this.rowSelectors) : null;
        this.summaries ? this.allFeatures.push(this.summaries) : null;
        this.columnFixing ? this.allFeatures.push(this.columnFixing) : null;
        this.tooltips ? this.allFeatures.push(this.tooltips) : null;
        this.appendRowsOnDemand ? this.allFeatures.push(this.appendRowsOnDemand) : null;
        this.multiColumnHeaders ? this.allFeatures.push(this.multiColumnHeaders) : null;
    };
    Features.decorators = [
        { type: Directive, args: [{
                    selector: 'features'
                },] }
    ];
    Features.propDecorators = {
        sorting: [{ type: ContentChild, args: [IgGridSortingFeature, { static: true },] }],
        filtering: [{ type: ContentChild, args: [IgGridFilteringFeature, { static: true },] }],
        paging: [{ type: ContentChild, args: [IgGridPagingFeature, { static: true },] }],
        updating: [{ type: ContentChild, args: [IgGridUpdatingFeature, { static: true },] }],
        groupBy: [{ type: ContentChild, args: [IgGridGroupByFeature, { static: true },] }],
        columnMoving: [{ type: ContentChild, args: [IgGridColumnMovingFeature, { static: true },] }],
        hiding: [{ type: ContentChild, args: [IgGridHidingFeature, { static: true },] }],
        cellMerging: [{ type: ContentChild, args: [IgGridCellMergingFeature, { static: true },] }],
        responsive: [{ type: ContentChild, args: [IgGridResponsiveFeature, { static: true },] }],
        resizing: [{ type: ContentChild, args: [IgGridResizingFeature, { static: true },] }],
        selection: [{ type: ContentChild, args: [IgGridSelectionFeature, { static: true },] }],
        rowSelectors: [{ type: ContentChild, args: [IgGridRowSelectorsFeature, { static: true },] }],
        summaries: [{ type: ContentChild, args: [IgGridSummariesFeature, { static: true },] }],
        columnFixing: [{ type: ContentChild, args: [IgGridColumnFixingFeature, { static: true },] }],
        tooltips: [{ type: ContentChild, args: [IgGridTooltipsFeature, { static: true },] }],
        appendRowsOnDemand: [{ type: ContentChild, args: [IgGridAppendRowsOnDemandFeature, { static: true },] }],
        multiColumnHeaders: [{ type: ContentChild, args: [IgGridMultiColumnHeadersFeature, { static: true },] }]
    };
    return Features;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NODES = {
    "ig-text-editor": "div",
    "ig-numeric-editor": "input",
    "ig-percent-editor": "input",
    "ig-mask-editor": "input",
    "ig-date-picker": "input",
    "ig-time-picker": "input",
    "ig-date-editor": "input",
    "ig-currency-editor": "input",
    "ig-checkbox-editor": "input",
    "ig-html-editor": "div",
    "ig-combo": "input",
    "ig-grid": "table",
    "ig-tree-grid": "table",
    "ig-hierarchical-grid": "table",
    "ig-pivot-data-selector": "div",
    "ig-pivot-grid": "table",
    "ig-data-chart": "div",
    "ig-pie-chart": "div",
    "ig-doughnut-chart": "div",
    "ig-funnel-chart": "div",
    "ig-radial-gauge": "div",
    "ig-sparkline": "div",
    "ig-zoombar": "div",
    "ig-map": "div",
    "ig-bullet-graph": "div",
    "ig-linear-gauge": "div",
    "ig-q-r-code-barcode": "div",
    "ig-validator": "div",
    "ig-upload": "div",
    "ig-popover": "div",
    "ig-rating": "div",
    "ig-video-player": "div",
    "ig-radial-menu": "div",
    "ig-split-button": "div",
    "ig-notifier": "div",
    "ig-tree": "div",
    "ig-dialog": "div",
    "ig-splitter": "div",
    "ig-layout-manager": "div",
    "ig-tile-manager": "div",
    "ig-spreadsheet": "div",
    "ig-scheduler": "div"
};
/**
 * @template Model
 */
var IgControlBase = /** @class */ (function () {
    function IgControlBase(el, renderer, differs, kvalDiffers, cdr) {
        this.kvalDiffers = kvalDiffers;
        this.cdr = cdr;
        this.options = {};
        this._evtEmmiters = {};
        this._differs = differs;
        this._nativeElement = el.nativeElement;
        this._widgetName = this.convertToCamelCase(el.nativeElement.nodeName.toLowerCase()); //ig-grid -> igGrid
        this._el = el.nativeElement.appendChild(document.createElement(NODES[el.nativeElement.nodeName.toLowerCase()]));
        for (var propt in jQuery.ui[this._widgetName].prototype.events) {
            this[propt] = new EventEmitter();
            //cahcing the event emmitters for cases when the event name is the same as a method name.
            this._evtEmmiters[propt] = this[propt];
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    IgControlBase.prototype.createSetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.options[name] = value;
            if (this._config) {
                this._config[name] = value;
            }
            if (jQuery.ui[this._widgetName] &&
                jQuery.ui[this._widgetName].prototype.options &&
                jQuery.ui[this._widgetName].prototype.options.hasOwnProperty(name) &&
                jQuery(this._el).data(this._widgetName)) {
                jQuery(this._el)[this._widgetName]("option", name, value);
            }
        });
    };
    /**
     * @return {?}
     */
    IgControlBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var evtName;
        /** @type {?} */
        var that = this;
        this._events = new Map();
        for (var opt in jQuery.ui[this._widgetName].prototype.options) {
            //copy root level options into this.options
            if (this[opt] && typeof this[opt] !== "function") {
                this.options[opt] = this[opt];
            }
        }
        for (var opt in jQuery.ui[this._widgetName].prototype.options) {
            if (opt !== "dataSource") {
                Object.defineProperty(this, opt, {
                    set: this.createSetter(opt),
                    enumerable: true,
                    configurable: true
                });
            }
        }
        /** @type {?} */
        var propNames = jQuery.ui[this._widgetName].prototype;
        for (var name in propNames) {
            if (name.indexOf("_") !== 0 && typeof jQuery.ui[this._widgetName].prototype[name] === "function"
                && name !== "dataSource") {
                Object.defineProperty(that, name, {
                    get: that.createMethodGetter(name)
                });
            }
        }
        //events binding
        for (var propt in jQuery.ui[this._widgetName].prototype.events) {
            evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
            this._events[evtName] = propt;
            jQuery(this._el).on(evtName, (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                /** @type {?} */
                var emmiter = that._evtEmmiters[that._events[evt.type]];
                emmiter.emit({ event: evt, ui: ui });
            }));
        }
        jQuery(this._el).attr("id", this.widgetId);
        jQuery(this._el)[this._widgetName](this.options);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    IgControlBase.prototype.createMethodGetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var widget = jQuery(this._el).data(this._widgetName);
            return jQuery.proxy(widget[name], widget);
        });
    };
    /**
     * @return {?}
     */
    IgControlBase.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._optsDiffer) {
            /** @type {?} */
            var changes = this._optsDiffer.diff(this.options);
            if (changes) {
                changes.forEachChangedItem((/**
                 * @param {?} change
                 * @return {?}
                 */
                function (change) {
                    _this[change.key] = change.currentValue;
                }));
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgControlBase.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var opts = "options";
        if (opts in changes) {
            /** @type {?} */
            var value = changes[opts].currentValue;
            //options have been changed. Destroy and re-create widget.
            if (jQuery(this._el).data(this._widgetName)) {
                jQuery(this._el)[this._widgetName]("destroy");
                jQuery(this._el)[this._widgetName](this.options);
            }
            try {
                this._optsDiffer = this.kvalDiffers.find({}).create();
            }
            catch (e) {
                throw new Error("Only binding to object is supported for options property.");
            }
        }
    };
    /**
     * @return {?}
     */
    IgControlBase.prototype.markForCheck = /**
     * @return {?}
     */
    function () {
        this.cdr.markForCheck();
    };
    /**
     * @param {?} str
     * @return {?}
     */
    IgControlBase.prototype.convertToCamelCase = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        //convert hyphen to camelCase
        return str.replace(/-([a-z])/g, (/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            return group[1].toUpperCase();
        }));
    };
    /**
     * @return {?}
     */
    IgControlBase.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // igZoombar should be attached to body when being destroyed
        if (this._widgetName !== "igZoombar" || document.body.contains(this._el)) {
            jQuery(this._el)[this._widgetName]("destroy");
            jQuery(this._el).remove();
            jQuery(this._nativeElement).remove();
        }
    };
    IgControlBase.propDecorators = {
        options: [{ type: Input }]
    };
    return IgControlBase;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template Model
 */
var IgGridBase = /** @class */ (function (_super) {
    __extends(IgGridBase, _super);
    function IgGridBase(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgGridBase.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var grid = jQuery(this._el).data(this._widgetName);
            if (grid) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgGridBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
    };
    /**
     * @return {?}
     */
    IgGridBase.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this._columns && this._columns.length) {
            if (this.options) {
                this.options["columns"] = this._columns.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c._settings; }));
            }
        }
        if (this.featuresList) {
            if (this.options) {
                this.options["features"] = this.featuresList.allFeatures.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.initSettings; }));
            }
        }
        if (this.options && this.options["features"] && !this.featuresList) {
            this.featuresList = new Features();
            //populate featuresList
            for (var i = 0; i < this.options["features"].length; i++) {
                /** @type {?} */
                var featureName = this.options["features"][i].name.charAt(0).toLowerCase() + this.options["features"][i].name.slice(1);
                this.featuresList.addFeature(featureName, this._el);
            }
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgGridBase.prototype.createDataSource = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return jQuery.extend(true, [], value);
    };
    /**
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    IgGridBase.prototype.deleteRow = /**
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    function (id, index) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var tr = element.find("tr[data-id='" + id + "']");
        if (tr.length > 0) {
            tr.remove();
            jQuery(this._el).data(this._widgetName).dataSource.deleteRow(id, true);
            jQuery(this._el).data(this._widgetName).dataSource._removeTransactionsByRecordId(id);
        }
        this._changes.splice(index, 1);
    };
    /**
     * @param {?} rowData
     * @param {?} index
     * @return {?}
     */
    IgGridBase.prototype.addRow = /**
     * @param {?} rowData
     * @param {?} index
     * @return {?}
     */
    function (rowData, index) {
        /** @type {?} */
        var grid;
        /** @type {?} */
        var pkKey = this["primaryKey"] || this.options["primaryKey"];
        /** @type {?} */
        var existingDomRow = jQuery(this._el).find("tr[data-id='" + rowData[pkKey] + "']");
        /** @type {?} */
        var widgetName = this._widgetName;
        /** @type {?} */
        var existingRow;
        /** @type {?} */
        var t;
        if (this._widgetName === "igHierarchicalGrid") {
            widgetName = "igGrid";
        }
        grid = jQuery(this._el).data(widgetName);
        if (existingDomRow.length === 0) {
            grid.renderNewRow(rowData, rowData[pkKey]);
        }
        existingRow = grid.dataSource.findRecordByKey(rowData[pkKey]);
        if (!existingRow) {
            // add the row without affecting the original DS (scope source) 
            // TODO: trigger rowAdded event?
            grid.dataSource._addRow(rowData, index);
            //add transaction
            t = grid.dataSource._createNewRowTransaction(rowData[pkKey], rowData);
            grid.dataSource._addTransaction(t);
            grid.dataSource._removeTransactionByTransactionId(t.tid);
        }
        this._changes.push(this.kvalDiffers.find({}).create());
    };
    /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    IgGridBase.prototype.updateRow = /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    function (rec, currValue, key) {
        /** @type {?} */
        var pkKey = this["primaryKey"] || this.options["primaryKey"];
        /** @type {?} */
        var widgetName = this._widgetName;
        if (this._widgetName === "igHierarchicalGrid") {
            widgetName = "igGrid";
        }
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var grid = element.data(widgetName);
        /** @type {?} */
        var tr = element.find("tr[data-id='" + rec[pkKey] + "']");
        /** @type {?} */
        var column = grid.columnByKey(key);
        /** @type {?} */
        var newFormattedVal;
        /** @type {?} */
        var td;
        if (column) {
            if (column.template) {
                newFormattedVal = grid._renderTemplatedCell(rec, column);
            }
            else {
                newFormattedVal = grid._renderCell(currValue, column, rec);
            }
            td = grid._getCellsByColKey(element.find("tr[data-id='" + rec[pkKey] + "']"), key);
            //if current cell is still in edit mode, exit it.
            if (jQuery(td).find("input.ui-igedit-input").length > 0) {
                element.data("igGridUpdating").endEdit();
            }
            jQuery(td).html(newFormattedVal);
            if (grid.options.localSchemaTransform) {
                rec = grid.dataSource.schema().transform([rec])[0];
            }
            grid.dataSource.updateRow(rec[pkKey], rec);
            grid.dataSource._commitTransactionsByRowId(rec[pkKey]);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgGridBase.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var ds = "dataSource";
        if (ds in changes) {
            /** @type {?} */
            var value = changes[ds].currentValue;
            if (value) {
                try {
                    this._differ = this._differs.find(value).create();
                    this._changes = [];
                    for (var i = 0; i < this._dataSource.length; i++) {
                        this._changes.push(this.kvalDiffers.find({}).create());
                    }
                }
                catch (e) {
                    throw new Error("Only binding to arrays is supported.");
                }
            }
        }
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * @return {?}
     */
    IgGridBase.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._differ) {
            /** @type {?} */
            var changes = this._differ.diff(this._dataSource);
            //check if grid is initialized
            /** @type {?} */
            var grid = jQuery(this._el).data(this._widgetName);
            if (changes && grid) {
                this.dataSourceApplyChanges(changes);
            }
            if (changes && changes.isDirty && grid) {
                //data source has been changed post initialization.
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
            if (this._changes && grid) {
                /** @type {?} */
                var pkKey = this["primaryKey"] || this.options["primaryKey"];
                //check recs
                for (var i = 0; i < this._dataSource.length; i++) {
                    /** @type {?} */
                    var item = this._dataSource[i];
                    /** @type {?} */
                    var rowChanges = this._changes[i].diff(item);
                    if (rowChanges) {
                        rowChanges.forEachChangedItem((/**
                         * @param {?} change
                         * @return {?}
                         */
                        function (change) {
                            _this.updateRow(item, change.currentValue, change.key);
                        }));
                    }
                }
            }
        }
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgGridBase.prototype.dataSourceApplyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var pkKey = this["primaryKey"] || this.options["primaryKey"];
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return _this.addRow(r.item, r.currentIndex); }));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { _this.deleteRow(r.item[pkKey], r.previousIndex); }));
    };
    /**
     * @return {?}
     */
    IgGridBase.prototype.allRows = /**
     * @return {?}
     */
    function () { };
    IgGridBase.propDecorators = {
        dataSource: [{ type: Input }],
        _columns: [{ type: ContentChildren, args: [Column,] }],
        featuresList: [{ type: ContentChild, args: [Features, { static: true },] }]
    };
    return IgGridBase;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgGridComponent = /** @class */ (function (_super) {
    __extends(IgGridComponent, _super);
    function IgGridComponent(el, renderer, differs, kvalDiff, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiff, cdr) || this;
    }
    /**
     * Returns the element holding the data records
     */
    /* istanbul ignore next */
    /**
     * Returns the element holding the data records
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.widget = /**
     * Returns the element holding the data records
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns whether grid has non-data fixed columns(e.g. row selectors column)
     */
    /* istanbul ignore next */
    /**
     * Returns whether grid has non-data fixed columns(e.g. row selectors column)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.hasFixedDataSkippedColumns = /**
     * Returns whether grid has non-data fixed columns(e.g. row selectors column)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns true if grid has at least one fixed columns(even if a non-data column - like row-selectors column)
     */
    /* istanbul ignore next */
    /**
     * Returns true if grid has at least one fixed columns(even if a non-data column - like row-selectors column)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.hasFixedColumns = /**
     * Returns true if grid has at least one fixed columns(even if a non-data column - like row-selectors column)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the current fixing direction. NOTE - use only if ColumnFixing feature is enabled
     * @return left|right
     */
    /* istanbul ignore next */
    /**
     * Returns the current fixing direction. NOTE - use only if ColumnFixing feature is enabled
     * @return {?} left|right
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixingDirection = /**
     * Returns the current fixing direction. NOTE - use only if ColumnFixing feature is enabled
     * @return {?} left|right
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns whether the column with identifier colKey is fixed
     *
     * @param colKey     An identifier of the column which should be checked. It can be a key or visible index.
     */
    /* istanbul ignore next */
    /**
     * Returns whether the column with identifier colKey is fixed
     *
     * @param {?} colKey     An identifier of the column which should be checked. It can be a key or visible index.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.isFixedColumn = /**
     * Returns whether the column with identifier colKey is fixed
     *
     * @param {?} colKey     An identifier of the column which should be checked. It can be a key or visible index.
     * @return {?}
     */
    /* istanbul ignore next */
    function (colKey) { return; };
    /**
     * Called to detect whether grid container is resized. When autoAdjustHeight is true and height of the grid is changed then the height of grid is re-set.
     */
    /* istanbul ignore next */
    /**
     * Called to detect whether grid container is resized. When autoAdjustHeight is true and height of the grid is changed then the height of grid is re-set.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.resizeContainer = /**
     * Called to detect whether grid container is resized. When autoAdjustHeight is true and height of the grid is changed then the height of grid is re-set.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns whether the header identified by colKey is multicolumn header(has children)
     *
     * @param colKey     value of the column key
     */
    /* istanbul ignore next */
    /**
     * Returns whether the header identified by colKey is multicolumn header(has children)
     *
     * @param {?} colKey     value of the column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.isGroupHeader = /**
     * Returns whether the header identified by colKey is multicolumn header(has children)
     *
     * @param {?} colKey     value of the column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (colKey) { return; };
    /**
     * Returns an object that contains information on the passed Dom element
     *
     * 				rowId - the id of the record associated with the element - if primaryKey is not set this will be null.
     * 				rowIndex - the index (in the DOM) of the row associated with the element.
     * 				recordIndex - index of the data record associated with this element in the current dataView.
     * 				columnObject  - the column object associated with this element ( if the element is tr this will be null)
     *
     * @param elem    The Dom element or jQuery object which can be a TD or TR element from the grid.
     */
    /* istanbul ignore next */
    /**
     * Returns an object that contains information on the passed Dom element
     *
     * 				rowId - the id of the record associated with the element - if primaryKey is not set this will be null.
     * 				rowIndex - the index (in the DOM) of the row associated with the element.
     * 				recordIndex - index of the data record associated with this element in the current dataView.
     * 				columnObject  - the column object associated with this element ( if the element is tr this will be null)
     *
     * @param {?} elem    The Dom element or jQuery object which can be a TD or TR element from the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getElementInfo = /**
     * Returns an object that contains information on the passed Dom element
     *
     * 				rowId - the id of the record associated with the element - if primaryKey is not set this will be null.
     * 				rowIndex - the index (in the DOM) of the row associated with the element.
     * 				recordIndex - index of the data record associated with this element in the current dataView.
     * 				columnObject  - the column object associated with this element ( if the element is tr this will be null)
     *
     * @param {?} elem    The Dom element or jQuery object which can be a TD or TR element from the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    function (elem) { return; };
    /**
     * Returns the ID of the TABLE element where data records are rendered
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of the TABLE element where data records are rendered
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.id = /**
     * Returns the ID of the TABLE element where data records are rendered
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the DIV that is the topmost container of the grid widget
     */
    /* istanbul ignore next */
    /**
     * Returns the DIV that is the topmost container of the grid widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.container = /**
     * Returns the DIV that is the topmost container of the grid widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the table that contains the header cells
     */
    /* istanbul ignore next */
    /**
     * Returns the table that contains the header cells
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.headersTable = /**
     * Returns the table that contains the header cells
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the table that contains the footer cells
     */
    /* istanbul ignore next */
    /**
     * Returns the table that contains the footer cells
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.footersTable = /**
     * Returns the table that contains the footer cells
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the DIV that is used as a scroll container for the grid contents
     */
    /* istanbul ignore next */
    /**
     * Returns the DIV that is used as a scroll container for the grid contents
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.scrollContainer = /**
     * Returns the DIV that is used as a scroll container for the grid contents
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the DIV that is the topmost container of the fixed grid - contains fixed columns(in ColumnFixing scenario)
     */
    /* istanbul ignore next */
    /**
     * Returns the DIV that is the topmost container of the fixed grid - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedContainer = /**
     * Returns the DIV that is the topmost container of the fixed grid - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the DIV that is the topmost container of the fixed body grid - contains fixed columns(in ColumnFixing scenario)
     */
    /* istanbul ignore next */
    /**
     * Returns the DIV that is the topmost container of the fixed body grid - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedBodyContainer = /**
     * Returns the DIV that is the topmost container of the fixed body grid - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns container(jQuery representation) containing fixed footer - contains fixed columns(in ColumnFixing scenario)
     */
    /* istanbul ignore next */
    /**
     * Returns container(jQuery representation) containing fixed footer - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedFooterContainer = /**
     * Returns container(jQuery representation) containing fixed footer - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns container(jQuery representation) containing fixed header - contains fixed columns(in ColumnFixing scenario)
     */
    /* istanbul ignore next */
    /**
     * Returns container(jQuery representation) containing fixed header - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedHeaderContainer = /**
     * Returns container(jQuery representation) containing fixed header - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the table that contains the FIXED header cells - contains fixed columns(in ColumnFixing scenario)
     */
    /* istanbul ignore next */
    /**
     * Returns the table that contains the FIXED header cells - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedHeadersTable = /**
     * Returns the table that contains the FIXED header cells - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the table that contains the footer cells - contains fixed columns(in ColumnFixing scenario)
     */
    /* istanbul ignore next */
    /**
     * Returns the table that contains the footer cells - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedFootersTable = /**
     * Returns the table that contains the footer cells - contains fixed columns(in ColumnFixing scenario)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the cell TD element at the specified location
     *
     * @param x     The column index.
     * @param y     The row index.
     * @param isFixed     Optional parameter - if true get cell TD at the specified location from the fixed table
     */
    /* istanbul ignore next */
    /**
     * Returns the cell TD element at the specified location
     *
     * @param {?} x     The column index.
     * @param {?} y     The row index.
     * @param {?} isFixed     Optional parameter - if true get cell TD at the specified location from the fixed table
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.cellAt = /**
     * Returns the cell TD element at the specified location
     *
     * @param {?} x     The column index.
     * @param {?} y     The row index.
     * @param {?} isFixed     Optional parameter - if true get cell TD at the specified location from the fixed table
     * @return {?}
     */
    /* istanbul ignore next */
    function (x, y, isFixed) { return; };
    /**
     * Returns the cell TD element by row id and column key
     *
     * @param rowId     The id of the row.
     * @param columnKey     The column key.
     */
    /* istanbul ignore next */
    /**
     * Returns the cell TD element by row id and column key
     *
     * @param {?} rowId     The id of the row.
     * @param {?} columnKey     The column key.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.cellById = /**
     * Returns the cell TD element by row id and column key
     *
     * @param {?} rowId     The id of the row.
     * @param {?} columnKey     The column key.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, columnKey) { return; };
    /**
     * Returns the fixed table - contains fixed columns(in ColumnFixing scenario). If there aren't fixed columns returns the grid table
     */
    /* istanbul ignore next */
    /**
     * Returns the fixed table - contains fixed columns(in ColumnFixing scenario). If there aren't fixed columns returns the grid table
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedTable = /**
     * Returns the fixed table - contains fixed columns(in ColumnFixing scenario). If there aren't fixed columns returns the grid table
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets all immediate children of the current grid
     */
    /* istanbul ignore next */
    /**
     * Gets all immediate children of the current grid
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.immediateChildrenWidgets = /**
     * Gets all immediate children of the current grid
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets all children of the current grid, recursively
     */
    /* istanbul ignore next */
    /**
     * Gets all children of the current grid, recursively
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.childrenWidgets = /**
     * Gets all children of the current grid, recursively
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets all children's elements of the current grid, recursively
     */
    /* istanbul ignore next */
    /**
     * Gets all children's elements of the current grid, recursively
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.children = /**
     * Gets all children's elements of the current grid, recursively
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets all immediate children's elements of the current grid
     */
    /* istanbul ignore next */
    /**
     * Gets all immediate children's elements of the current grid
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.immediateChildren = /**
     * Gets all immediate children's elements of the current grid
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the row (TR element) at the specified index. jQuery selectors aren't used for performance reasons
     *
     * @param i     The row index.
     */
    /* istanbul ignore next */
    /**
     * Returns the row (TR element) at the specified index. jQuery selectors aren't used for performance reasons
     *
     * @param {?} i     The row index.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.rowAt = /**
     * Returns the row (TR element) at the specified index. jQuery selectors aren't used for performance reasons
     *
     * @param {?} i     The row index.
     * @return {?}
     */
    /* istanbul ignore next */
    function (i) { return; };
    /**
     * Returns the row TR element by row id
     *
     * @param rowId     The id of the row.
     * @param isFixed     Specify search in the fixed container.
     */
    /* istanbul ignore next */
    /**
     * Returns the row TR element by row id
     *
     * @param {?} rowId     The id of the row.
     * @param {?=} isFixed     Specify search in the fixed container.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.rowById = /**
     * Returns the row TR element by row id
     *
     * @param {?} rowId     The id of the row.
     * @param {?=} isFixed     Specify search in the fixed container.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, isFixed) { return; };
    /**
     * Returns the fixed row (TR element) at the specified index. jQuery selectors aren't used for performance reasons(in ColumnFixing scenario - only when there is at least one fixed column)
     *
     * @param i     The row index.
     */
    /* istanbul ignore next */
    /**
     * Returns the fixed row (TR element) at the specified index. jQuery selectors aren't used for performance reasons(in ColumnFixing scenario - only when there is at least one fixed column)
     *
     * @param {?} i     The row index.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedRowAt = /**
     * Returns the fixed row (TR element) at the specified index. jQuery selectors aren't used for performance reasons(in ColumnFixing scenario - only when there is at least one fixed column)
     *
     * @param {?} i     The row index.
     * @return {?}
     */
    /* istanbul ignore next */
    function (i) { return; };
    /**
     * Returns a list of all fixed TR elements holding data in the grid(in ColumnFixing scenario - only when there is at least one fixed column)
     */
    /* istanbul ignore next */
    /**
     * Returns a list of all fixed TR elements holding data in the grid(in ColumnFixing scenario - only when there is at least one fixed column)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.fixedRows = /**
     * Returns a list of all fixed TR elements holding data in the grid(in ColumnFixing scenario - only when there is at least one fixed column)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a list of all TR elements holding data in the grid(when there is at least one fixed column returns rows only in the UNFIXED table)
     */
    /* istanbul ignore next */
    /**
     * Returns a list of all TR elements holding data in the grid(when there is at least one fixed column returns rows only in the UNFIXED table)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.rows = /**
     * Returns a list of all TR elements holding data in the grid(when there is at least one fixed column returns rows only in the UNFIXED table)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns all data fixed rows recursively, not only the immediate ones(in ColumnFixing scenario - only when there is at least one fixed column)
     */
    /* istanbul ignore next */
    /**
     * Returns all data fixed rows recursively, not only the immediate ones(in ColumnFixing scenario - only when there is at least one fixed column)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.allFixedRows = /**
     * Returns all data fixed rows recursively, not only the immediate ones(in ColumnFixing scenario - only when there is at least one fixed column)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns all data rows recursively, not only the immediate ones(when there is at least one fixed column returns rows only in the UNFIXED table)
     */
    /* istanbul ignore next */
    /**
     * Returns all data rows recursively, not only the immediate ones(when there is at least one fixed column returns rows only in the UNFIXED table)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.allRows = /**
     * Returns all data rows recursively, not only the immediate ones(when there is at least one fixed column returns rows only in the UNFIXED table)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a column object by the specified column key
     *
     * @param key     The column key.
     */
    /* istanbul ignore next */
    /**
     * Returns a column object by the specified column key
     *
     * @param {?} key     The column key.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.columnByKey = /**
     * Returns a column object by the specified column key
     *
     * @param {?} key     The column key.
     * @return {?}
     */
    /* istanbul ignore next */
    function (key) { return; };
    /**
     * Returns a column object by the specified header text. If there are multiple matches, returns the first one.
     *
     * @param text     The column header text.
     */
    /* istanbul ignore next */
    /**
     * Returns a column object by the specified header text. If there are multiple matches, returns the first one.
     *
     * @param {?} text     The column header text.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.columnByText = /**
     * Returns a column object by the specified header text. If there are multiple matches, returns the first one.
     *
     * @param {?} text     The column header text.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text) { return; };
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     * 				If multiple selection is disabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.selectedCells = /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     * 				If multiple selection is disabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.selectedRows = /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * 				If multiple selection is enabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.selectedCell = /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     * 				If multiple selection is enabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.selectedRow = /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.activeCell = /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.activeRow = /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Retrieves a cell value using the row index and the column key. If a primaryKey is defined, rowId is assumed to be the row Key (not index).
     * 				If primary key is not defined, then rowId is converted to a number and is used as a row index.
     *
     * @param rowId     Row index or row key (primary key).
     * @param colKey     The column key.
     */
    /* istanbul ignore next */
    /**
     * Retrieves a cell value using the row index and the column key. If a primaryKey is defined, rowId is assumed to be the row Key (not index).
     * 				If primary key is not defined, then rowId is converted to a number and is used as a row index.
     *
     * @param {?} rowId     Row index or row key (primary key).
     * @param {?} colKey     The column key.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getCellValue = /**
     * Retrieves a cell value using the row index and the column key. If a primaryKey is defined, rowId is assumed to be the row Key (not index).
     * 				If primary key is not defined, then rowId is converted to a number and is used as a row index.
     *
     * @param {?} rowId     Row index or row key (primary key).
     * @param {?} colKey     The column key.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, colKey) { return; };
    /**
     * Returns the cell text. If colKey is a number, the index of the column is used (instead of a column name)- does not apply when using a Multi-Row Layout grid.
     * 				This is the actual text (or HTML string) for the contents of the cell.
     *
     * @param rowId     Row index or row data key (primary key)
     * @param colKey     Column key.
     */
    /* istanbul ignore next */
    /**
     * Returns the cell text. If colKey is a number, the index of the column is used (instead of a column name)- does not apply when using a Multi-Row Layout grid.
     * 				This is the actual text (or HTML string) for the contents of the cell.
     *
     * @param {?} rowId     Row index or row data key (primary key)
     * @param {?} colKey     Column key.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getCellText = /**
     * Returns the cell text. If colKey is a number, the index of the column is used (instead of a column name)- does not apply when using a Multi-Row Layout grid.
     * 				This is the actual text (or HTML string) for the contents of the cell.
     *
     * @param {?} rowId     Row index or row data key (primary key)
     * @param {?} colKey     Column key.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, colKey) { return; };
    /**
     * Sets a new template for a column after initialization and renders the grid if not explicitly disabled. This method will replace any existing explicitly set row template and will build one anew from the column ones.
     *
     * @param col     An identifier of the column to set template for (index or key)
     * @param tmpl     The column template to set
     * @param render     Should the grid rerender after template is set
     */
    /* istanbul ignore next */
    /**
     * Sets a new template for a column after initialization and renders the grid if not explicitly disabled. This method will replace any existing explicitly set row template and will build one anew from the column ones.
     *
     * @param {?} col     An identifier of the column to set template for (index or key)
     * @param {?} tmpl     The column template to set
     * @param {?=} render     Should the grid rerender after template is set
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.setColumnTemplate = /**
     * Sets a new template for a column after initialization and renders the grid if not explicitly disabled. This method will replace any existing explicitly set row template and will build one anew from the column ones.
     *
     * @param {?} col     An identifier of the column to set template for (index or key)
     * @param {?} tmpl     The column template to set
     * @param {?=} render     Should the grid rerender after template is set
     * @return {?}
     */
    /* istanbul ignore next */
    function (col, tmpl, render) { return; };
    /**
     * Commits all pending transactions to the client data source. Note that there won't be anything to commit on the UI, since it is updated instantly. In order to rollback the actual UI, a call to dataBind() is required.
     *
     * @param rowId     If specified, will commit only that transaction corresponding to the specified record key.
     */
    /* istanbul ignore next */
    /**
     * Commits all pending transactions to the client data source. Note that there won't be anything to commit on the UI, since it is updated instantly. In order to rollback the actual UI, a call to dataBind() is required.
     *
     * @param {?=} rowId     If specified, will commit only that transaction corresponding to the specified record key.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.commit = /**
     * Commits all pending transactions to the client data source. Note that there won't be anything to commit on the UI, since it is updated instantly. In order to rollback the actual UI, a call to dataBind() is required.
     *
     * @param {?=} rowId     If specified, will commit only that transaction corresponding to the specified record key.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId) { return; };
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param rowId     If specified, will only rollback the transactions with that row id.
     * @param updateUI     Whether to update the UI or not.
     */
    /* istanbul ignore next */
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param {?=} rowId     If specified, will only rollback the transactions with that row id.
     * @param {?=} updateUI     Whether to update the UI or not.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.rollback = /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param {?=} rowId     If specified, will only rollback the transactions with that row id.
     * @param {?=} updateUI     Whether to update the UI or not.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, updateUI) { return; };
    /**
     * Returns a record by a specified key (requires that primaryKey is set in the settings).
     * 				That is a wrapper for this.dataSource.findRecordByKey(key).
     *
     * @param key     Primary key of the record
     */
    /* istanbul ignore next */
    /**
     * Returns a record by a specified key (requires that primaryKey is set in the settings).
     * 				That is a wrapper for this.dataSource.findRecordByKey(key).
     *
     * @param {?} key     Primary key of the record
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.findRecordByKey = /**
     * Returns a record by a specified key (requires that primaryKey is set in the settings).
     * 				That is a wrapper for this.dataSource.findRecordByKey(key).
     *
     * @param {?} key     Primary key of the record
     * @return {?}
     */
    /* istanbul ignore next */
    function (key) { return; };
    /**
     * Returns a standalone object (copy) that represents the committed transactions, but detached from the data source.
     * 				That is a wrapper for this.dataSource.getDetachedRecord(t).
     *
     * @param t     A transaction object.
     */
    /* istanbul ignore next */
    /**
     * Returns a standalone object (copy) that represents the committed transactions, but detached from the data source.
     * 				That is a wrapper for this.dataSource.getDetachedRecord(t).
     *
     * @param {?} t     A transaction object.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getDetachedRecord = /**
     * Returns a standalone object (copy) that represents the committed transactions, but detached from the data source.
     * 				That is a wrapper for this.dataSource.getDetachedRecord(t).
     *
     * @param {?} t     A transaction object.
     * @return {?}
     */
    /* istanbul ignore next */
    function (t) { return; };
    /**
     * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source.
     * 				That is a wrapper for this.dataSource.pendingTransactions().
     */
    /* istanbul ignore next */
    /**
     * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source.
     * 				That is a wrapper for this.dataSource.pendingTransactions().
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.pendingTransactions = /**
     * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source.
     * 				That is a wrapper for this.dataSource.pendingTransactions().
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
     * 				That is a wrapper for this.dataSource.allTransactions().
     */
    /* istanbul ignore next */
    /**
     * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
     * 				That is a wrapper for this.dataSource.allTransactions().
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.allTransactions = /**
     * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
     * 				That is a wrapper for this.dataSource.allTransactions().
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently.
     * 				That is a wrapper for this.dataSource.transactionsAsString().
     */
    /* istanbul ignore next */
    /**
     * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently.
     * 				That is a wrapper for this.dataSource.transactionsAsString().
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.transactionsAsString = /**
     * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently.
     * 				That is a wrapper for this.dataSource.transactionsAsString().
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Invokes an AJAX request to the updateUrl option (if specified) and passes the serialized transaction log (a serialized JSON string) as part of the POST request.
     *
     * @param success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     */
    /* istanbul ignore next */
    /**
     * Invokes an AJAX request to the updateUrl option (if specified) and passes the serialized transaction log (a serialized JSON string) as part of the POST request.
     *
     * @param {?} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param {?} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.saveChanges = /**
     * Invokes an AJAX request to the updateUrl option (if specified) and passes the serialized transaction log (a serialized JSON string) as part of the POST request.
     *
     * @param {?} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param {?} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (success, error) { return; };
    /**
     * Adds a new row (TR) to the grid, by taking a data row object. Assumes the record will have the primary key.
     *
     * @param rec     Identifier/key of row. If missing, then number of rows in grid is used.
     */
    /* istanbul ignore next */
    /**
     * Adds a new row (TR) to the grid, by taking a data row object. Assumes the record will have the primary key.
     *
     * @param {?=} rec     Identifier/key of row. If missing, then number of rows in grid is used.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.renderNewRow = /**
     * Adds a new row (TR) to the grid, by taking a data row object. Assumes the record will have the primary key.
     *
     * @param {?=} rec     Identifier/key of row. If missing, then number of rows in grid is used.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rec) { return; };
    /**
     * If the data source points to a local JSON array of data, and it is necessary to reset it at runtime, it must be done through this API member instead of the options (options.dataSource)
     *
     * @param dataSource     New data source object.
     */
    /* istanbul ignore next */
    /**
     * If the data source points to a local JSON array of data, and it is necessary to reset it at runtime, it must be done through this API member instead of the options (options.dataSource)
     *
     * @param {?} dataSource     New data source object.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.dataSourceObject = /**
     * If the data source points to a local JSON array of data, and it is necessary to reset it at runtime, it must be done through this API member instead of the options (options.dataSource)
     *
     * @param {?} dataSource     New data source object.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource) { return; };
    /**
     * Returns the total number of records in the underlying backend. If paging or filtering is enabled, this may differ from the number of records in the client-side data source.
     * 				In order for this to work, the response JSON/XML must include a property that specifies the total number of records, which name is specified by options.responseTotalRecCountKey.
     * 				This functionality is completely delegated to the data source control.
     */
    /* istanbul ignore next */
    /**
     * Returns the total number of records in the underlying backend. If paging or filtering is enabled, this may differ from the number of records in the client-side data source.
     * 				In order for this to work, the response JSON/XML must include a property that specifies the total number of records, which name is specified by options.responseTotalRecCountKey.
     * 				This functionality is completely delegated to the data source control.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.totalRecordsCount = /**
     * Returns the total number of records in the underlying backend. If paging or filtering is enabled, this may differ from the number of records in the client-side data source.
     * 				In order for this to work, the response JSON/XML must include a property that specifies the total number of records, which name is specified by options.responseTotalRecCountKey.
     * 				This functionality is completely delegated to the data source control.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Causes the grid to data bind to the data source (local or remote) , and re-render all of the data as well
     *
     * @param internal
     */
    /* istanbul ignore next */
    /**
     * Causes the grid to data bind to the data source (local or remote) , and re-render all of the data as well
     *
     * @param {?} internal
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.dataBind = /**
     * Causes the grid to data bind to the data source (local or remote) , and re-render all of the data as well
     *
     * @param {?} internal
     * @return {?}
     */
    /* istanbul ignore next */
    function (internal) { return; };
    /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param after    Specifies whether the column moved should be moved after or before the target column. This parameter is disregarded if there is no target column specified but a target index is used.
     * @param inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param callback    Specifies a custom function to be called when the column is moved.
     */
    /* istanbul ignore next */
    /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param {?} target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param {?=} after    Specifies whether the column moved should be moved after or before the target column. This parameter is disregarded if there is no target column specified but a target index is used.
     * @param {?=} inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param {?=} callback    Specifies a custom function to be called when the column is moved.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.moveColumn = /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * 			Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param {?} target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param {?=} after    Specifies whether the column moved should be moved after or before the target column. This parameter is disregarded if there is no target column specified but a target index is used.
     * @param {?=} inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param {?=} callback    Specifies a custom function to be called when the column is moved.
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, target, after, inDom, callback) { return; };
    /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column     An identifier for the column. If a number is provided it will be used as a column index. If a string is provided it will be used as a column key.
     * @param callback     Specifies a custom function to be called when the column is shown(optional)
     */
    /* istanbul ignore next */
    /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column     An identifier for the column. If a number is provided it will be used as a column index. If a string is provided it will be used as a column key.
     * @param {?} callback     Specifies a custom function to be called when the column is shown(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.showColumn = /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column     An identifier for the column. If a number is provided it will be used as a column index. If a string is provided it will be used as a column key.
     * @param {?} callback     Specifies a custom function to be called when the column is shown(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, callback) { return; };
    /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column     An identifier for the column. If a number is provided it will be used as a column index else if a string is provided it will be used as a column key.
     * @param callback     Specifies a custom function to be called when the column is hidden(optional)
     */
    /* istanbul ignore next */
    /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column     An identifier for the column. If a number is provided it will be used as a column index else if a string is provided it will be used as a column key.
     * @param {?} callback     Specifies a custom function to be called when the column is hidden(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.hideColumn = /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} column     An identifier for the column. If a number is provided it will be used as a column index else if a string is provided it will be used as a column key.
     * @param {?} callback     Specifies a custom function to be called when the column is hidden(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, callback) { return; };
    /**
     * Gets unbound values for the specified column key. If key is not specified returns all unboundvalues
     *
     * @param key     column key
     */
    /* istanbul ignore next */
    /**
     * Gets unbound values for the specified column key. If key is not specified returns all unboundvalues
     *
     * @param {?} key     column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getUnboundValues = /**
     * Gets unbound values for the specified column key. If key is not specified returns all unboundvalues
     *
     * @param {?} key     column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (key) { return; };
    /**
     * Sets unbound values for the unbound column with the specified key. If removeOldValues is true then values(if any) for the unbound columns are re-set with the new values
     *
     * @param key     key of the unbound column
     * @param values     array of values to be set on unbound values
     * @param removeOldValues     if true removes current unbound values(if any) for the specified column and apply the new ones specified in parameter values. Otherwise merge current values with the specified in parameter values
     */
    /* istanbul ignore next */
    /**
     * Sets unbound values for the unbound column with the specified key. If removeOldValues is true then values(if any) for the unbound columns are re-set with the new values
     *
     * @param {?} key     key of the unbound column
     * @param {?} values     array of values to be set on unbound values
     * @param {?} removeOldValues     if true removes current unbound values(if any) for the specified column and apply the new ones specified in parameter values. Otherwise merge current values with the specified in parameter values
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.setUnboundValues = /**
     * Sets unbound values for the unbound column with the specified key. If removeOldValues is true then values(if any) for the unbound columns are re-set with the new values
     *
     * @param {?} key     key of the unbound column
     * @param {?} values     array of values to be set on unbound values
     * @param {?} removeOldValues     if true removes current unbound values(if any) for the specified column and apply the new ones specified in parameter values. Otherwise merge current values with the specified in parameter values
     * @return {?}
     */
    /* istanbul ignore next */
    function (key, values, removeOldValues) { return; };
    /**
     * Sets unbound value for the unbound cell by the specified column key and row primary key.
     *
     * @param col     key of the unbound column
     * @param rowId     primary key value of the row
     * @param val     value to be set on unbound cell
     * @param notToRender     if false will re-render the row
     */
    /* istanbul ignore next */
    /**
     * Sets unbound value for the unbound cell by the specified column key and row primary key.
     *
     * @param {?} col     key of the unbound column
     * @param {?} rowId     primary key value of the row
     * @param {?} val     value to be set on unbound cell
     * @param {?} notToRender     if false will re-render the row
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.setUnboundValueByPK = /**
     * Sets unbound value for the unbound cell by the specified column key and row primary key.
     *
     * @param {?} col     key of the unbound column
     * @param {?} rowId     primary key value of the row
     * @param {?} val     value to be set on unbound cell
     * @param {?} notToRender     if false will re-render the row
     * @return {?}
     */
    /* istanbul ignore next */
    function (col, rowId, val, notToRender) { return; };
    /**
     * Returns an unbound column with the specified key. If not found returns null
     *
     * @param key    a column key
     */
    /* istanbul ignore next */
    /**
     * Returns an unbound column with the specified key. If not found returns null
     *
     * @param {?} key    a column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getUnboundColumnByKey = /**
     * Returns an unbound column with the specified key. If not found returns null
     *
     * @param {?} key    a column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (key) { return; };
    /**
     * Returns whether there is vertical scrollbar. Because of perfrormance issues in older Internet Explorer especially 8,9 - there is no need to check if height is not set - there is no scrollbar OR if row virtualization is enabled - it is supposed there is vertical scrollbar
     */
    /* istanbul ignore next */
    /**
     * Returns whether there is vertical scrollbar. Because of perfrormance issues in older Internet Explorer especially 8,9 - there is no need to check if height is not set - there is no scrollbar OR if row virtualization is enabled - it is supposed there is vertical scrollbar
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.hasVerticalScrollbar = /**
     * Returns whether there is vertical scrollbar. Because of perfrormance issues in older Internet Explorer especially 8,9 - there is no need to check if height is not set - there is no scrollbar OR if row virtualization is enabled - it is supposed there is vertical scrollbar
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Auto resize columns that have property width set to "*" so content to be auto-fitted(not shrinked/cutted). Auto-resizing is applied ONLY for visible columns
     */
    /* istanbul ignore next */
    /**
     * Auto resize columns that have property width set to "*" so content to be auto-fitted(not shrinked/cutted). Auto-resizing is applied ONLY for visible columns
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.autoSizeColumns = /**
     * Auto resize columns that have property width set to "*" so content to be auto-fitted(not shrinked/cutted). Auto-resizing is applied ONLY for visible columns
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Calculates the width of the column so its content to be auto-fitted to the width of the data in it(the content should NOT be shrinked/cutted)
     *
     * @param columnIndex    Visible column index
     */
    /* istanbul ignore next */
    /**
     * Calculates the width of the column so its content to be auto-fitted to the width of the data in it(the content should NOT be shrinked/cutted)
     *
     * @param {?} columnIndex    Visible column index
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.calculateAutoFitColumnWidth = /**
     * Calculates the width of the column so its content to be auto-fitted to the width of the data in it(the content should NOT be shrinked/cutted)
     *
     * @param {?} columnIndex    Visible column index
     * @return {?}
     */
    /* istanbul ignore next */
    function (columnIndex) { return; };
    /**
     * Get visible index by specified column key. If column is not found or is hidden then returns -1.
     * 				Note: Method does not count column groups (Multi-Column Headers).
     *
     * @param columnKey     columnKey
     * @param includeDataSkip     Optional parameter - if set to true include non data columns(like expander column, row selectors column, etc.) in calculations
     */
    /* istanbul ignore next */
    /**
     * Get visible index by specified column key. If column is not found or is hidden then returns -1.
     * 				Note: Method does not count column groups (Multi-Column Headers).
     *
     * @param {?} columnKey     columnKey
     * @param {?} includeDataSkip     Optional parameter - if set to true include non data columns(like expander column, row selectors column, etc.) in calculations
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getVisibleIndexByKey = /**
     * Get visible index by specified column key. If column is not found or is hidden then returns -1.
     * 				Note: Method does not count column groups (Multi-Column Headers).
     *
     * @param {?} columnKey     columnKey
     * @param {?} includeDataSkip     Optional parameter - if set to true include non data columns(like expander column, row selectors column, etc.) in calculations
     * @return {?}
     */
    /* istanbul ignore next */
    function (columnKey, includeDataSkip) { return; };
    /**
     * When called the method re-renders the whole grid(also rebinds to the data source) and renders the cols object
     *
     * @param cols an array of column objects
     */
    /* istanbul ignore next */
    /**
     * When called the method re-renders the whole grid(also rebinds to the data source) and renders the cols object
     *
     * @param {?} cols an array of column objects
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.renderMultiColumnHeader = /**
     * When called the method re-renders the whole grid(also rebinds to the data source) and renders the cols object
     *
     * @param {?} cols an array of column objects
     * @return {?}
     */
    /* istanbul ignore next */
    function (cols) { return; };
    /**
     * Scroll to the specified row or specified position(in pixels)
     *
     * @param scrollerPosition     An identifier of the vertical scroll position. When it is string then it is interpreted as pixels otherwise it is the row number
     */
    /* istanbul ignore next */
    /**
     * Scroll to the specified row or specified position(in pixels)
     *
     * @param {?} scrollerPosition     An identifier of the vertical scroll position. When it is string then it is interpreted as pixels otherwise it is the row number
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.virtualScrollTo = /**
     * Scroll to the specified row or specified position(in pixels)
     *
     * @param {?} scrollerPosition     An identifier of the vertical scroll position. When it is string then it is interpreted as pixels otherwise it is the row number
     * @return {?}
     */
    /* istanbul ignore next */
    function (scrollerPosition) { return; };
    /**
     * Returns column object and visible index for the table cell(TD) which is passed as argument
     *
     * @param $td     cell(TD) - either DOM TD element or jQuery object
     */
    /* istanbul ignore next */
    /**
     * Returns column object and visible index for the table cell(TD) which is passed as argument
     *
     * @param {?} $td     cell(TD) - either DOM TD element or jQuery object
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.getColumnByTD = /**
     * Returns column object and visible index for the table cell(TD) which is passed as argument
     *
     * @param {?} $td     cell(TD) - either DOM TD element or jQuery object
     * @return {?}
     */
    /* istanbul ignore next */
    function ($td) { return; };
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 				1. Remove custom CSS classes that were added.
     * 				2. Unwrap any wrapping elements such as scrolling divs and other containers.
     * 				3. Unbind all events that were bound.
     *
     * @param notToCallDestroy
     */
    /* istanbul ignore next */
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 				1. Remove custom CSS classes that were added.
     * 				2. Unwrap any wrapping elements such as scrolling divs and other containers.
     * 				3. Unbind all events that were bound.
     *
     * @param {?} notToCallDestroy
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridComponent.prototype.destroy = /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 				1. Remove custom CSS classes that were added.
     * 				2. Unwrap any wrapping elements such as scrolling divs and other containers.
     * 				3. Unbind all events that were bound.
     *
     * @param {?} notToCallDestroy
     * @return {?}
     */
    /* istanbul ignore next */
    function (notToCallDestroy) { return; };
    IgGridComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    "selector": "ig-grid",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "autoAdjustHeight", "avgRowHeight", "avgColumnWidth", "defaultColumnWidth", "autoGenerateColumns", "virtualization", "virtualizationMode", "requiresDataBinding", "rowVirtualization", "columnVirtualization", "virtualizationMouseWheelStep", "adjustVirtualHeights", "templatingEngine", "columns", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "responseTotalRecCountKey", "requestType", "responseContentType", "showHeader", "showFooter", "fixedHeaders", "fixedFooters", "caption", "features", "tabIndex", "localSchemaTransform", "primaryKey", "serializeTransactionLog", "autoCommit", "aggregateTransactions", "autoFormat", "renderCheckboxes", "updateUrl", "restSettings", "alternateRowStyles", "autofitLastColumn", "enableHoverStyles", "enableUTCDates", "mergeUnboundColumns", "jsonpRequest", "enableResizeContainerCheck", "featureChooserIconDisplay", "scrollSettings"],
                    outputs: ["cellClick", "cellRightClick", "dataBinding", "dataBound", "rendering", "rendered", "dataRendering", "dataRendered", "headerRendering", "headerRendered", "footerRendering", "footerRendered", "headerCellRendered", "rowsRendering", "rowsRendered", "schemaGenerated", "columnsCollectionModified", "requestError", "created", "destroyed"]
                }] }
    ];
    /** @nocollapse */
    IgGridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgGridComponent;
}(IgGridBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgTreeGridComponent = /** @class */ (function (_super) {
    __extends(IgTreeGridComponent, _super);
    function IgTreeGridComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    IgTreeGridComponent.prototype.deleteRow = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var tr = element.find("tr[data-id='" + id + "']");
        /** @type {?} */
        var dataLevel = tr.attr("aria-level");
        if (tr.length > 0) {
            element.data(this._widgetName).dataSource.deleteRow(id, true);
            element.data(this._widgetName).dataSource._removeTransactionsByRecordId(id);
            /** @type {?} */
            var trs = tr.nextUntil("tr[data-level=" + dataLevel + "]");
            if (trs.length === 0) {
                trs = tr.nextAll("tr[data-level]");
            }
            tr.remove();
            trs.remove();
        }
    };
    /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    IgTreeGridComponent.prototype.updateRow = /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    function (rec, currValue, key) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var grid = element.data(this._widgetName);
        /** @type {?} */
        var childDataKey = this["childDataKey"] || this.options.childDataKey;
        /** @type {?} */
        var column = element.data(this._widgetName).columnByKey(key);
        if (!column && key === childDataKey) {
            //we have an hierarchical data source and one of the nested collections has changed.
            grid.dataBind();
        }
        else {
            _super.prototype.updateRow.call(this, rec, currValue, key);
        }
    };
    /**
     * @return {?}
     */
    IgTreeGridComponent.prototype.markForCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.markForCheck.call(this);
        /** @type {?} */
        var childDataKey = this["childDataKey"] || this.options.childDataKey;
        if (childDataKey) {
            this.dataBind();
        }
    };
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param rowId     If specified, will only rollback the transactions with that row id.
     * @param updateUI     Whether to update the UI or not.
     */
    /* istanbul ignore next */
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param {?=} rowId     If specified, will only rollback the transactions with that row id.
     * @param {?=} updateUI     Whether to update the UI or not.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeGridComponent.prototype.rollback = /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param {?=} rowId     If specified, will only rollback the transactions with that row id.
     * @param {?=} updateUI     Whether to update the UI or not.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId, updateUI) { return; };
    /**
     * Causes the treegrid to data bind to the data source (local or remote) , and re-render all of the data
     */
    /* istanbul ignore next */
    /**
     * Causes the treegrid to data bind to the data source (local or remote) , and re-render all of the data
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeGridComponent.prototype.dataBind = /**
     * Causes the treegrid to data bind to the data source (local or remote) , and re-render all of the data
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Toggle row by specified row or row identifier
     *
     * @param row     jQuery table row object or a row id.
     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     */
    /* istanbul ignore next */
    /**
     * Toggle row by specified row or row identifier
     *
     * @param {?} row     jQuery table row object or a row id.
     * @param {?=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeGridComponent.prototype.toggleRow = /**
     * Toggle row by specified row or row identifier
     *
     * @param {?} row     jQuery table row object or a row id.
     * @param {?=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     * @return {?}
     */
    /* istanbul ignore next */
    function (row, callback) { return; };
    /**
     * Expands a parent row by specified row or row identifier
     *
     * @param row     jQuery table row object or a row id.
     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     */
    /* istanbul ignore next */
    /**
     * Expands a parent row by specified row or row identifier
     *
     * @param {?} row     jQuery table row object or a row id.
     * @param {?=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeGridComponent.prototype.expandRow = /**
     * Expands a parent row by specified row or row identifier
     *
     * @param {?} row     jQuery table row object or a row id.
     * @param {?=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     * @return {?}
     */
    /* istanbul ignore next */
    function (row, callback) { return; };
    /**
     * Collapses a parent row by specified row or row identifier
     *
     * @param row     jQuery table row object, raw DOM row object or a row id.
     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     */
    /* istanbul ignore next */
    /**
     * Collapses a parent row by specified row or row identifier
     *
     * @param {?} row     jQuery table row object, raw DOM row object or a row id.
     * @param {?=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeGridComponent.prototype.collapseRow = /**
     * Collapses a parent row by specified row or row identifier
     *
     * @param {?} row     jQuery table row object, raw DOM row object or a row id.
     * @param {?=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     * @return {?}
     */
    /* istanbul ignore next */
    function (row, callback) { return; };
    /**
     * Adds a new row (TR) to the grid as a child of a specific row, by taking a data row object. Assumes the record will have the primary key.
     *
     * @param rec     The data row JavaScript object.
     * @param parentId     Identifier/key of the targeted parent row. If missing, then the new row is rendered to the bottom of the grid.
     */
    /* istanbul ignore next */
    /**
     * Adds a new row (TR) to the grid as a child of a specific row, by taking a data row object. Assumes the record will have the primary key.
     *
     * @param {?} rec     The data row JavaScript object.
     * @param {?=} parentId     Identifier/key of the targeted parent row. If missing, then the new row is rendered to the bottom of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeGridComponent.prototype.renderNewChild = /**
     * Adds a new row (TR) to the grid as a child of a specific row, by taking a data row object. Assumes the record will have the primary key.
     *
     * @param {?} rec     The data row JavaScript object.
     * @param {?=} parentId     Identifier/key of the targeted parent row. If missing, then the new row is rendered to the bottom of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rec, parentId) { return; };
    /**
     * Destroys igTreeGrid
     */
    /* istanbul ignore next */
    /**
     * Destroys igTreeGrid
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeGridComponent.prototype.destroy = /**
     * Destroys igTreeGrid
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgTreeGridComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-tree-grid",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "autoAdjustHeight", "avgRowHeight", "avgColumnWidth", "defaultColumnWidth", "autoGenerateColumns", "virtualization", "virtualizationMode", "requiresDataBinding", "rowVirtualization", "columnVirtualization", "virtualizationMouseWheelStep", "adjustVirtualHeights", "templatingEngine", "columns", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "responseTotalRecCountKey", "requestType", "responseContentType", "showHeader", "showFooter", "fixedHeaders", "fixedFooters", "caption", "features", "tabIndex", "localSchemaTransform", "primaryKey", "serializeTransactionLog", "autoCommit", "aggregateTransactions", "autoFormat", "renderCheckboxes", "updateUrl", "restSettings", "alternateRowStyles", "autofitLastColumn", "enableHoverStyles", "enableUTCDates", "mergeUnboundColumns", "jsonpRequest", "enableResizeContainerCheck", "featureChooserIconDisplay", "scrollSettings", "indentation", "initialIndentationLevel", "showExpansionIndicator", "expandTooltipText", "collapseTooltipText", "foreignKey", "initialExpandDepth", "foreignKeyRootValue", "renderExpansionIndicatorColumn", "renderFirstDataCellFunction", "childDataKey", "renderExpansionCellFunction", "enableRemoteLoadOnDemand", "dataSourceSettings"],
                    outputs: ["cellClick", "cellRightClick", "dataBinding", "dataBound", "rendering", "rendered", "dataRendering", "dataRendered", "headerRendering", "headerRendered", "footerRendering", "footerRendered", "headerCellRendered", "rowsRendering", "rowsRendered", "schemaGenerated", "columnsCollectionModified", "requestError", "created", "destroyed", "rowExpanding", "rowExpanded", "rowCollapsing", "rowCollapsed"]
                }] }
    ];
    /** @nocollapse */
    IgTreeGridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgTreeGridComponent;
}(IgGridBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgHierarchicalGridComponent = /** @class */ (function (_super) {
    __extends(IgHierarchicalGridComponent, _super);
    function IgHierarchicalGridComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    IgHierarchicalGridComponent.prototype.deleteRow = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var tr = element.find("tr[data-id='" + id + "']");
        /** @type {?} */
        var childContainer = tr.next("tr[data-container]");
        if (tr.length > 0) {
            tr.remove();
            childContainer.remove();
            element.data("igGrid").dataSource.deleteRow(id, true);
            element.data("igGrid").dataSource._removeTransactionsByRecordId(id);
        }
    };
    /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    IgHierarchicalGridComponent.prototype.updateRow = /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    function (rec, currValue, key) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var childrenDataProperty = this["childrenDataProperty"] || this.options.childrenDataProperty;
        /** @type {?} */
        var childGrid = element.data(this._widgetName).allChildrenWidgets().filter((/**
         * @param {?} indx
         * @return {?}
         */
        function (indx) {
            /** @type {?} */
            var parentRow = jQuery(this.element).closest('tr[data-container]').prev();
            /** @type {?} */
            var parentGridPK = parentRow.closest(".ui-iggrid-table").data("igGrid").options.primaryKey;
            return (childrenDataProperty === key ||
                parentRow.next("[data-container]").find("table[role='grid']").attr("id").contains("_" + key + "_"))
                && parentRow.attr("data-id") == rec[parentGridPK];
        }));
        if (childGrid.length > 0) {
            jQuery(childGrid).each((/**
             * @return {?}
             */
            function () {
                this.dataBind();
            }));
        }
        else {
            _super.prototype.updateRow.call(this, rec, currValue, key);
        }
    };
    /**
     * @return {?}
     */
    IgHierarchicalGridComponent.prototype.markForCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.markForCheck.call(this);
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var childrenDataProperty = this["childrenDataProperty"] || this.options.childrenDataProperty;
        /** @type {?} */
        var childGrids = element.data(this._widgetName).allChildrenWidgets();
        for (var i = 0; i < childGrids.length; i++) {
            childGrids[i].dataBind();
        }
    };
    /**
     * Data binds the hierarchical grid. No child grids will be created or rendered by default, unless there is initialExpandDepth >= 0 set.
     */
    /* istanbul ignore next */
    /**
     * Data binds the hierarchical grid. No child grids will be created or rendered by default, unless there is initialExpandDepth >= 0 set.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.dataBind = /**
     * Data binds the hierarchical grid. No child grids will be created or rendered by default, unless there is initialExpandDepth >= 0 set.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the element of the root grid (igGrid)
     */
    /* istanbul ignore next */
    /**
     * Returns the element of the root grid (igGrid)
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.root = /**
     * Returns the element of the root grid (igGrid)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the widget object of the root grid (igGrid)
     */
    /* istanbul ignore next */
    /**
     * Returns the widget object of the root grid (igGrid)
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.rootWidget = /**
     * Returns the widget object of the root grid (igGrid)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a flat list of all child grid elements (recursive)
     */
    /* istanbul ignore next */
    /**
     * Returns a flat list of all child grid elements (recursive)
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.allChildren = /**
     * Returns a flat list of all child grid elements (recursive)
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Expands or collapses (toggles) a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param callback     Specifies a custom function to be called when parent row is toggled(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was toggled
     */
    /* istanbul ignore next */
    /**
     * Expands or collapses (toggles) a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param {?=} callback     Specifies a custom function to be called when parent row is toggled(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was toggled
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.toggle = /**
     * Expands or collapses (toggles) a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param {?=} callback     Specifies a custom function to be called when parent row is toggled(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was toggled
     * @return {?}
     */
    /* istanbul ignore next */
    function (element, callback) { return; };
    /**
     * Expands (toggles) a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments first is hierarchical grid object, second is the row element that was expanded
     */
    /* istanbul ignore next */
    /**
     * Expands (toggles) a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param {?=} callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments first is hierarchical grid object, second is the row element that was expanded
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.expand = /**
     * Expands (toggles) a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param {?=} callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments first is hierarchical grid object, second is the row element that was expanded
     * @return {?}
     */
    /* istanbul ignore next */
    function (id, callback) { return; };
    /**
     * Collapses a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was collapsed
     */
    /* istanbul ignore next */
    /**
     * Collapses a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param {?=} callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was collapsed
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.collapse = /**
     * Collapses a parent row
     * 				Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param {?} id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param {?=} callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was collapsed
     * @return {?}
     */
    /* istanbul ignore next */
    function (id, callback) { return; };
    /**
     * Checks if a parent row is currently collapsed
     *
     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     */
    /* istanbul ignore next */
    /**
     * Checks if a parent row is currently collapsed
     *
     * @param {?} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.collapsed = /**
     * Checks if a parent row is currently collapsed
     *
     * @param {?} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @return {?}
     */
    /* istanbul ignore next */
    function (element) { return; };
    /**
     * Checks if a parent row is populated with data
     *
     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     */
    /* istanbul ignore next */
    /**
     * Checks if a parent row is populated with data
     *
     * @param {?} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.populated = /**
     * Checks if a parent row is populated with data
     *
     * @param {?} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @return {?}
     */
    /* istanbul ignore next */
    function (element) { return; };
    /**
     * Commits pending transactions to the client data source for main and all child grids.
     */
    /* istanbul ignore next */
    /**
     * Commits pending transactions to the client data source for main and all child grids.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.commit = /**
     * Commits pending transactions to the client data source for main and all child grids.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param rebind     Whether to perform a rebind.
     */
    /* istanbul ignore next */
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param {?=} rebind     Whether to perform a rebind.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.rollback = /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param {?=} rebind     Whether to perform a rebind.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rebind) { return; };
    /**
     * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
     *
     * @param success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     */
    /* istanbul ignore next */
    /**
     * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
     *
     * @param {?} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param {?} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.saveChanges = /**
     * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
     *
     * @param {?} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param {?} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     * @return {?}
     */
    /* istanbul ignore next */
    function (success, error) { return; };
    /**
     * Destroys the hierarchical grid by recursively destroying all child grids
     */
    /* istanbul ignore next */
    /**
     * Destroys the hierarchical grid by recursively destroying all child grids
     * @return {?}
     */
    /* istanbul ignore next */
    IgHierarchicalGridComponent.prototype.destroy = /**
     * Destroys the hierarchical grid by recursively destroying all child grids
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgHierarchicalGridComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: "ig-hierarchical-grid",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "initialDataBindDepth", "initialExpandDepth", "odata", "rest", "maxDataBindDepth", "defaultChildrenDataProperty", "autoGenerateLayouts", "expandCollapseAnimations", "expandColWidth", "pathSeparator", "animationDuration", "expandTooltip", "collapseTooltip", "columnLayouts", "width", "height", "autoAdjustHeight", "avgRowHeight", "avgColumnWidth", "defaultColumnWidth", "autoGenerateColumns", "virtualization", "virtualizationMode", "requiresDataBinding", "rowVirtualization", "columnVirtualization", "virtualizationMouseWheelStep", "adjustVirtualHeights", "templatingEngine", "columns", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "responseTotalRecCountKey", "requestType", "responseContentType", "showHeader", "showFooter", "fixedHeaders", "fixedFooters", "caption", "features", "tabIndex", "localSchemaTransform", "primaryKey", "serializeTransactionLog", "autoCommit", "aggregateTransactions", "autoFormat", "renderCheckboxes", "updateUrl", "restSettings", "alternateRowStyles", "autofitLastColumn", "enableHoverStyles", "enableUTCDates", "mergeUnboundColumns", "jsonpRequest", "enableResizeContainerCheck", "featureChooserIconDisplay", "scrollSettings"],
                    outputs: ["rowExpanding", "rowExpanded", "rowCollapsing", "rowCollapsed", "childrenPopulating", "childrenPopulated", "childGridRendered", "childGridCreating", "childGridCreated", "cellClick", "cellRightClick", "dataBinding", "dataBound", "rendering", "rendered", "dataRendering", "dataRendered", "headerRendering", "headerRendered", "footerRendering", "footerRendered", "headerCellRendered", "rowsRendering", "rowsRendered", "schemaGenerated", "columnsCollectionModified", "requestError", "created", "destroyed"]
                }] }
    ];
    /** @nocollapse */
    IgHierarchicalGridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgHierarchicalGridComponent;
}(IgGridBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgComboComponent = /** @class */ (function (_super) {
    __extends(IgComboComponent, _super);
    function IgComboComponent(model, el, renderer, differs, kvalDiffers, cdr) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
        _this.model = model;
        _this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
        });
        _this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        if (model) {
            model.valueAccessor = _this;
            _this._model = model;
        }
        return _this;
    }
    Object.defineProperty(IgComboComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgComboComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
        if (this._model) {
            if (this.options.allowCustomValue) {
                jQuery(this._el).on("input", (/**
                 * @param {?} evt
                 * @return {?}
                 */
                function (evt) {
                    that._model.viewToModelUpdate(evt.target.value);
                }));
                jQuery(this._el).closest(".ui-igcombo-wrapper").find(".ui-igcombo-clear").on("click", (/**
                 * @return {?}
                 */
                function () {
                    if (that.options.multiSelection && that.options.multiSelection.enabled) {
                        that._model.viewToModelUpdate([]);
                    }
                    else {
                        that._model.viewToModelUpdate(null);
                    }
                }));
            }
            // D.P. #244 only attach selectionchanged handler if there's a model to update
            jQuery(this._el).on(this._widgetName.toLowerCase() + "selectionchanged", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                /** @type {?} */
                var items = ui.items;
                /** @type {?} */
                var valueKey = ui.owner.options.valueKey;
                if (items.length <= 0 && !ui.owner.options.multiSelection.enabled) {
                    if (!ui.owner.options.allowCustomValue) {
                        that._model.viewToModelUpdate(null);
                    }
                    return;
                }
                if (ui.owner.options.multiSelection.enabled) {
                    that._model.viewToModelUpdate(items.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        return item.data[valueKey];
                    })));
                }
                else {
                    that._model.viewToModelUpdate(items[0].data[valueKey]);
                }
            }));
            //manually call writeValue, because the LifeCycle has been changed and writeValue is executed before ngOnInit
            this.writeValue(this._model.value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgComboComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!!jQuery(this._el).data(this._widgetName)) {
            jQuery(this._el)[this._widgetName]("value", value);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgComboComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgComboComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgComboComponent.prototype.dataSourceApplyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        //dataSource has changed.
        /** @type {?} */
        var element = jQuery(this._el);
        if (element[this._widgetName]) {
            element[this._widgetName]("option", "dataSource", this._dataSource);
        }
        if (this.model && this.model.value) {
            this.writeValue(this.model.value);
        }
    };
    /**
     * @param {?} rec
     * @param {?} val
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    IgComboComponent.prototype.updateComboItem = /**
     * @param {?} rec
     * @param {?} val
     * @param {?} key
     * @param {?} index
     * @return {?}
     */
    function (rec, val, key, index) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var comboItem = element.data("igCombo").itemsFromIndex(index);
        element.data("igCombo")._updateItem(comboItem.element, rec);
        if (element.data("igCombo").isSelected(comboItem.element)) {
            //should update the input
            element.data("igCombo")._updateInputValues(false);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgComboComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var ds = "dataSource";
        if (ds in changes) {
            /** @type {?} */
            var value = changes[ds].currentValue;
            if (value) {
                try {
                    this._differ = this._differs.find(value).create();
                    this._changes = [];
                    for (var i = 0; i < this._dataSource.length; i++) {
                        this._changes.push(this.kvalDiffers.find({}).create());
                    }
                }
                catch (e) {
                    throw new Error("Only binding to arrays is supported.");
                }
            }
        }
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * @return {?}
     */
    IgComboComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._differ) {
            /** @type {?} */
            var changes = this._differ.diff(this._dataSource);
            //check if grid is initialized
            /** @type {?} */
            var combo = jQuery(this._el).data(this._widgetName);
            if (changes && combo) {
                this.dataSourceApplyChanges(changes);
            }
            if (this._changes && combo) {
                //check recs
                for (var i = 0; i < this._dataSource.length; i++) {
                    /** @type {?} */
                    var item = this._dataSource[i];
                    /** @type {?} */
                    var recChanges = this._changes[i].diff(item);
                    if (recChanges) {
                        recChanges.forEachChangedItem((/**
                         * @param {?} change
                         * @return {?}
                         */
                        function (change) {
                            _this.updateComboItem(item, change.currentValue, change.key, i);
                        }));
                    }
                }
            }
        }
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * Performs databinding on the combo box. The [databinding](ui.igcombo#events:dataBinding) and [dataBound](ui.igcombo#events:dataBound) events are always raised.
     */
    /* istanbul ignore next */
    /**
     * Performs databinding on the combo box. The [databinding](ui.igcombo#events:dataBinding) and [dataBound](ui.igcombo#events:dataBound) events are always raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.dataBind = /**
     * Performs databinding on the combo box. The [databinding](ui.igcombo#events:dataBinding) and [dataBound](ui.igcombo#events:dataBound) events are always raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Forces an update of the igCombo value according to the current text in the igCombo input.
     *
     * 				The refresh is primarily intended to be used with [allowCustomValue](ui.igcombo#options:allowCustomValue) set to true.
     * 				The refresh will take the current text and, if no selection is applied, will set it as igCombo value provided that [allowCustomValue](ui.igcombo#options:allowCustomValue) true.
     */
    /* istanbul ignore next */
    /**
     * Forces an update of the igCombo value according to the current text in the igCombo input.
     *
     * 				The refresh is primarily intended to be used with [allowCustomValue](ui.igcombo#options:allowCustomValue) set to true.
     * 				The refresh will take the current text and, if no selection is applied, will set it as igCombo value provided that [allowCustomValue](ui.igcombo#options:allowCustomValue) true.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.refreshValue = /**
     * Forces an update of the igCombo value according to the current text in the igCombo input.
     *
     * 				The refresh is primarily intended to be used with [allowCustomValue](ui.igcombo#options:allowCustomValue) set to true.
     * 				The refresh will take the current text and, if no selection is applied, will set it as igCombo value provided that [allowCustomValue](ui.igcombo#options:allowCustomValue) true.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the associated data of an item by value matching it's [valueKey](ui.igcombo#options:valueKey) property.
     *
     * @param value Value matching the valueKey property of item to be tested if it is selected
     */
    /* istanbul ignore next */
    /**
     * Gets the associated data of an item by value matching it's [valueKey](ui.igcombo#options:valueKey) property.
     *
     * @param {?} value Value matching the valueKey property of item to be tested if it is selected
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.dataForValue = /**
     * Gets the associated data of an item by value matching it's [valueKey](ui.igcombo#options:valueKey) property.
     *
     * @param {?} value Value matching the valueKey property of item to be tested if it is selected
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Gets the associated data of li element in the combo.
     *
     * @param $element jQuery element of item in the drop down list
     */
    /* istanbul ignore next */
    /**
     * Gets the associated data of li element in the combo.
     *
     * @param {?} $element jQuery element of item in the drop down list
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.dataForElement = /**
     * Gets the associated data of li element in the combo.
     *
     * @param {?} $element jQuery element of item in the drop down list
     * @return {?}
     */
    /* istanbul ignore next */
    function ($element) { return; };
    /**
     * Gets object/s containing data and list item in the combo by element/s.
     *
     * @param $element jQuery object with drop down list item element or elements
     */
    /* istanbul ignore next */
    /**
     * Gets object/s containing data and list item in the combo by element/s.
     *
     * @param {?} $element jQuery object with drop down list item element or elements
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.itemsFromElement = /**
     * Gets object/s containing data and list item in the combo by element/s.
     *
     * @param {?} $element jQuery object with drop down list item element or elements
     * @return {?}
     */
    /* istanbul ignore next */
    function ($element) { return; };
    /**
     * Gets object/s containing data and list item in the combo by value/s.
     *
     * @param value Value of item in the drop down list or array with values.
     */
    /* istanbul ignore next */
    /**
     * Gets object/s containing data and list item in the combo by value/s.
     *
     * @param {?} value Value of item in the drop down list or array with values.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.itemsFromValue = /**
     * Gets object/s containing data and list item in the combo by value/s.
     *
     * @param {?} value Value of item in the drop down list or array with values.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Gets object/s containing data and list item in the combo by index/es.
     *
     * @param index Index or array of indexes of items in the drop down list
     */
    /* istanbul ignore next */
    /**
     * Gets object/s containing data and list item in the combo by index/es.
     *
     * @param {?} index Index or array of indexes of items in the drop down list
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.itemsFromIndex = /**
     * Gets object/s containing data and list item in the combo by index/es.
     *
     * @param {?} index Index or array of indexes of items in the drop down list
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Gets array with data and objects representing li elements in combo box.
     */
    /* istanbul ignore next */
    /**
     * Gets array with data and objects representing li elements in combo box.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.items = /**
     * Gets array with data and objects representing li elements in combo box.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets array with objects representing the filtered li elements in combo box.
     */
    /* istanbul ignore next */
    /**
     * Gets array with objects representing the filtered li elements in combo box.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.filteredItems = /**
     * Gets array with objects representing the filtered li elements in combo box.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets array with objects representing selected li elements in combo box.
     */
    /* istanbul ignore next */
    /**
     * Gets array with objects representing selected li elements in combo box.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.selectedItems = /**
     * Gets array with objects representing selected li elements in combo box.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Triggers filtering.
     *
     * @param texts Filter by string, or array of strings.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
     */
    /* istanbul ignore next */
    /**
     * Triggers filtering.
     *
     * @param {?=} texts Filter by string, or array of strings.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.filter = /**
     * Triggers filtering.
     *
     * @param {?=} texts Filter by string, or array of strings.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (texts, event) { return; };
    /**
     * Clears filtering.
     *
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
     */
    /* istanbul ignore next */
    /**
     * Clears filtering.
     *
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.clearFiltering = /**
     * Clears filtering.
     *
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (event) { return; };
    /**
     * Opens the drop-down.
     *
     * @param callback Specifies callback function to be executed when open animation is completed.
     * @param focusCombo Set to false to not focus combo"s text input after the drop down is opened. By default the combo's input is focused.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownOpening](ui.igcombo#events:dropDownOpening) and [dropDownOpened](ui.igcombo#events:dropDownOpened) events.
     */
    /* istanbul ignore next */
    /**
     * Opens the drop-down.
     *
     * @param {?=} callback Specifies callback function to be executed when open animation is completed.
     * @param {?=} focusCombo Set to false to not focus combo"s text input after the drop down is opened. By default the combo's input is focused.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownOpening](ui.igcombo#events:dropDownOpening) and [dropDownOpened](ui.igcombo#events:dropDownOpened) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.openDropDown = /**
     * Opens the drop-down.
     *
     * @param {?=} callback Specifies callback function to be executed when open animation is completed.
     * @param {?=} focusCombo Set to false to not focus combo"s text input after the drop down is opened. By default the combo's input is focused.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownOpening](ui.igcombo#events:dropDownOpening) and [dropDownOpened](ui.igcombo#events:dropDownOpened) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (callback, focusCombo, event) { return; };
    /**
     * Closes the drop down.
     *
     * @param callback Specifies callback function to be executed when close animation is completed.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownClosing](ui.igcombo#events:dropDownClosing) and [dropDownClosed](ui.igcombo#events:dropDownClosed) events.
     */
    /* istanbul ignore next */
    /**
     * Closes the drop down.
     *
     * @param {?=} callback Specifies callback function to be executed when close animation is completed.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownClosing](ui.igcombo#events:dropDownClosing) and [dropDownClosed](ui.igcombo#events:dropDownClosed) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.closeDropDown = /**
     * Closes the drop down.
     *
     * @param {?=} callback Specifies callback function to be executed when close animation is completed.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownClosing](ui.igcombo#events:dropDownClosing) and [dropDownClosed](ui.igcombo#events:dropDownClosed) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (callback, event) { return; };
    /**
     * Clears the input text, resets highlighting, filtering and selection.
     *
     * @param options     Object with set of options controlling the behavior of this api method.
     focusCombo (boolean): Set to true to focus combo after clearing the input.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Clears the input text, resets highlighting, filtering and selection.
     *
     * @param {?=} options     Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after clearing the input.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.clearInput = /**
     * Clears the input text, resets highlighting, filtering and selection.
     *
     * @param {?=} options     Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after clearing the input.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (options, event) { return; };
    /**
     * Verifies whether a specified value is selected.
     *
     * @param value Value matching the [valueKey](ui.igcombo#options:valueKey) property of item to be tested if it is selected
     */
    /* istanbul ignore next */
    /**
     * Verifies whether a specified value is selected.
     *
     * @param {?} value Value matching the [valueKey](ui.igcombo#options:valueKey) property of item to be tested if it is selected
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.isValueSelected = /**
     * Verifies whether a specified value is selected.
     *
     * @param {?} value Value matching the [valueKey](ui.igcombo#options:valueKey) property of item to be tested if it is selected
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Verifies whether the li representing the data source's record at the specified index is selected.
     *
     * @param index Index of data source record
     */
    /* istanbul ignore next */
    /**
     * Verifies whether the li representing the data source's record at the specified index is selected.
     *
     * @param {?} index Index of data source record
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.isIndexSelected = /**
     * Verifies whether the li representing the data source's record at the specified index is selected.
     *
     * @param {?} index Index of data source record
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Selects list item/items from the drop-down list by specified value or array of values. When called witout params will return the value of the selected item or if [multiSelection](ui.igcombo#options:multiSelection) is enabled array of selected values.
     *
     * @param value Value or array of values matching the valueKey property of item/items to be selected
     * @param options Object with set of options controlling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Selects list item/items from the drop-down list by specified value or array of values. When called witout params will return the value of the selected item or if [multiSelection](ui.igcombo#options:multiSelection) is enabled array of selected values.
     *
     * @param {?=} value Value or array of values matching the valueKey property of item/items to be selected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.value = /**
     * Selects list item/items from the drop-down list by specified value or array of values. When called witout params will return the value of the selected item or if [multiSelection](ui.igcombo#options:multiSelection) is enabled array of selected values.
     *
     * @param {?=} value Value or array of values matching the valueKey property of item/items to be selected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value, options, event) { return; };
    /**
     * Selects a list item from the drop-down list.
     *
     * @param $items jQuery object with item or items to be selected.
     * @param options Object with set of options controlling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Selects a list item from the drop-down list.
     *
     * @param {?} $items jQuery object with item or items to be selected.
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.select = /**
     * Selects a list item from the drop-down list.
     *
     * @param {?} $items jQuery object with item or items to be selected.
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function ($items, options, event) { return; };
    /**
     * Gets/Sets selected item/s from the drop-down list by specified index.
     *
     * @param index Index or array of indexes of items to be selected
     * @param options Object with set of options controlling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Gets/Sets selected item/s from the drop-down list by specified index.
     *
     * @param {?=} index Index or array of indexes of items to be selected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.index = /**
     * Gets/Sets selected item/s from the drop-down list by specified index.
     *
     * @param {?=} index Index or array of indexes of items to be selected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, options, event) { return; };
    /**
     * Selects all items from the drop-down list.
     *
     * @param options Object with set of options controlling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Selects all items from the drop-down list.
     *
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.selectAll = /**
     * Selects all items from the drop-down list.
     *
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * closeDropDown (boolean): Set to true to close the drop down list after the selection.
     * focusCombo (boolean): Set to true to focus combo after the selection.
     * keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
     * keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
     * keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
     * keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
     * keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (options, event) { return; };
    /**
     * Deselects a list item from the drop down list by value.
     *
     * @param value Value or array of values matching the [valueKey](ui.igcombo#options:valueKey) property of item/items to be deselected
     * @param options Object with set of options controlling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Deselects a list item from the drop down list by value.
     *
     * @param {?} value Value or array of values matching the [valueKey](ui.igcombo#options:valueKey) property of item/items to be deselected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.deselectByValue = /**
     * Deselects a list item from the drop down list by value.
     *
     * @param {?} value Value or array of values matching the [valueKey](ui.igcombo#options:valueKey) property of item/items to be deselected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value, options, event) { return; };
    /**
     * Deselects a list item from the drop down list.
     *
     * @param $items jQuery object with item or items to be deselected
     * @param options Object with set of options controlling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Deselects a list item from the drop down list.
     *
     * @param {?} $items jQuery object with item or items to be deselected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.deselect = /**
     * Deselects a list item from the drop down list.
     *
     * @param {?} $items jQuery object with item or items to be deselected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function ($items, options, event) { return; };
    /**
     * Deselects a list item from the drop down list by index.
     *
     * @param index Index or array of indexes of items to be selected
     * @param options Object with set of options controlling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Deselects a list item from the drop down list by index.
     *
     * @param {?} index Index or array of indexes of items to be selected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.deselectByIndex = /**
     * Deselects a list item from the drop down list by index.
     *
     * @param {?} index Index or array of indexes of items to be selected
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, options, event) { return; };
    /**
     * Deselects all selected items from the drop down list.
     *
     * @param options Object with set of options controlling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
    * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
    */
    /* istanbul ignore next */
    /**
     * Deselects all selected items from the drop down list.
     *
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.deselectAll = /**
     * Deselects all selected items from the drop down list.
     *
     * @param {?=} options Object with set of options controlling the behavior of this api method.
     * focusCombo (boolean): Set to true to focus combo after the deselection.
     * keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param {?=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
     * @return {?}
     */
    /* istanbul ignore next */
    function (options, event) { return; };
    /**
     * Gets/Sets index of active item in list.
     *
     * @param index New active index for list. In order to clear active item, use -1.
     * @return number|object Returns index of active item in list or -1, if parameter is undefined. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets index of active item in list.
     *
     * @param {?=} index New active index for list. In order to clear active item, use -1.
     * @return {?} number|object Returns index of active item in list or -1, if parameter is undefined. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.activeIndex = /**
     * Gets/Sets index of active item in list.
     *
     * @param {?=} index New active index for list. In order to clear active item, use -1.
     * @return {?} number|object Returns index of active item in list or -1, if parameter is undefined. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Gets/Sets text in text input field.
     *
     * @param text New text value for combo's input field.
     * @return string|object If parameter is undefined, then current text in field is returned. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets text in text input field.
     *
     * @param {?=} text New text value for combo's input field.
     * @return {?} string|object If parameter is undefined, then current text in field is returned. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.text = /**
     * Gets/Sets text in text input field.
     *
     * @param {?=} text New text value for combo's input field.
     * @return {?} string|object If parameter is undefined, then current text in field is returned. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    function (text) { return; };
    /**
     * Gets/Sets scrollTop attribute of html element, which scrolls drop-down list of items.
     *
     * @param value New value for scroll top in list. Note: if list is closed and new value is provided, then openDropDown() is called automatically.
     * @return number|object If parameter is undefined, then scrollTop is returned. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets scrollTop attribute of html element, which scrolls drop-down list of items.
     *
     * @param {?=} value New value for scroll top in list. Note: if list is closed and new value is provided, then openDropDown() is called automatically.
     * @return {?} number|object If parameter is undefined, then scrollTop is returned. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.listScrollTop = /**
     * Gets/Sets scrollTop attribute of html element, which scrolls drop-down list of items.
     *
     * @param {?=} value New value for scroll top in list. Note: if list is closed and new value is provided, then openDropDown() is called automatically.
     * @return {?} number|object If parameter is undefined, then scrollTop is returned. Otherwise, it returns reference to this igCombo.
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Gets jQuery objects representing all rendered list items in the combo drop down list.
     */
    /* istanbul ignore next */
    /**
     * Gets jQuery objects representing all rendered list items in the combo drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.listItems = /**
     * Gets jQuery objects representing all rendered list items in the combo drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets jQuery object of the outer element of the combo.
     */
    /* istanbul ignore next */
    /**
     * Gets jQuery object of the outer element of the combo.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.comboWrapper = /**
     * Gets jQuery object of the outer element of the combo.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets jQuery object of the drop down associated with this combo widget
     */
    /* istanbul ignore next */
    /**
     * Gets jQuery object of the drop down associated with this combo widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.dropDown = /**
     * Gets jQuery object of the drop down associated with this combo widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets jQuery object of the container that holds the list with items.
     */
    /* istanbul ignore next */
    /**
     * Gets jQuery object of the container that holds the list with items.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.list = /**
     * Gets jQuery object of the container that holds the list with items.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets jQuery object of the text input associated with this combo widget.
     */
    /* istanbul ignore next */
    /**
     * Gets jQuery object of the text input associated with this combo widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.textInput = /**
     * Gets jQuery object of the text input associated with this combo widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets jQuery object of the value input associated with this combo widget.
     */
    /* istanbul ignore next */
    /**
     * Gets jQuery object of the value input associated with this combo widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.valueInput = /**
     * Gets jQuery object of the value input associated with this combo widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to [igValidator](ui.igvalidator) used by igCombo.
     *
     * @param destroy Request to destroy validator.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to [igValidator](ui.igvalidator) used by igCombo.
     *
     * @param {?=} destroy Request to destroy validator.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.validator = /**
     * Gets reference to [igValidator](ui.igvalidator) used by igCombo.
     *
     * @param {?=} destroy Request to destroy validator.
     * @return {?}
     */
    /* istanbul ignore next */
    function (destroy) { return; };
    /**
     * Trigger validation.
     */
    /* istanbul ignore next */
    /**
     * Trigger validation.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.validate = /**
     * Trigger validation.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns boolean representing whether the combo drop down list is opened.
     */
    /* istanbul ignore next */
    /**
     * Returns boolean representing whether the combo drop down list is opened.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.dropDownOpened = /**
     * Returns boolean representing whether the combo drop down list is opened.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Repositions drop down under combo input. Has effect only when the drop down is attached to body.
     */
    /* istanbul ignore next */
    /**
     * Repositions drop down under combo input. Has effect only when the drop down is attached to body.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.positionDropDown = /**
     * Repositions drop down under combo input. Has effect only when the drop down is attached to body.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the igCombo widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the igCombo widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgComboComponent.prototype.destroy = /**
     * Destroys the igCombo widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgComboComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-combo",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dropDownWidth", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "responseDataType", "responseContentType", "requestType", "valueKey", "textKey", "itemTemplate", "headerTemplate", "footerTemplate", "inputName", "animationShowDuration", "animationHideDuration", "dropDownAttachedToBody", "filteringType", "filterExprUrlKey", "filteringCondition", "filteringLogic", "noMatchFoundText", "loadOnDemandSettings", "visibleItemsCount", "placeHolder", "mode", "virtualization", "multiSelection", "grouping", "validatorOptions", "highlightMatchesMode", "caseSensitive", "autoSelectFirstMatch", "autoComplete", "allowCustomValue", "closeDropDownOnBlur", "delayInputChangeProcessing", "tabIndex", "dropDownOnFocus", "closeDropDownOnSelect", "selectItemBySpaceKey", "initialSelectedItems", "preventSubmitOnEnter", "format", "suppressKeyboard", "enableClearButton", "dropDownButtonTitle", "clearButtonTitle", "dropDownOrientation"],
                    outputs: ["rendered", "dataBinding", "dataBound", "filtering", "filtered", "itemsRendering", "itemsRendered", "dropDownOpening", "dropDownOpened", "dropDownClosing", "dropDownClosed", "selectionChanging", "selectionChanged"]
                }] }
    ];
    /** @nocollapse */
    IgComboComponent.ctorParameters = function () { return [
        { type: NgModel, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgComboComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgComboComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template Model
 */
var IgEditorBase = /** @class */ (function (_super) {
    __extends(IgEditorBase, _super);
    function IgEditorBase(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
        _this.model = model;
        _this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
        });
        _this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        if (model) {
            model.valueAccessor = _this;
            _this._model = model;
        }
        return _this;
    }
    /**
     * @return {?}
     */
    IgEditorBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        _super.prototype.ngOnInit.call(this);
        if (this._model) {
            jQuery(this._el).on(this._widgetName.toLowerCase() + "valuechanged", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that.onChange(ui.newValue);
            }));
            if (this._widgetName === "igTextEditor") {
                jQuery(this._el).on(this._widgetName.toLowerCase() + "textchanged", (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that.onChange(ui.text);
                }));
            }
            jQuery(this._el).on(this._widgetName.toLowerCase() + "blur", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that.onTouched();
            }));
            //manually call writeValue, because the LifeCycle has been changed and writeValue is executed before ngOnInit
            this.writeValue(this._model.value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgEditorBase.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!!jQuery(this._el).data(this._widgetName) && value !== null) {
            jQuery(this._el)[this._widgetName]("value", value);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgEditorBase.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgEditorBase.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @nocollapse */
    IgEditorBase.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgEditorBase;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgCheckboxEditorComponent = /** @class */ (function (_super) {
    __extends(IgCheckboxEditorComponent, _super);
    function IgCheckboxEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param newValue
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param {?} newValue
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.value = /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param {?} newValue
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * Toggles the state of the checkbox.
     */
    /* istanbul ignore next */
    /**
     * Toggles the state of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.toggle = /**
     * Toggles the state of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param newValue The new input name.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.inputName = /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * Gets the input element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.field = /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.editorContainer = /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets whether the editor has focus.
     */
    /* istanbul ignore next */
    /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.hasFocus = /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param delay The delay before focusing the editor.
     */
    /* istanbul ignore next */
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.setFocus = /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delay) { return; };
    /**
     * Hides the editor.
     */
    /* istanbul ignore next */
    /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.hide = /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows the editor.
     */
    /* istanbul ignore next */
    /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.show = /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.validator = /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     */
    /* istanbul ignore next */
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.validate = /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgCheckboxEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-checkbox-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "checked", "size", "iconClass"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged"]
                }] }
    ];
    /** @nocollapse */
    IgCheckboxEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgCheckboxEditorComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgCurrencyEditorComponent = /** @class */ (function (_super) {
    __extends(IgCurrencyEditorComponent, _super);
    function IgCurrencyEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
     *
     * @param symbol New currency symbol.
     */
    /* istanbul ignore next */
    /**
     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
     *
     * @param {?=} symbol New currency symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.currencySymbol = /**
     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
     *
     * @param {?=} symbol New currency symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function (symbol) { return; };
    /**
     * Gets/Sets editor value.
     *
     * @param newValue New editor value.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number The text to search for.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (number) { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgCurrencyEditorComponent.prototype.getSelectedText = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgCurrencyEditorComponent.prototype.getSelectionStart = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgCurrencyEditorComponent.prototype.getSelectionEnd = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Increments value.
     */
    /* istanbul ignore next */
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.spinUp = /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Decrement value.
     */
    /* istanbul ignore next */
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.spinDown = /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.selectListIndexUp = /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.selectListIndexDown = /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets current regional.
     */
    /* istanbul ignore next */
    /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.getRegionalOption = /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgCurrencyEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-currency-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "negativeSign", "negativePattern", "decimalSeparator", "groupSeparator", "groups", "maxDecimals", "minDecimals", "dataMode", "minValue", "maxValue", "spinDelta", "scientificFormat", "positivePattern", "currencySymbol"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgCurrencyEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgCurrencyEditorComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgDateEditorComponent = /** @class */ (function (_super) {
    __extends(IgDateEditorComponent, _super);
    function IgDateEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets editor value.
     *
     * Note! This option doesn't use the dateInputFormat to extract the date
     *
     * @param newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * Note! This option doesn't use the dateInputFormat to extract the date
     *
     * @param {?=} newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * Note! This option doesn't use the dateInputFormat to extract the date
     *
     * @param {?=} newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     */
    /* istanbul ignore next */
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.getSelectedDate = /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
     *
     * @param date
     */
    /* istanbul ignore next */
    /**
     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
     *
     * @param {?} date
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.selectDate = /**
     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
     *
     * @param {?} date
     * @return {?}
     */
    /* istanbul ignore next */
    function (date) { return; };
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param delta The increase delta.
     */
    /* istanbul ignore next */
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.spinUp = /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param delta The decrease delta.
     */
    /* istanbul ignore next */
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.spinDown = /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Returns a reference to the spin up UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.spinUpButton = /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the spin down UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.spinDownButton = /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDateEditorComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.dropDownButton = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.dropDownContainer = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.dropDownVisible = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.findListItemIndex = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.getSelectedListItem = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.selectedListIndex = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.showDropDown = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDateEditorComponent.prototype.hideDropDown = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    IgDateEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-date-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "inputMask", "dataMode", "unfilledCharsPrompt", "padChar", "emptyChar", "minValue", "maxValue", "dateDisplayFormat", "dateInputFormat", "spinDelta", "limitSpinToCurrentField", "enableUTCDates", "centuryThreshold", "yearShift"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgDateEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgDateEditorComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgDatePickerComponent = /** @class */ (function (_super) {
    __extends(IgDatePickerComponent, _super);
    function IgDatePickerComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdatepicker#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdatepicker#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdatepicker#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdatepicker#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdatepicker#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdatepicker#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the jQuery calendar used as a picker selector
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the jQuery calendar used as a picker selector
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.getCalendar = /**
     * Returns a reference to the jQuery calendar used as a picker selector
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDatePickerComponent.prototype.dropDownContainer = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDatePickerComponent.prototype.findListItemIndex = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDatePickerComponent.prototype.getSelectedListItem = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgDatePickerComponent.prototype.selectedListIndex = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /**
     * Shows the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.showDropDown = /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Hides the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.hideDropDown = /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the calendar button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the calendar button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.dropDownButton = /**
     * Returns a reference to the calendar button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the visibility state of the calendar.
     */
    /* istanbul ignore next */
    /**
     * Returns the visibility state of the calendar.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.dropDownVisible = /**
     * Returns the visibility state of the calendar.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets editor value.
     *
     * Note! This option doesn't use the dateInputFormat to extract the date
     *
     * @param newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * Note! This option doesn't use the dateInputFormat to extract the date
     *
     * @param {?=} newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * Note! This option doesn't use the dateInputFormat to extract the date
     *
     * @param {?=} newValue New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     */
    /* istanbul ignore next */
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.getSelectedDate = /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
     *
     * @param date
     */
    /* istanbul ignore next */
    /**
     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
     *
     * @param {?} date
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.selectDate = /**
     * Sets selected date. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() cannot accept a date object as a new value and getSelectedDate() can be used to replace that functionality.
     *
     * @param {?} date
     * @return {?}
     */
    /* istanbul ignore next */
    function (date) { return; };
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param delta The increase delta.
     */
    /* istanbul ignore next */
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.spinUp = /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param delta The decrease delta.
     */
    /* istanbul ignore next */
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.spinDown = /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Returns a reference to the spin up UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.spinUpButton = /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the spin down UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.spinDownButton = /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDatePickerComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgDatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-date-picker",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "inputMask", "dataMode", "unfilledCharsPrompt", "padChar", "emptyChar", "minValue", "maxValue", "dateDisplayFormat", "dateInputFormat", "spinDelta", "limitSpinToCurrentField", "enableUTCDates", "centuryThreshold", "yearShift", "datepickerOptions"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged", "itemSelected"]
                }] }
    ];
    /** @nocollapse */
    IgDatePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgDatePickerComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgTimePickerComponent = /** @class */ (function (_super) {
    __extends(IgTimePickerComponent, _super);
    function IgTimePickerComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Gets the selected list item.
     */
    /* istanbul ignore next */
    /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.getSelectedListItem = /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the visibility state of the calendar.
     */
    /* istanbul ignore next */
    /**
     * Returns the visibility state of the calendar.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.dropDownVisible = /**
     * Returns the visibility state of the calendar.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.dropDownButton = /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.dropDownContainer = /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param text The text to search for in the drop down list.
     * @param matchType The rule that is applied for searching the text.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text, matchType) { return; };
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param index The index of the item that needs to be selected.
     */
    /* istanbul ignore next */
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.selectedListIndex = /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @param {?} newValue
     * @return {?}
     */
    IgTimePickerComponent.prototype.value = /* istanbul ignore next */
    /**
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgTimePickerComponent.prototype.selectDate = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     */
    /* istanbul ignore next */
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.getSelectedDate = /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param delta The increase delta.
     */
    /* istanbul ignore next */
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinUp = /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param delta The decrease delta.
     */
    /* istanbul ignore next */
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinDown = /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Returns a reference to the spin up UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinUpButton = /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the spin down UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinDownButton = /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgTimePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-time-picker",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "disabled", "create", "locale", "language", "regional", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "suppressNotifications", "suppressKeyboard", "inputMask", "dataMode", "unfilledCharsPrompt", "padChar", "emptyChar", "minValue", "maxValue", "dateDisplayFormat", "dateInputFormat", "displayTimeOffset", "spinDelta", "limitSpinToCurrentField", "enableUTCDates", "centuryThreshold", "yearShift", "itemsDelta", "timeInputFormat", "timeDisplayFormat"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgTimePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgTimePickerComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgMaskEditorComponent = /** @class */ (function (_super) {
    __extends(IgMaskEditorComponent, _super);
    function IgMaskEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Gets/Sets mask editor value.
     *
     * @param newValue New mask editor value.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets mask editor value.
     *
     * @param {?=} newValue New mask editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.value = /**
     * Gets/Sets mask editor value.
     *
     * @param {?=} newValue New mask editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.dropDownContainer = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.showDropDown = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.hideDropDown = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.dropDownButton = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.spinUpButton = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.spinDownButton = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.dropDownVisible = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.findListItemIndex = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.selectedListIndex = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.getSelectedListItem = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.spinUp = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgMaskEditorComponent.prototype.spinDown = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.changeLocale = /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the visible text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.displayValue = /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the clear button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.clearButton = /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     */
    /* istanbul ignore next */
    /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.getSelectedText = /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the start index of the selected text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the start index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.getSelectionStart = /**
     * Gets the start index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the end index of the selected text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the end index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.getSelectionEnd = /**
     * Gets the end index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param string The string to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.insert = /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (string) { return; };
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param start Start of the selection.
     * @param end End of the selection.
     */
    /* istanbul ignore next */
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMaskEditorComponent.prototype.select = /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (start, end) { return; };
    IgMaskEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-mask-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "inputMask", "dataMode", "unfilledCharsPrompt", "padChar", "emptyChar"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgMaskEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgMaskEditorComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgNumericEditorComponent = /** @class */ (function (_super) {
    __extends(IgNumericEditorComponent, _super);
    function IgNumericEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Gets/Sets editor value.
     *
     * @param newValue New editor value.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number The text to search for.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (number) { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgNumericEditorComponent.prototype.getSelectedText = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgNumericEditorComponent.prototype.getSelectionStart = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgNumericEditorComponent.prototype.getSelectionEnd = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Increments value.
     */
    /* istanbul ignore next */
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinUp = /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Decrement value.
     */
    /* istanbul ignore next */
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinDown = /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.selectListIndexUp = /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.selectListIndexDown = /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets current regional.
     */
    /* istanbul ignore next */
    /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.getRegionalOption = /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.changeLocale = /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the visible text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.displayValue = /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.dropDownContainer = /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.showDropDown = /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Hides the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.hideDropDown = /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.dropDownButton = /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns if the drop-down list is visible.
     */
    /* istanbul ignore next */
    /**
     * Returns if the drop-down list is visible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.dropDownVisible = /**
     * Returns if the drop-down list is visible.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the clear button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.clearButton = /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param index The index of the item that needs to be selected.
     */
    /* istanbul ignore next */
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.selectedListIndex = /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Gets the selected list item.
     */
    /* istanbul ignore next */
    /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.getSelectedListItem = /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param string The string to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.insert = /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (string) { return; };
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param start Start of the selection.
     * @param end End of the selection.
     */
    /* istanbul ignore next */
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.select = /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (start, end) { return; };
    /**
     * Returns a reference to the spin up UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinUpButton = /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the spin down UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinDownButton = /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgNumericEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-numeric-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "negativeSign", "negativePattern", "decimalSeparator", "groupSeparator", "groups", "maxDecimals", "minDecimals", "dataMode", "minValue", "maxValue", "spinDelta", "scientificFormat"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgNumericEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgNumericEditorComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgPercentEditorComponent = /** @class */ (function (_super) {
    __extends(IgPercentEditorComponent, _super);
    function IgPercentEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
     *
     * @param string The string to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.insert = /**
     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (string) { return; };
    /**
     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
     *
     * @param symbol New percent symbol.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
     *
     * @param {?=} symbol New percent symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.percentSymbol = /**
     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
     *
     * @param {?=} symbol New percent symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function (symbol) { return; };
    /**
     * Gets/Sets editor value.
     *
     * @param newValue New editor value.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number The text to search for.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (number) { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgPercentEditorComponent.prototype.getSelectedText = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgPercentEditorComponent.prototype.getSelectionStart = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgPercentEditorComponent.prototype.getSelectionEnd = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Increments value.
     */
    /* istanbul ignore next */
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.spinUp = /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Decrement value.
     */
    /* istanbul ignore next */
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.spinDown = /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.selectListIndexUp = /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.selectListIndexDown = /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets current regional.
     */
    /* istanbul ignore next */
    /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.getRegionalOption = /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgPercentEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-percent-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "negativeSign", "negativePattern", "decimalSeparator", "groupSeparator", "groups", "maxDecimals", "minDecimals", "dataMode", "minValue", "maxValue", "spinDelta", "scientificFormat", "positivePattern", "percentSymbol", "displayFactor"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgPercentEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgPercentEditorComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgTextEditorComponent = /** @class */ (function (_super) {
    __extends(IgTextEditorComponent, _super);
    function IgTextEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.changeLocale = /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the visible text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.displayValue = /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.dropDownContainer = /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.showDropDown = /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Hides the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.hideDropDown = /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.dropDownButton = /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns if the drop-down list is visible.
     */
    /* istanbul ignore next */
    /**
     * Returns if the drop-down list is visible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.dropDownVisible = /**
     * Returns if the drop-down list is visible.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the clear button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.clearButton = /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param text The text to search for in the drop down list.
     * @param matchType The rule that is applied for searching the text.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text, matchType) { return; };
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param index The index of the item that needs to be selected.
     */
    /* istanbul ignore next */
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.selectedListIndex = /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Gets the selected list item.
     */
    /* istanbul ignore next */
    /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.getSelectedListItem = /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     */
    /* istanbul ignore next */
    /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.getSelectedText = /**
     * Gets the selected text from the editor in edit mode. This can be done inside key event handlers, like keydown or keyup. This method can be used only when the editor is focused. If you invoke this method in display mode, when the editor input is blurred, the returned value will be an empty string.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the start index of the selected text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the start index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.getSelectionStart = /**
     * Gets the start index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the end index of the selected text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the end index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.getSelectionEnd = /**
     * Gets the end index of the selected text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param string The string to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.insert = /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (string) { return; };
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param start Start of the selection.
     * @param end End of the selection.
     */
    /* istanbul ignore next */
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.select = /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (start, end) { return; };
    /**
     * Selects the previous item from the drop-down list.
     */
    /* istanbul ignore next */
    /**
     * Selects the previous item from the drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.spinUp = /**
     * Selects the previous item from the drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Selects the next item from the drop-down list.
     */
    /* istanbul ignore next */
    /**
     * Selects the next item from the drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.spinDown = /**
     * Selects the next item from the drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the spin up UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.spinUpButton = /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a reference to the spin down UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.spinDownButton = /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param newValue The new input name.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.inputName = /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    /**
     * @param {?} newValue
     * @return {?}
     */
    IgTextEditorComponent.prototype.value = /**
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) { return; };
    /**
     * Gets the input element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.field = /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.editorContainer = /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets whether the editor has focus.
     */
    /* istanbul ignore next */
    /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.hasFocus = /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param delay The delay before focusing the editor.
     */
    /* istanbul ignore next */
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.setFocus = /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delay) { return; };
    /**
     * Hides the editor.
     */
    /* istanbul ignore next */
    /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.hide = /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows the editor.
     */
    /* istanbul ignore next */
    /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.show = /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.validator = /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     */
    /* istanbul ignore next */
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.validate = /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgTextEditorComponent.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgTextEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-text-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgTextEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgTextEditorComponent;
}(IgEditorBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgTreeComponent = /** @class */ (function (_super) {
    __extends(IgTreeComponent, _super);
    function IgTreeComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgTreeComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgTreeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgTreeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var ds = "dataSource";
        //const options = "options";
        if (ds in changes) {
            /** @type {?} */
            var value = changes[ds].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create();
                    this._changes = [];
                    for (var i = 0; i < this._dataSource.length; i++) {
                        this._changes.push(this.kvalDiffers.find({}).create());
                    }
                }
                catch (e) {
                    throw new Error("Only binding to arrays is supported.");
                }
            }
        }
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * @return {?}
     */
    IgTreeComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._differ) {
            /** @type {?} */
            var changes = this._differ.diff(this._dataSource);
            //check if grid is initialized
            /** @type {?} */
            var elem = jQuery(this._el).data(this._widgetName);
            if (changes && elem) {
                this.dataSourceApplyChanges(changes);
            }
            if (this._changes && elem) {
                //check recs
                for (var i = 0; i < this._dataSource.length; i++) {
                    /** @type {?} */
                    var item = this._dataSource[i];
                    /** @type {?} */
                    var rowChanges = this._changes[i].diff(item);
                    if (rowChanges) {
                        rowChanges.forEachChangedItem((/**
                         * @param {?} change
                         * @return {?}
                         */
                        function (change) {
                            _this.updateItem(item, change.currentValue, change.key);
                        }));
                    }
                }
            }
        }
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    IgTreeComponent.prototype.addItem = /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (item, index) {
        this.dataBind();
        this._changes.push(this.kvalDiffers.find({}).create());
    };
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    IgTreeComponent.prototype.deleteItem = /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (item, index) {
        this.dataBind();
        this._changes.splice(index, 1);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgTreeComponent.prototype.dataSourceApplyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return _this.addItem(r.item, r.currentIndex); }));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { _this.deleteItem(r.item, r.previousIndex); }));
    };
    /**
     * @param {?} item
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    IgTreeComponent.prototype.updateItem = /**
     * @param {?} item
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    function (item, value, key) {
        this.dataBind();
    };
    /**
     * @return {?}
     */
    IgTreeComponent.prototype.markForCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.markForCheck.call(this);
        /** @type {?} */
        var bindings = this["bindings"] || this.options.bindings;
        if (bindings && bindings.childDataProperty) {
            this.dataBind();
        }
    };
    // optionChange(options?) {
    // 	var opts = options || jQuery.extend(true, {}, this._config);
    // 	// Bindings are modified internally by the tree. Excluding them from the change detection
    // 	if (opts.bindings) {
    // 		delete opts.bindings;
    // 	}
    // 	super.optionChange(opts);
    // }
    /**
     * Performs databinding on the igTree.
     */
    /* istanbul ignore next */
    // optionChange(options?) {
    // 	var opts = options || jQuery.extend(true, {}, this._config);
    // 	// Bindings are modified internally by the tree. Excluding them from the change detection
    // 	if (opts.bindings) {
    // 		delete opts.bindings;
    // 	}
    // 	super.optionChange(opts);
    // }
    /**
     * Performs databinding on the igTree.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.dataBind = 
    // optionChange(options?) {
    // 	var opts = options || jQuery.extend(true, {}, this._config);
    // 	// Bindings are modified internally by the tree. Excluding them from the change detection
    // 	if (opts.bindings) {
    // 		delete opts.bindings;
    // 	}
    // 	super.optionChange(opts);
    // }
    /**
     * Performs databinding on the igTree.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param node     Specifies the node element the checkbox of which would be toggled.
     * @param event     Indicates the browser event which triggered this action, if this is not an API call.
     */
    /* istanbul ignore next */
    /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.toggleCheckstate = /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, event) { return; };
    /**
     * Toggles the collapse/expand state for the specified node.
     *
     * @param node     Specifies the node element the checkbox of which would be toggled.
     * @param event     Indicates the browser event which triggered this action, if this is not an API call.
     */
    /* istanbul ignore next */
    /**
     * Toggles the collapse/expand state for the specified node.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.toggle = /**
     * Toggles the collapse/expand state for the specified node.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, event) { return; };
    /**
     * Expands the tree down to the specified node and selects the node if specified.
     *
     * @param node     Specifies the node element down to which the tree would be expanded.
     * @param toSelect     Specifies the whether to select the node after expanding to it.
     */
    /* istanbul ignore next */
    /**
     * Expands the tree down to the specified node and selects the node if specified.
     *
     * @param {?} node     Specifies the node element down to which the tree would be expanded.
     * @param {?=} toSelect     Specifies the whether to select the node after expanding to it.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.expandToNode = /**
     * Expands the tree down to the specified node and selects the node if specified.
     *
     * @param {?} node     Specifies the node element down to which the tree would be expanded.
     * @param {?=} toSelect     Specifies the whether to select the node after expanding to it.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, toSelect) { return; };
    /**
     * Expands the specified node.
     *
     * @param node     Specifies the node element to expand.
     */
    /* istanbul ignore next */
    /**
     * Expands the specified node.
     *
     * @param {?} node     Specifies the node element to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.expand = /**
     * Expands the specified node.
     *
     * @param {?} node     Specifies the node element to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Collapses the specified node.
     *
     * @param node     Specifies the node element to collapse.
     */
    /* istanbul ignore next */
    /**
     * Collapses the specified node.
     *
     * @param {?} node     Specifies the node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.collapse = /**
     * Collapses the specified node.
     *
     * @param {?} node     Specifies the node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Retrieves the parent node element of the specified node element.
     *
     * @param node     Specifies the jQuery selected node element to collapse.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the parent node element of the specified node element.
     *
     * @param {?} node     Specifies the jQuery selected node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.parentNode = /**
     * Retrieves the parent node element of the specified node element.
     *
     * @param {?} node     Specifies the jQuery selected node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param nodePath     Specifies the path to the required node.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param {?} nodePath     Specifies the path to the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeByPath = /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param {?} nodePath     Specifies the path to the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    function (nodePath) { return; };
    /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param value     Specifies the value of the required node.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param {?} value     Specifies the value of the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodesByValue = /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param {?} value     Specifies the value of the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes checked.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes checked.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.checkedNodes = /**
     * Retrieves all the node objects for the nodes that have their checkboxes checked.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.uncheckedNodes = /**
     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.partiallyCheckedNodes = /**
     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Selects a node.
     *
     * @param node     Specifies the node element to be selected.
     * @param event     Indicates the browser event which triggered this action, if this is not an API call.
     */
    /* istanbul ignore next */
    /**
     * Selects a node.
     *
     * @param {?} node     Specifies the node element to be selected.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.select = /**
     * Selects a node.
     *
     * @param {?} node     Specifies the node element to be selected.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, event) { return; };
    /**
     * Deselects the specified node.
     *
     * @param node     Specifies the node element to be deselected.
     */
    /* istanbul ignore next */
    /**
     * Deselects the specified node.
     *
     * @param {?} node     Specifies the node element to be deselected.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.deselect = /**
     * Deselects the specified node.
     *
     * @param {?} node     Specifies the node element to be deselected.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Deselects all the selected nodes.
     */
    /* istanbul ignore next */
    /**
     * Deselects all the selected nodes.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.clearSelection = /**
     * Deselects all the selected nodes.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Retrieves the node object for the selected node.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the node object for the selected node.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.selectedNode = /**
     * Retrieves the node object for the selected node.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param text     The text to search for.
     * @param parent     The node element to start the search from. If not specified then search would start from the root of the tree.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element to start the search from. If not specified then search would start from the root of the tree.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.findNodesByText = /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element to start the search from. If not specified then search would start from the root of the tree.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text, parent) { return; };
    /**
     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param text     The text to search for.
     * @param parent     The node element the children of which would be searched.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element the children of which would be searched.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.findImmediateNodesByText = /**
     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element the children of which would be searched.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text, parent) { return; };
    /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param index     Specifies the index the node at which to be retrieved.
     * @param parent     The parent node element to start the search from.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param {?} index     Specifies the index the node at which to be retrieved.
     * @param {?=} parent     The parent node element to start the search from.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeByIndex = /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param {?} index     Specifies the index the node at which to be retrieved.
     * @param {?=} parent     The parent node element to start the search from.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, parent) { return; };
    /**
     * Retrieves a node object for the specified node element.
     *
     * @param element     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Retrieves a node object for the specified node element.
     *
     * @param {?} element     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeFromElement = /**
     * Retrieves a node object for the specified node element.
     *
     * @param {?} element     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (element) { return; };
    /**
     * Retrieves a node object collection of the immediate children of the provided node element.
     *
     * @param parent     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Retrieves a node object collection of the immediate children of the provided node element.
     *
     * @param {?} parent     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.children = /**
     * Retrieves a node object collection of the immediate children of the provided node element.
     *
     * @param {?} parent     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (parent) { return; };
    /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param path     Specifies the path of the node the children of which are to be retrieved.
     */
    /* istanbul ignore next */
    /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param {?} path     Specifies the path of the node the children of which are to be retrieved.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.childrenByPath = /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param {?} path     Specifies the path of the node the children of which are to be retrieved.
     * @return {?}
     */
    /* istanbul ignore next */
    function (path) { return; };
    /**
     * Returns true if the provided node element is selected and false otherwise.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the provided node element is selected and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.isSelected = /**
     * Returns true if the provided node element is selected and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Returns true if the provided node element is expanded and false otherwise.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the provided node element is expanded and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.isExpanded = /**
     * Returns true if the provided node element is expanded and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.isChecked = /**
     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Returns the specified node checkstate.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns the specified node checkstate.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.checkState = /**
     * Returns the specified node checkstate.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
     *
     * @param node     Specifies the data used to create the new nodeс.
     * @param parent     Specifies the element of the parent node the nodes are to be appended to.
     * @param nodeIndex     Specifies the index at which the nodes to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
     *
     * @param {?} node     Specifies the data used to create the new nodeс.
     * @param {?=} parent     Specifies the element of the parent node the nodes are to be appended to.
     * @param {?=} nodeIndex     Specifies the index at which the nodes to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.addNode = /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
     *
     * @param {?} node     Specifies the data used to create the new nodeс.
     * @param {?=} parent     Specifies the element of the parent node the nodes are to be appended to.
     * @param {?=} nodeIndex     Specifies the index at which the nodes to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, parent, nodeIndex) { return; };
    /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param path     Specifies the path of the node to be removed.
     */
    /* istanbul ignore next */
    /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param {?} path     Specifies the path of the node to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.removeAt = /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param {?} path     Specifies the path of the node to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (path) { return; };
    /**
     * Removing all the nodes with the specified value.
     *
     * @param value     Specifies the value of the nodes to be removed.
     */
    /* istanbul ignore next */
    /**
     * Removing all the nodes with the specified value.
     *
     * @param {?} value     Specifies the value of the nodes to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.removeNodesByValue = /**
     * Removing all the nodes with the specified value.
     *
     * @param {?} value     Specifies the value of the nodes to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Performs a UI update on the provided node element with the provided data.
     *
     * @param element     Specifies the node to be updated.
     * @param data     Specifies the new data item the node would update according to.
     */
    /* istanbul ignore next */
    /**
     * Performs a UI update on the provided node element with the provided data.
     *
     * @param {?} element     Specifies the node to be updated.
     * @param {?} data     Specifies the new data item the node would update according to.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.applyChangesToNode = /**
     * Performs a UI update on the provided node element with the provided data.
     *
     * @param {?} element     Specifies the node to be updated.
     * @param {?} data     Specifies the new data item the node would update according to.
     * @return {?}
     */
    /* istanbul ignore next */
    function (element, data) { return; };
    /**
     * Returns the transaction log stack.
     */
    /* istanbul ignore next */
    /**
     * Returns the transaction log stack.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.transactionLog = /**
     * Returns the transaction log stack.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the data for the node with specified path.
     *
     * @param path     Specifies the node path for which the data is returned.
     */
    /* istanbul ignore next */
    /**
     * Returns the data for the node with specified path.
     *
     * @param {?} path     Specifies the node path for which the data is returned.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeDataFor = /**
     * Returns the data for the node with specified path.
     *
     * @param {?} path     Specifies the node path for which the data is returned.
     * @return {?}
     */
    /* istanbul ignore next */
    function (path) { return; };
    /**
     * Destructor for the igTree widget.
     */
    /* istanbul ignore next */
    /**
     * Destructor for the igTree widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.destroy = /**
     * Destructor for the igTree widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgTreeComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-tree",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "checkboxMode", "singleBranchExpand", "hotTracking", "parentNodeImageUrl", "parentNodeImageClass", "parentNodeImageTooltip", "leafNodeImageUrl", "leafNodeImageClass", "leafNodeImageTooltip", "animationDuration", "pathSeparator", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "responseDataType", "requestType", "responseContentType", "initialExpandDepth", "loadOnDemand", "bindings", "defaultNodeTarget", "dragAndDrop", "updateUrl", "dragAndDropSettings"],
                    outputs: ["dataBinding", "dataBound", "rendering", "rendered", "selectionChanging", "selectionChanged", "nodeCheckstateChanging", "nodeCheckstateChanged", "nodePopulating", "nodePopulated", "nodeCollapsing", "nodeCollapsed", "nodeExpanding", "nodeExpanded", "nodeClick", "nodeDoubleClick", "dragStart", "drag", "dragStop", "nodeDropping", "nodeDropped"]
                }] }
    ];
    /** @nocollapse */
    IgTreeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgTreeComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgTreeComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template Model
 */
var  /**
 * @template Model
 */
IgContentControlBase = /** @class */ (function (_super) {
    __extends(IgContentControlBase, _super);
    function IgContentControlBase(el, renderer, differs, kvalDiffers, cdr) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
        _this.childNodes = el.nativeElement.childNodes;
        return _this;
    }
    /**
     * @return {?}
     */
    IgContentControlBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        jQuery(this._el).append(this.childNodes);
        _super.prototype.ngOnInit.call(this);
    };
    return IgContentControlBase;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgDialogComponent = /** @class */ (function (_super) {
    __extends(IgDialogComponent, _super);
    function IgDialogComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Destroys the igDialog and moves the target element to its original parent.
     */
    /* istanbul ignore next */
    /**
     * Destroys the igDialog and moves the target element to its original parent.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.destroy = /**
     * Destroys the igDialog and moves the target element to its original parent.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets the state of the editor.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     *
     * @param state     New state.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets the state of the editor.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     *
     * @param {?=} state     New state.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.state = /**
     * Gets/Sets the state of the editor.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     *
     * @param {?=} state     New state.
     * @return {?}
     */
    /* istanbul ignore next */
    function (state) { return; };
    /**
     * Gets reference to the dynamically created DIV element which represents the dialog.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the dynamically created DIV element which represents the dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.mainElement = /**
     * Gets reference to the dynamically created DIV element which represents the dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Closes the dialog if it is opened.
     * 				Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog.
     * 				It means that method "open" will open the dialog and keep previous minimized or maximized state.
     *
     * @param e     Browser event: internal use only.
     */
    /* istanbul ignore next */
    /**
     * Closes the dialog if it is opened.
     * 				Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog.
     * 				It means that method "open" will open the dialog and keep previous minimized or maximized state.
     *
     * @param {?=} e     Browser event: internal use only.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.close = /**
     * Closes the dialog if it is opened.
     * 				Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog.
     * 				It means that method "open" will open the dialog and keep previous minimized or maximized state.
     *
     * @param {?=} e     Browser event: internal use only.
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    /**
     * Opens the dialog if it is closed. Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
     */
    /* istanbul ignore next */
    /**
     * Opens the dialog if it is closed. Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.open = /**
     * Opens the dialog if it is closed. Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Minimizes the dialog if it is not minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Minimizes the dialog if it is not minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.minimize = /**
     * Minimizes the dialog if it is not minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Maximizes the dialog if it is not maximized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Maximizes the dialog if it is not maximized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.maximize = /**
     * Maximizes the dialog if it is not maximized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets the normal state for the dialog if it was maximized or minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Sets the normal state for the dialog if it was maximized or minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.restore = /**
     * Sets the normal state for the dialog if it was maximized or minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Pins the dialog if it is not pinned.
     * 				When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
     * 				The pinned dialog does not support modal state, maximized state and it can not be moved.
     * 				Notes:
     * 				1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
     * 				2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Pins the dialog if it is not pinned.
     * 				When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
     * 				The pinned dialog does not support modal state, maximized state and it can not be moved.
     * 				Notes:
     * 				1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
     * 				2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.pin = /**
     * Pins the dialog if it is not pinned.
     * 				When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
     * 				The pinned dialog does not support modal state, maximized state and it can not be moved.
     * 				Notes:
     * 				1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
     * 				2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Unpins the dialog if it is pinned.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Unpins the dialog if it is pinned.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.unpin = /**
     * Unpins the dialog if it is pinned.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets a reference to the top modal dialog.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to the top modal dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.getTopModal = /**
     * Gets a reference to the top modal dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Checks if the dialog is modal and if it is currently active.
     */
    /* istanbul ignore next */
    /**
     * Checks if the dialog is modal and if it is currently active.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.isTopModal = /**
     * Checks if the dialog is modal and if it is currently active.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Moves a not modal dialog to the top.
     *
     * @param e     Original event of browser.
     */
    /* istanbul ignore next */
    /**
     * Moves a not modal dialog to the top.
     *
     * @param {?=} e     Original event of browser.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.moveToTop = /**
     * Moves a not modal dialog to the top.
     *
     * @param {?=} e     Original event of browser.
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    /**
     * Retrieves the igDialog content container or sets its content to be the new content provided.
     *
     * @param newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the igDialog content container or sets its content to be the new content provided.
     *
     * @param {?=} newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.content = /**
     * Retrieves the igDialog content container or sets its content to be the new content provided.
     *
     * @param {?=} newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newContent) { return; };
    IgDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-dialog",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "mainElement", "state", "pinned", "closeOnEscape", "showCloseButton", "showMaximizeButton", "showMinimizeButton", "showPinButton", "pinOnMinimized", "imageClass", "headerText", "showHeader", "showFooter", "footerText", "dialogClass", "container", "height", "width", "minHeight", "minWidth", "maxHeight", "maxWidth", "draggable", "position", "resizable", "tabIndex", "openAnimation", "closeAnimation", "zIndex", "modal", "trackFocus", "closeButtonTitle", "minimizeButtonTitle", "maximizeButtonTitle", "pinButtonTitle", "unpinButtonTitle", "restoreButtonTitle", "temporaryUrl", "enableHeaderFocus", "enableDblclick"],
                    outputs: ["stateChanging", "stateChanged", "animationEnded", "focus", "blur"]
                }] }
    ];
    /** @nocollapse */
    IgDialogComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgDialogComponent;
}(IgContentControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgSplitterComponent = /** @class */ (function (_super) {
    __extends(IgSplitterComponent, _super);
    function IgSplitterComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns the element that represents this widget.
     */
    /* istanbul ignore next */
    /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.widget = /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Expand the specified panel by index.
     *
     * @param index Specifies the index of the panel to expand.
     */
    /* istanbul ignore next */
    /**
     * Expand the specified panel by index.
     *
     * @param {?} index Specifies the index of the panel to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.expandAt = /**
     * Expand the specified panel by index.
     *
     * @param {?} index Specifies the index of the panel to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Collapse the specified panel.
     *
     * @param index Specifies the index of the panel to collapse.
     */
    /* istanbul ignore next */
    /**
     * Collapse the specified panel.
     *
     * @param {?} index Specifies the index of the panel to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.collapseAt = /**
     * Collapse the specified panel.
     *
     * @param {?} index Specifies the index of the panel to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Retrieves the jQuery element of the first panel.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the jQuery element of the first panel.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.firstPanel = /**
     * Retrieves the jQuery element of the first panel.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Retrieves the jQuery element of the second panel.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the jQuery element of the second panel.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.secondPanel = /**
     * Retrieves the jQuery element of the second panel.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Refresh splitter layout, use this method to re-render the splitter if some changes to the layout are applied.
     */
    /* istanbul ignore next */
    /**
     * Refresh splitter layout, use this method to re-render the splitter if some changes to the layout are applied.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.refreshLayout = /**
     * Refresh splitter layout, use this method to re-render the splitter if some changes to the layout are applied.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * You can set new size of the first panel after the splitter is rendered.
     *
     * @param size Specifies the new size of the first panel.
     */
    /* istanbul ignore next */
    /**
     * You can set new size of the first panel after the splitter is rendered.
     *
     * @param {?} size Specifies the new size of the first panel.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.setFirstPanelSize = /**
     * You can set new size of the first panel after the splitter is rendered.
     *
     * @param {?} size Specifies the new size of the first panel.
     * @return {?}
     */
    /* istanbul ignore next */
    function (size) { return; };
    /**
     * You can set new size of the second panel after the splitter is rendered.
     *
     * @param size Specifies the new size of the second panel.
     */
    /* istanbul ignore next */
    /**
     * You can set new size of the second panel after the splitter is rendered.
     *
     * @param {?} size Specifies the new size of the second panel.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.setSecondPanelSize = /**
     * You can set new size of the second panel after the splitter is rendered.
     *
     * @param {?} size Specifies the new size of the second panel.
     * @return {?}
     */
    /* istanbul ignore next */
    function (size) { return; };
    /**
     * Destroys the igSplitter widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the igSplitter widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitterComponent.prototype.destroy = /**
     * Destroys the igSplitter widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgSplitterComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-splitter",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "orientation", "panels", "dragDelta", "resizeOtherSplitters"],
                    outputs: ["collapsed", "expanded", "resizeStarted", "resizing", "resizeEnded", "layoutRefreshing", "layoutRefreshed"]
                }] }
    ];
    /** @nocollapse */
    IgSplitterComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgSplitterComponent;
}(IgContentControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgLayoutManagerComponent = /** @class */ (function (_super) {
    __extends(IgLayoutManagerComponent, _super);
    function IgLayoutManagerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgLayoutManagerComponent.prototype.reflow = /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (forceReflow, animationDuration, event) { return; };
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                     1. Remove custom CSS classes that were added.
     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     *                     3. Unbind all events that were bound.
     */
    /* istanbul ignore next */
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                     1. Remove custom CSS classes that were added.
     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     *                     3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLayoutManagerComponent.prototype.destroy = /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                     1. Remove custom CSS classes that were added.
     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     *                     3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgLayoutManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-layout-manager",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "borderLayout", "gridLayout", "height", "itemCount", "items", "layoutMode", "width"],
                    outputs: ["internalResized", "internalResizing", "itemRendered", "itemRendering", "rendered"]
                }] }
    ];
    /** @nocollapse */
    IgLayoutManagerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgLayoutManagerComponent;
}(IgContentControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgTileManagerComponent = /** @class */ (function (_super) {
    __extends(IgTileManagerComponent, _super);
    function IgTileManagerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgTileManagerComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var widget = jQuery(this._el).data(this._widgetName);
            if (widget) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgTileManagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Maximizes a given tile.
     *
     * @param $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param animDuration Specifies the animation duration for this maximizing.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Maximizes a given tile.
     *
     * @param {?} $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param {?=} animDuration Specifies the animation duration for this maximizing.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.maximize = /**
     * Maximizes a given tile.
     *
     * @param {?} $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param {?=} animDuration Specifies the animation duration for this maximizing.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function ($tileToMaximize, animDuration, event) { return; };
    /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param animDuration Specifies the animation duration for this minimize.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param {?=} animDuration Specifies the animation duration for this minimize.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.minimize = /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param {?=} animDuration Specifies the animation duration for this minimize.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (animDuration, event) { return; };
    /**
     * Returns the maximized tile or null if such is not present.
     * @return object|null Returns the maximized tile or null if such is not present.
     */
    /* istanbul ignore next */
    /**
     * Returns the maximized tile or null if such is not present.
     * @return {?} object|null Returns the maximized tile or null if such is not present.
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.maximizedTile = /**
     * Returns the maximized tile or null if such is not present.
     * @return {?} object|null Returns the maximized tile or null if such is not present.
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * @return object|null Returns an array with the tiles in minimized state or null if such are not present.
     */
    /* istanbul ignore next */
    /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * @return {?} object|null Returns an array with the tiles in minimized state or null if such are not present.
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.minimizedTiles = /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * @return {?} object|null Returns an array with the tiles in minimized state or null if such are not present.
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the splitter associated with this tile manager or
     *                 null if the tile manager was instantiated with maximizedTileIndex.
     * @return object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
     */
    /* istanbul ignore next */
    /**
     * Returns the splitter associated with this tile manager or
     *                 null if the tile manager was instantiated with maximizedTileIndex.
     * @return {?} object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.splitter = /**
     * Returns the splitter associated with this tile manager or
     *                 null if the tile manager was instantiated with maximizedTileIndex.
     * @return {?} object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
     */
    /* istanbul ignore next */
    /**
     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.layoutManager = /**
     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param animationDuration The animation duration to be used for this reflow only.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.reflow = /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (forceReflow, animationDuration, event) { return; };
    /**
     * Returns the element that represents this widget.
     */
    /* istanbul ignore next */
    /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.widget = /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
     */
    /* istanbul ignore next */
    /**
     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.dataBind = /**
     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
     */
    /* istanbul ignore next */
    /**
     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.destroy = /**
     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgTileManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-tile-manager",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "columnWidth", "columnHeight", "cols", "rows", "marginLeft", "marginTop", "rearrangeItems", "items", "dataSource", "minimizedState", "maximizedState", "maximizedTileIndex", "rightPanelCols", "rightPanelTilesWidth", "rightPanelTilesHeight", "showRightPanelScroll", "splitterOptions", "preventMaximizingSelector", "animationDuration", "dataSourceUrl", "responseDataKey", "responseDataType", "dataSourceType", "requestType", "responseContentType"],
                    outputs: ["dataBinding", "dataBound", "rendering", "rendered", "tileRendering", "tileRendered", "tileMaximizing", "tileMaximized", "tileMinimizing", "tileMinimized"]
                }] }
    ];
    /** @nocollapse */
    IgTileManagerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgTileManagerComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgTileManagerComponent;
}(IgContentControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgHtmlEditorComponent = /** @class */ (function (_super) {
    __extends(IgHtmlEditorComponent, _super);
    function IgHtmlEditorComponent(el, renderer, differs, model, zone, kvalDiffers, cdr) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
        _this.model = model;
        _this.zone = zone;
        _this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
        });
        _this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        if (model) {
            model.valueAccessor = _this;
            _this._zone = zone;
            _this._model = model;
        }
        return _this;
    }
    /**
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        /** @type {?} */
        var that = this;
        if (this._model) {
            /** @type {?} */
            var iframe = jQuery(this._el).find("iframe")[0].contentWindow.document;
            jQuery(iframe).find("body[contenteditable=true]").on("keyup", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that._model.viewToModelUpdate(jQuery(evt.target).html());
                that._zone.run((/**
                 * @return {?}
                 */
                function () {
                    that._model.viewToModelUpdate(jQuery(evt.target).html());
                }));
            }));
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!!jQuery(this._el).data(this._widgetName) && value !== null && value !== jQuery(this._el)[this._widgetName]("getContent", "html")) {
            jQuery(this._el)[this._widgetName]("setContent", value, "html");
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * Returns the element on which the widget was instantiated
     */
    /* istanbul ignore next */
    /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.widget = /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Resizes the height of the workspace
     */
    /* istanbul ignore next */
    /**
     * Resizes the height of the workspace
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.resizeWorkspace = /**
     * Resizes the height of the workspace
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the content of the html editor.
     *
     * @param format Returns the content as html or plain text. Values can be "text" or "html".
     */
    /* istanbul ignore next */
    /**
     * Gets the content of the html editor.
     *
     * @param {?} format Returns the content as html or plain text. Values can be "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.getContent = /**
     * Gets the content of the html editor.
     *
     * @param {?} format Returns the content as html or plain text. Values can be "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    function (format) { return; };
    /**
     * Sets the content of the html editor.
     *
     * @param content The content which will be set.
     * @param format The content type: "text" or "html".
     */
    /* istanbul ignore next */
    /**
     * Sets the content of the html editor.
     *
     * @param {?} content The content which will be set.
     * @param {?} format The content type: "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.setContent = /**
     * Sets the content of the html editor.
     *
     * @param {?} content The content which will be set.
     * @param {?} format The content type: "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    function (content, format) { return; };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Executes htmleditor commands.
     *
     * @param actionName The command name.
     * @param args Additional parameter for the command.
     */
    /* istanbul ignore next */
    /**
     * Executes htmleditor commands.
     *
     * @param {?} actionName The command name.
     * @param {?=} args Additional parameter for the command.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.executeAction = /**
     * Executes htmleditor commands.
     *
     * @param {?} actionName The command name.
     * @param {?=} args Additional parameter for the command.
     * @return {?}
     */
    /* istanbul ignore next */
    function (actionName, args) { return; };
    /**
     * Returns true/false if the editor contents were modified or not.
     */
    /* istanbul ignore next */
    /**
     * Returns true/false if the editor contents were modified or not.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.isDirty = /**
     * Returns true/false if the editor contents were modified or not.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the window object associated with the Html Editor's content editable area
     */
    /* istanbul ignore next */
    /**
     * Returns the window object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.contentWindow = /**
     * Returns the window object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the document object associated with the Html Editor's content editable area
     */
    /* istanbul ignore next */
    /**
     * Returns the document object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.contentDocument = /**
     * Returns the document object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the content editable associated with this Html Editor
     */
    /* istanbul ignore next */
    /**
     * Returns the content editable associated with this Html Editor
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.contentEditable = /**
     * Returns the content editable associated with this Html Editor
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns Selection object that represent the current selection in the content editable
     */
    /* istanbul ignore next */
    /**
     * Returns Selection object that represent the current selection in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.selection = /**
     * Returns Selection object that represent the current selection in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns Range object that represent the current range in the content editable
     */
    /* istanbul ignore next */
    /**
     * Returns Range object that represent the current range in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.range = /**
     * Returns Range object that represent the current range in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Inserts the provided content at the position of the caret.
     *
     * @param element Accepts html string, DOM element or a jQuery object.
     */
    /* istanbul ignore next */
    /**
     * Inserts the provided content at the position of the caret.
     *
     * @param {?} element Accepts html string, DOM element or a jQuery object.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.insertAtCaret = /**
     * Inserts the provided content at the position of the caret.
     *
     * @param {?} element Accepts html string, DOM element or a jQuery object.
     * @return {?}
     */
    /* istanbul ignore next */
    function (element) { return; };
    IgHtmlEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-html-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "showFormattingToolbar", "showTextToolbar", "showInsertObjectToolbar", "showCopyPasteToolbar", "width", "height", "toolbarSettings", "customToolbars", "inputName", "value"],
                    outputs: ["rendered", "rendering", "actionExecuting", "actionExecuted", "toolbarCollapsing", "toolbarCollapsed", "toolbarExpanding", "toolbarExpanded", "cut", "copy", "paste", "undo", "redo", "workspaceResized"]
                }] }
    ];
    /** @nocollapse */
    IgHtmlEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: NgModel, decorators: [{ type: Optional }] },
        { type: NgZone },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgHtmlEditorComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgValidatorComponent = /** @class */ (function (_super) {
    __extends(IgValidatorComponent, _super);
    function IgValidatorComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgValidatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var evtName;
        this._el = jQuery(document).find("#" + this.widgetId);
        jQuery(this._el)[this._widgetName](this.options);
        this._events = new Map();
        //events binding
        /** @type {?} */
        var that = this;
        for (var propt in jQuery.ui[this._widgetName].prototype.events) {
            evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
            this._events[evtName] = propt;
            jQuery(this._el).on(evtName, (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that[that._events[evt.type]].emit({ event: evt, ui: ui });
            }));
        }
    };
    /**
     * Trigger validation and show errors for invalid fields.
     *
     * @param field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
     */
    /* istanbul ignore next */
    /**
     * Trigger validation and show errors for invalid fields.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.validate = /**
     * Trigger validation and show errors for invalid fields.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Trigger validation but do not display error messages.
     *
     * @param field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
     */
    /* istanbul ignore next */
    /**
     * Trigger validation but do not display error messages.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.isValid = /**
     * Trigger validation but do not display error messages.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Hide any possible message(s) (either messageTarget or igNotifier).
     * 			Note: When the validator has a fields colleciton, not passing a field will hide messages on all fields.
     *
     * @param field    Optional field object, its selector or zero-based index to hide message for.
     */
    /* istanbul ignore next */
    /**
     * Hide any possible message(s) (either messageTarget or igNotifier).
     * 			Note: When the validator has a fields colleciton, not passing a field will hide messages on all fields.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to hide message for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.hide = /**
     * Hide any possible message(s) (either messageTarget or igNotifier).
     * 			Note: When the validator has a fields colleciton, not passing a field will hide messages on all fields.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to hide message for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Gets all current error messages for invalid field(s). Note that this method does not valdiate and states and messages are only updated on validation, so
     * 			this can be used on formValidated event or after validate/isValid method calls.
     *
     * @param field    Optional field object, selector or zero-based index for a single field to get error message for.
     */
    /* istanbul ignore next */
    /**
     * Gets all current error messages for invalid field(s). Note that this method does not valdiate and states and messages are only updated on validation, so
     * 			this can be used on formValidated event or after validate/isValid method calls.
     *
     * @param {?=} field    Optional field object, selector or zero-based index for a single field to get error message for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.getErrorMessages = /**
     * Gets all current error messages for invalid field(s). Note that this method does not valdiate and states and messages are only updated on validation, so
     * 			this can be used on formValidated event or after validate/isValid method calls.
     *
     * @param {?=} field    Optional field object, selector or zero-based index for a single field to get error message for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Check for currently displayed message(s). Takes an optional field.
     * 			Note: When the validator has a fields colleciton, not passing a field will return a cumulative true even if just one field has a visible message.
     *
     * @param field    Optional field object, selector or zero-based index for a single field to get error message for.
     */
    /* istanbul ignore next */
    /**
     * Check for currently displayed message(s). Takes an optional field.
     * 			Note: When the validator has a fields colleciton, not passing a field will return a cumulative true even if just one field has a visible message.
     *
     * @param {?=} field    Optional field object, selector or zero-based index for a single field to get error message for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.isMessageDisplayed = /**
     * Check for currently displayed message(s). Takes an optional field.
     * 			Note: When the validator has a fields colleciton, not passing a field will return a cumulative true even if just one field has a visible message.
     *
     * @param {?=} field    Optional field object, selector or zero-based index for a single field to get error message for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Gets the notifier for the igValidator or for a single filed.
     *
     * @param field    Optional field object, its selector or zero-based index to get notifier for.
     */
    /* istanbul ignore next */
    /**
     * Gets the notifier for the igValidator or for a single filed.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to get notifier for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.notifier = /**
     * Gets the notifier for the igValidator or for a single filed.
     *
     * @param {?=} field    Optional field object, its selector or zero-based index to get notifier for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Adds an new input to the fields collection and initializes it with the validator. Note: Additional fields are only accepted if the validator has been created with the collection.
     *
     * @param field    An object with the field selector and options.
     */
    /* istanbul ignore next */
    /**
     * Adds an new input to the fields collection and initializes it with the validator. Note: Additional fields are only accepted if the validator has been created with the collection.
     *
     * @param {?} field    An object with the field selector and options.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.addField = /**
     * Adds an new input to the fields collection and initializes it with the validator. Note: Additional fields are only accepted if the validator has been created with the collection.
     *
     * @param {?} field    An object with the field selector and options.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Removes an input from the fields collection.
     *
     * @param field    The field object to remove, its zero-based index or selector.
     */
    /* istanbul ignore next */
    /**
     * Removes an input from the fields collection.
     *
     * @param {?} field    The field object to remove, its zero-based index or selector.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.removeField = /**
     * Removes an input from the fields collection.
     *
     * @param {?} field    The field object to remove, its zero-based index or selector.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field) { return; };
    /**
     * Updates a field in the validator collection. Used to reinitialize field in case a control has been created after the validator or to pass in new options.
     *
     * @param field    The field object to update, its zero-based index or selector.
     * @param fieldOptions    New options to apply to the field.
     */
    /* istanbul ignore next */
    /**
     * Updates a field in the validator collection. Used to reinitialize field in case a control has been created after the validator or to pass in new options.
     *
     * @param {?} field    The field object to update, its zero-based index or selector.
     * @param {?=} fieldOptions    New options to apply to the field.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.updateField = /**
     * Updates a field in the validator collection. Used to reinitialize field in case a control has been created after the validator or to pass in new options.
     *
     * @param {?} field    The field object to update, its zero-based index or selector.
     * @param {?=} fieldOptions    New options to apply to the field.
     * @return {?}
     */
    /* istanbul ignore next */
    function (field, fieldOptions) { return; };
    /**
     * Destroys the validator widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the validator widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgValidatorComponent.prototype.destroy = /**
     * Destroys the validator widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgValidatorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-validator",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "onchange", "onblur", "onsubmit", "required", "number", "date", "email", "lengthRange", "valueRange", "creditCard", "pattern", "messageTarget", "errorMessage", "successMessage", "threshold", "equalTo", "custom", "fields", "notificationOptions", "requiredIndication", "optionalIndication"],
                    outputs: ["validating", "validated", "success", "error", "errorShowing", "errorHiding", "errorShown", "errorHidden", "successShowing", "successHiding", "successShown", "successHidden", "formValidating", "formValidated", "formError", "formSuccess"]
                }] }
    ];
    /** @nocollapse */
    IgValidatorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgValidatorComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgPivotDataSelectorComponent = /** @class */ (function (_super) {
    __extends(IgPivotDataSelectorComponent, _super);
    function IgPivotDataSelectorComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgPivotDataSelectorComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    Object.defineProperty(IgPivotDataSelectorComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var widget = jQuery(this._el).data(this._widgetName);
            if (widget) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgPivotDataSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Updates the data source.
     */
    /* istanbul ignore next */
    /**
     * Updates the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotDataSelectorComponent.prototype.update = /**
     * Updates the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                 1. Remove custom CSS classes that were added.
     *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *                 3. Unbind all events that were bound.
     */
    /* istanbul ignore next */
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                 1. Remove custom CSS classes that were added.
     *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *                 3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotDataSelectorComponent.prototype.destroy = /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                 1. Remove custom CSS classes that were added.
     *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *                 3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgPivotDataSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-pivot-data-selector",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dataSource", "dataSourceOptions", "deferUpdate", "dragAndDropSettings", "dropDownParent", "disableRowsDropArea", "disableColumnsDropArea", "disableMeasuresDropArea", "disableFiltersDropArea", "customMoveValidation"],
                    outputs: ["dataSelectorRendered", "dataSourceInitialized", "dataSourceUpdated", "deferUpdateChanged", "dragStart", "drag", "dragStop", "metadataDropping", "metadataDropped", "metadataRemoving", "metadataRemoved", "filterDropDownOpening", "filterDropDownOpened", "filterMembersLoaded", "filterDropDownOk", "filterDropDownClosing", "filterDropDownClosed"]
                }] }
    ];
    /** @nocollapse */
    IgPivotDataSelectorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgPivotDataSelectorComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgPivotDataSelectorComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgPivotGridComponent = /** @class */ (function (_super) {
    __extends(IgPivotGridComponent, _super);
    function IgPivotGridComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgPivotGridComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    Object.defineProperty(IgPivotGridComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var widget = jQuery(this._el).data(this._widgetName);
            if (widget) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgPivotGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Returns the igGrid instance used to render the OLAP data.
     */
    /* istanbul ignore next */
    /**
     * Returns the igGrid instance used to render the OLAP data.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotGridComponent.prototype.grid = /**
     * Returns the igGrid instance used to render the OLAP data.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Triggers an update on the data source and the igPivotGrid.
     */
    /* istanbul ignore next */
    /**
     * Triggers an update on the data source and the igPivotGrid.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotGridComponent.prototype.updateGrid = /**
     * Triggers an update on the data source and the igPivotGrid.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Expands a member from the data source and returns true if the expand succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.
     */
    /* istanbul ignore next */
    /**
     * Expands a member from the data source and returns true if the expand succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param {?} tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param {?} tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param {?} memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param {?=} shouldUpdate A flag indicating whether the data source should be updated after the expand.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotGridComponent.prototype.expandTupleMember = /**
     * Expands a member from the data source and returns true if the expand succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param {?} tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param {?} tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param {?} memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param {?=} shouldUpdate A flag indicating whether the data source should be updated after the expand.
     * @return {?}
     */
    /* istanbul ignore next */
    function (tupleLocation, tupleIndex, memberIndex, shouldUpdate) { return; };
    /**
     * Collapses a member from the data source and returns true if the collapse succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.
     */
    /* istanbul ignore next */
    /**
     * Collapses a member from the data source and returns true if the collapse succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param {?} tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param {?} tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param {?} memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param {?=} shouldUpdate A flag indicating whether the data source should be updated after the expand.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotGridComponent.prototype.collapseTupleMember = /**
     * Collapses a member from the data source and returns true if the collapse succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param {?} tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param {?} tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param {?} memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param {?=} shouldUpdate A flag indicating whether the data source should be updated after the expand.
     * @return {?}
     */
    /* istanbul ignore next */
    function (tupleLocation, tupleIndex, memberIndex, shouldUpdate) { return; };
    /**
     * Returns an array with the applied sort directions on the igPivotGrid's columns. The returned array contains objects with the following properties:
     *             memberNames: The names of the members in the tuple.
     *             tupleIndex: The index of the tuple on the column axis in the original unsorted result.
     *             sortDirection: The direction of the sort - ascending or descending.
     */
    /* istanbul ignore next */
    /**
     * Returns an array with the applied sort directions on the igPivotGrid's columns. The returned array contains objects with the following properties:
     *             memberNames: The names of the members in the tuple.
     *             tupleIndex: The index of the tuple on the column axis in the original unsorted result.
     *             sortDirection: The direction of the sort - ascending or descending.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotGridComponent.prototype.appliedColumnSortDirections = /**
     * Returns an array with the applied sort directions on the igPivotGrid's columns. The returned array contains objects with the following properties:
     *             memberNames: The names of the members in the tuple.
     *             tupleIndex: The index of the tuple on the column axis in the original unsorted result.
     *             sortDirection: The direction of the sort - ascending or descending.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns an array with the applied level sort direction items, which were used for the sorting of the header cells. The returned array contains objects with the following properties:
     *             levelUniqueName: Specifies the unique name of the level, which was sorted.
     *             sortDirection: The direction of the header sort - ascending or descending.
     */
    /* istanbul ignore next */
    /**
     * Returns an array with the applied level sort direction items, which were used for the sorting of the header cells. The returned array contains objects with the following properties:
     *             levelUniqueName: Specifies the unique name of the level, which was sorted.
     *             sortDirection: The direction of the header sort - ascending or descending.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotGridComponent.prototype.appliedLevelSortDirections = /**
     * Returns an array with the applied level sort direction items, which were used for the sorting of the header cells. The returned array contains objects with the following properties:
     *             levelUniqueName: Specifies the unique name of the level, which was sorted.
     *             sortDirection: The direction of the header sort - ascending or descending.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *             1. Remove custom CSS classes that were added.
     *             2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *             3. Unbind all events that were bound.
     */
    /* istanbul ignore next */
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *             1. Remove custom CSS classes that were added.
     *             2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *             3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotGridComponent.prototype.destroy = /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *             1. Remove custom CSS classes that were added.
     *             2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *             3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgPivotGridComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-pivot-grid",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dataSource", "dataSourceOptions", "deferUpdate", "isParentInFrontForColumns", "isParentInFrontForRows", "compactColumnHeaders", "compactRowHeaders", "rowHeadersLayout", "compactColumnHeaderIndentation", "compactRowHeaderIndentation", "rowHeaderLinkGroupIndentation", "treeRowHeaderIndentation", "defaultRowHeaderWidth", "allowSorting", "firstSortDirection", "allowHeaderRowsSorting", "allowHeaderColumnsSorting", "levelSortDirections", "defaultLevelSortBehavior", "firstLevelSortDirection", "gridOptions", "dragAndDropSettings", "dropDownParent", "disableRowsDropArea", "disableColumnsDropArea", "disableMeasuresDropArea", "disableFiltersDropArea", "hideRowsDropArea", "hideColumnsDropArea", "hideMeasuresDropArea", "hideFiltersDropArea", "customMoveValidation"],
                    outputs: ["dataSourceInitialized", "dataSourceUpdated", "pivotGridHeadersRendered", "pivotGridRendered", "tupleMemberExpanding", "tupleMemberExpanded", "tupleMemberCollapsing", "tupleMemberCollapsed", "sorting", "sorted", "headersSorting", "headersSorted", "dragStart", "drag", "dragStop", "metadataDropping", "metadataDropped", "metadataRemoving", "metadataRemoved", "filterDropDownOpening", "filterDropDownOpened", "filterMembersLoaded", "filterDropDownOk", "filterDropDownClosing", "filterDropDownClosed"]
                }] }
    ];
    /** @nocollapse */
    IgPivotGridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgPivotGridComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgPivotGridComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgDataChartComponent = /** @class */ (function (_super) {
    __extends(IgDataChartComponent, _super);
    function IgDataChartComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgDataChartComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var chart = jQuery(this._el).data(this._widgetName);
            if (chart) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgDataChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @return {?}
     */
    IgDataChartComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    /**
     * Returns the element holding the chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.widget = /**
     * Returns the element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the ID of parent element holding the chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of parent element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.id = /**
     * Returns the ID of parent element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Exports the chart to a PNG image.
     *
     * @param width     The width of the image.
     * @param height     The height of the image.
     */
    /* istanbul ignore next */
    /**
     * Exports the chart to a PNG image.
     *
     * @param {?=} width     The width of the image.
     * @param {?=} height     The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.exportImage = /**
     * Exports the chart to a PNG image.
     *
     * @param {?=} width     The width of the image.
     * @param {?=} height     The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    function (width, height) { return; };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Notify the chart that styles it draws colors from may have been updated.
     */
    /* istanbul ignore next */
    /**
     * Notify the chart that styles it draws colors from may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.styleUpdated = /**
     * Notify the chart that styles it draws colors from may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Resets the zoom level of the chart to default.
     */
    /* istanbul ignore next */
    /**
     * Resets the zoom level of the chart to default.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.resetZoom = /**
     * Resets the zoom level of the chart to default.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param item     The item that we want to add to the data source.
     * @param targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     */
    /* istanbul ignore next */
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param {?} item     The item that we want to add to the data source.
     * @param {?} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.addItem = /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param {?} item     The item that we want to add to the data source.
     * @param {?} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, targetName) { return; };
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param item     the new item that we want to insert in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     * @param targetName     The name of the series or axis bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that we want to insert in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @param {?} targetName     The name of the series or axis bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.insertItem = /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that we want to insert in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @param {?} targetName     The name of the series or axis bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, index, targetName) { return; };
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param index     The index in the data source from where the item will be been removed.
     * @param targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     */
    /* istanbul ignore next */
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @param {?} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.removeItem = /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @param {?} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, targetName) { return; };
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param index     The index of the item in the data source that we want to change.
     * @param item     The new item object that will be set in the data source.
     * @param targetName     The name of the series or axis bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param {?} index     The index of the item in the data source that we want to change.
     * @param {?} item     The new item object that will be set in the data source.
     * @param {?} targetName     The name of the series or axis bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.setItem = /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param {?} index     The index of the item in the data source that we want to change.
     * @param {?} item     The new item object that will be set in the data source.
     * @param {?} targetName     The name of the series or axis bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, item, targetName) { return; };
    /**
     * Notifies the chart that an item has been set in an associated data source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source that has been changed.
     * @param newItem     the new item that has been set in the collection.
     * @param oldItem     the old item that has been overwritten in the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the chart that an item has been set in an associated data source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source that has been changed.
     * @param {?} newItem     the new item that has been set in the collection.
     * @param {?} oldItem     the old item that has been overwritten in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.notifySetItem = /**
     * Notifies the chart that an item has been set in an associated data source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source that has been changed.
     * @param {?} newItem     the new item that has been set in the collection.
     * @param {?} oldItem     the old item that has been overwritten in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, newItem, oldItem) { return; };
    /**
     * Notifies the chart that the items have been cleared from an associated data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     */
    /* istanbul ignore next */
    /**
     * Notifies the chart that the items have been cleared from an associated data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.notifyClearItems = /**
     * Notifies the chart that the items have been cleared from an associated data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource) { return; };
    /**
     * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source where the new item has been inserted.
     * @param newItem     the new item that has been set in the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source where the new item has been inserted.
     * @param {?} newItem     the new item that has been set in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.notifyInsertItem = /**
     * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source where the new item has been inserted.
     * @param {?} newItem     the new item that has been set in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, newItem) { return; };
    /**
     * Notifies the target axis or series that an item has been removed from the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source from where the old item has been removed.
     * @param oldItem     the old item that has been removed from the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target axis or series that an item has been removed from the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source from where the old item has been removed.
     * @param {?} oldItem     the old item that has been removed from the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.notifyRemoveItem = /**
     * Notifies the target axis or series that an item has been removed from the specified index in its data source.
     * 				It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource     The data source in which the change happened.
     * @param {?} index     The index in the items source from where the old item has been removed.
     * @param {?} oldItem     the old item that has been removed from the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, oldItem) { return; };
    /**
     * Notifies the target axis or series that it should scroll the requested data item into view.
     *
     * @param targetName     The name of the axis or series notify.
     * @param item     The data item to bring into view, if possible.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target axis or series that it should scroll the requested data item into view.
     *
     * @param {?} targetName     The name of the axis or series notify.
     * @param {?} item     The data item to bring into view, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.scrollIntoView = /**
     * Notifies the target axis or series that it should scroll the requested data item into view.
     *
     * @param {?} targetName     The name of the axis or series notify.
     * @param {?} item     The data item to bring into view, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, item) { return; };
    /**
     * Notifies the target axis that it should scale the requested value into chart space from axis space.
     * 				For example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.
     *
     * @param targetName     The name of the axis to notify.
     * @param unscaledValue     The value in axis space to translate into chart space.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target axis that it should scale the requested value into chart space from axis space.
     * 				For example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @param {?} unscaledValue     The value in axis space to translate into chart space.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.scaleValue = /**
     * Notifies the target axis that it should scale the requested value into chart space from axis space.
     * 				For example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @param {?} unscaledValue     The value in axis space to translate into chart space.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, unscaledValue) { return; };
    /**
     * Notifies the target axis that it should unscale the requested value into axis space from chart space.
     * 				For example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.
     *
     * @param targetName     The name of the axis to notify.
     * @param scaledValue     The value in chart space to translate into axis space.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target axis that it should unscale the requested value into axis space from chart space.
     * 				For example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @param {?} scaledValue     The value in chart space to translate into axis space.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.unscaleValue = /**
     * Notifies the target axis that it should unscale the requested value into axis space from chart space.
     * 				For example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @param {?} scaledValue     The value in chart space to translate into axis space.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, scaledValue) { return; };
    /**
     * For the target axis, if using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
     *
     * @param targetName     The name of the axis to notify.
     */
    /* istanbul ignore next */
    /**
     * For the target axis, if using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.resetCachedEnhancedInterval = /**
     * For the target axis, if using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
     *
     * @param {?} targetName     The name of the axis to notify.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.
     *
     * @param targetName     The name of the series to notify.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.
     *
     * @param {?} targetName     The name of the series to notify.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.notifyVisualPropertiesChanged = /**
     * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.
     *
     * @param {?} targetName     The name of the series to notify.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Forces any pending deferred work to render on the chart before continuing
     */
    /* istanbul ignore next */
    /**
     * Forces any pending deferred work to render on the chart before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.flush = /**
     * Forces any pending deferred work to render on the chart before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Exports visual data from the chart to aid in unit testing
     */
    /* istanbul ignore next */
    /**
     * Exports visual data from the chart to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.exportVisualData = /**
     * Exports visual data from the chart to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the actual minimum value of the target numeric or date time axis
     *
     * @param targetName    The name of the axis from which to get the minimum value.
     */
    /* istanbul ignore next */
    /**
     * Gets the actual minimum value of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the minimum value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getActualMinimumValue = /**
     * Gets the actual minimum value of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the minimum value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Gets the actual maximum value of the target numeric or date time axis
     *
     * @param targetName    The name of the axis from which to get the maximum value.
     */
    /* istanbul ignore next */
    /**
     * Gets the actual maximum value of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the maximum value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getActualMaximumValue = /**
     * Gets the actual maximum value of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the maximum value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Gets the actual interval of the target numeric or date time axis
     *
     * @param targetName    The name of the axis from which to get the interval.
     */
    /* istanbul ignore next */
    /**
     * Gets the actual interval of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the interval.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getActualInterval = /**
     * Gets the actual interval of the target numeric or date time axis
     *
     * @param {?} targetName    The name of the axis from which to get the interval.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     */
    /* istanbul ignore next */
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.print = /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param targetName     The name of the series to render.
     * @param animate     Whether the change should be animated, if possible.
     */
    /* istanbul ignore next */
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param {?} targetName     The name of the series to render.
     * @param {?} animate     Whether the change should be animated, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.renderSeries = /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param {?} targetName     The name of the series to render.
     * @param {?} animate     Whether the change should be animated, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, animate) { return; };
    /**
     * Gets the item item index associated with the specified world position.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    /* istanbul ignore next */
    /**
     * Gets the item item index associated with the specified world position.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getItemIndex = /**
     * Gets the item item index associated with the specified world position.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint) { return; };
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    /* istanbul ignore next */
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getItem = /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint) { return; };
    /**
     * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
     *
     * @param targetName    The name of the series to target.
     */
    /* istanbul ignore next */
    /**
     * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getItemSpan = /**
     * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValue = /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValueBoundingBox = /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint) { return; };
    /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for the world position provided.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for the world position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValueFineGrainedBoundingBoxes = /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for the world position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint) { return; };
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValuePosition = /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValuePositionFromSeriesPixel = /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValueFromSeriesPixel = /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the given series pixel coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the given series pixel coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValueBoundingBoxFromSeriesPixel = /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the given series pixel coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint) { return; };
    /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for series pixel position provided.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for series pixel position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel = /**
     * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for series pixel position provided.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint) { return; };
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesHighValue = /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesHighValuePosition = /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesHighValuePositionFromSeriesPixel = /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesHighValueFromSeriesPixel = /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesLowValue = /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesLowValuePosition = /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesLowValuePositionFromSeriesPixel = /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    /* istanbul ignore next */
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesLowValueFromSeriesPixel = /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param {?} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param {?} skipUnknowns    If true, unknown values should be skipped.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint, useInterpolation, skipUnknowns) { return; };
    /**
     * Gets the item item index associated with the specified series pixel coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    /* istanbul ignore next */
    /**
     * Gets the item item index associated with the specified series pixel coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getItemIndexFromSeriesPixel = /**
     * Gets the item item index associated with the specified series pixel coordinate.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint) { return; };
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     */
    /* istanbul ignore next */
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getItemFromSeriesPixel = /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint) { return; };
    /**
     * Gets the category offset for a series, if applicable.
     *
     * @param targetName    The name of the series to target.
     */
    /* istanbul ignore next */
    /**
     * Gets the category offset for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesOffsetValue = /**
     * Gets the category offset for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Gets the category width for a series, if applicable.
     *
     * @param targetName    The name of the series to target.
     */
    /* istanbul ignore next */
    /**
     * Gets the category width for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.getSeriesCategoryWidth = /**
     * Gets the category width for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Replays the transition in animation for a series, if applicable.
     *
     * @param targetName    The name of the series to target.
     */
    /* istanbul ignore next */
    /**
     * Replays the transition in animation for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.replayTransitionIn = /**
     * Replays the transition in animation for a series, if applicable.
     *
     * @param {?} targetName    The name of the series to target.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Simulates a hover interaction over a given point in the viewport of a series.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The point at which to hover. Should have an x property with type number and a y property with type number.
     */
    /* istanbul ignore next */
    /**
     * Simulates a hover interaction over a given point in the viewport of a series.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The point at which to hover. Should have an x property with type number and a y property with type number.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.simulateHover = /**
     * Simulates a hover interaction over a given point in the viewport of a series.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} seriesPoint    The point at which to hover. Should have an x property with type number and a y property with type number.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, seriesPoint) { return; };
    /**
     * Moves the cursor point of the target annotation layer to the desired world coordinates.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The point to which to move the cursor. Should have an x property with type number and a y property with type number.
     */
    /* istanbul ignore next */
    /**
     * Moves the cursor point of the target annotation layer to the desired world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The point to which to move the cursor. Should have an x property with type number and a y property with type number.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.moveCursorPoint = /**
     * Moves the cursor point of the target annotation layer to the desired world coordinates.
     *
     * @param {?} targetName    The name of the series to target.
     * @param {?} worldPoint    The point to which to move the cursor. Should have an x property with type number and a y property with type number.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, worldPoint) { return; };
    /**
     * Manually starts a tiled zoom if one isn't already running.
     */
    /* istanbul ignore next */
    /**
     * Manually starts a tiled zoom if one isn't already running.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.startTiledZoomingIfNecessary = /**
     * Manually starts a tiled zoom if one isn't already running.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Manually ends a tiled zoom if one is running.
     */
    /* istanbul ignore next */
    /**
     * Manually ends a tiled zoom if one is running.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.endTiledZoomingIfRunning = /**
     * Manually ends a tiled zoom if one is running.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
     */
    /* istanbul ignore next */
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDataChartComponent.prototype.clearTileZoomCache = /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgDataChartComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-data-chart",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "isPagePanningAllowed", "syncChannel", "synchronizeVertically", "synchronizeHorizontally", "crosshairPoint", "windowRect", "horizontalZoomable", "verticalZoomable", "windowResponse", "windowRectMinWidth", "overviewPlusDetailPaneVisibility", "crosshairVisibility", "plotAreaBackground", "defaultInteraction", "dragModifier", "panModifier", "previewRect", "windowPositionHorizontal", "windowPositionVertical", "windowScaleHorizontal", "windowScaleVertical", "circleMarkerTemplate", "triangleMarkerTemplate", "pyramidMarkerTemplate", "squareMarkerTemplate", "diamondMarkerTemplate", "pentagonMarkerTemplate", "hexagonMarkerTemplate", "tetragramMarkerTemplate", "pentagramMarkerTemplate", "hexagramMarkerTemplate", "topMargin", "leftMargin", "rightMargin", "bottomMargin", "autoMarginWidth", "autoMarginHeight", "isSquare", "gridMode", "brushes", "markerBrushes", "outlines", "markerOutlines", "width", "height", "size", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "isSurfaceInteractionDisabled", "animateSeriesWhenAxisRangeChanges", "title", "subtitle", "titleTextStyle", "titleTopMargin", "titleLeftMargin", "titleRightMargin", "titleBottomMargin", "subtitleTextStyle", "subtitleTopMargin", "subtitleLeftMargin", "subtitleRightMargin", "subtitleBottomMargin", "titleTextColor", "subtitleTextColor", "titleHorizontalAlignment", "subtitleHorizontalAlignment", "highlightingTransitionDuration", "useTiledZooming", "preferHigherResolutionTiles", "pixelScalingRatio", "zoomTileCacheSize", "contentHitTestMode", "legend", "axes", "series", "theme"],
                    outputs: ["tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "seriesCursorMouseMove", "seriesMouseLeftButtonDown", "seriesMouseLeftButtonUp", "seriesMouseMove", "seriesMouseEnter", "seriesMouseLeave", "windowRectChanged", "gridAreaRectChanged", "refreshCompleted", "axisRangeChanged", "typicalBasedOn", "progressiveLoadStatusChanged", "assigningCategoryStyle", "assigningCategoryMarkerStyle"]
                }] }
    ];
    /** @nocollapse */
    IgDataChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgDataChartComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgDataChartComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgPieChartComponent = /** @class */ (function (_super) {
    __extends(IgPieChartComponent, _super);
    function IgPieChartComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgPieChartComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    Object.defineProperty(IgPieChartComponent.prototype, "dataSource", {
        //public option(): void { return; } ;
        set: 
        //public option(): void { return; } ;
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var chart = jQuery(this._el).data(this._widgetName);
            if (chart) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgPieChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param item     the new item that will be added to the data source.
     */
    /* istanbul ignore next */
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be added to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.addItem = /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be added to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item) { return; };
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param item     the new item that will be inserted in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     */
    /* istanbul ignore next */
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be inserted in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.insertItem = /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be inserted in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, index) { return; };
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param index     The index in the data source from where the item will be been removed.
     */
    /* istanbul ignore next */
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.removeItem = /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param index     The index in the data source that we want to change.
     * @param item     the new item that we want to set in the data source.
     */
    /* istanbul ignore next */
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source that we want to change.
     * @param {?} item     the new item that we want to set in the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.setItem = /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source that we want to change.
     * @param {?} item     the new item that we want to set in the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, item) { return; };
    /**
     * Exports the chart to a PNG image.
     *
     * @param width     The width of the image.
     * @param height     The height of the image.
     */
    /* istanbul ignore next */
    /**
     * Exports the chart to a PNG image.
     *
     * @param {?=} width     The width of the image.
     * @param {?=} height     The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.exportImage = /**
     * Exports the chart to a PNG image.
     *
     * @param {?=} width     The width of the image.
     * @param {?=} height     The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    function (width, height) { return; };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the ID of parent element holding the chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of parent element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.id = /**
     * Returns the ID of parent element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the element holding the chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.widget = /**
     * Returns the element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     */
    /* istanbul ignore next */
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.print = /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Exports visual data from the pie chart to aid in unit testing
     */
    /* istanbul ignore next */
    /**
     * Exports visual data from the pie chart to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.exportVisualData = /**
     * Exports visual data from the pie chart to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgPieChartComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-pie-chart",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "valueMemberPath", "labelMemberPath", "dataValue", "dataLabel", "labelsPosition", "labelOuterColor", "labelInnerColor", "selectionMode", "selectedItem", "selectedItems", "leaderLineVisibility", "leaderLineType", "leaderLineMargin", "othersCategoryThreshold", "formatLabel", "othersCategoryStyle", "othersCategoryType", "othersCategoryText", "explodedRadius", "radiusFactor", "allowSliceSelection", "allowSliceExplosion", "explodedSlices", "selectedSlices", "showTooltip", "tooltipTemplate", "legend", "labelExtent", "startAngle", "sweepDirection", "selectedStyle", "brushes", "outlines", "legendItemTemplate", "legendItemBadgeTemplate", "textStyle", "theme"],
                    outputs: ["tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "sliceClick", "labelClick", "selectedItemChanging", "selectedItemChanged", "selectedItemsChanging", "selectedItemsChanged"]
                }] }
    ];
    /** @nocollapse */
    IgPieChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgPieChartComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgPieChartComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgDoughnutChartComponent = /** @class */ (function (_super) {
    __extends(IgDoughnutChartComponent, _super);
    function IgDoughnutChartComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgDoughnutChartComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var chart = jQuery(this._el).data(this._widgetName);
            if (chart) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgDoughnutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Adds a new series to the doughnut chart.
     *
     * @param seriesObj     The series object to be added.
     */
    /* istanbul ignore next */
    /**
     * Adds a new series to the doughnut chart.
     *
     * @param {?} seriesObj     The series object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.addSeries = /**
     * Adds a new series to the doughnut chart.
     *
     * @param {?} seriesObj     The series object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    function (seriesObj) { return; };
    /**
     * Removes the specified series from the doughnut chart.
     *
     * @param seriesObj     The series object identifying the series to be removed.
     */
    /* istanbul ignore next */
    /**
     * Removes the specified series from the doughnut chart.
     *
     * @param {?} seriesObj     The series object identifying the series to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.removeSeries = /**
     * Removes the specified series from the doughnut chart.
     *
     * @param {?} seriesObj     The series object identifying the series to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (seriesObj) { return; };
    /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param value     The series object identifying the series to be updated.
     */
    /* istanbul ignore next */
    /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param {?} value     The series object identifying the series to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.updateSeries = /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param {?} value     The series object identifying the series to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Returns the center of the doughnut chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the center of the doughnut chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.getCenterCoordinates = /**
     * Returns the center of the doughnut chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the radius of the chart's hole.
     */
    /* istanbul ignore next */
    /**
     * Returns the radius of the chart's hole.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.getHoleRadius = /**
     * Returns the radius of the chart's hole.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns information about how the doughnut chart is rendered.
     */
    /* istanbul ignore next */
    /**
     * Returns information about how the doughnut chart is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.exportVisualData = /**
     * Returns information about how the doughnut chart is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     */
    /* istanbul ignore next */
    /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.flush = /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgDoughnutChartComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-doughnut-chart",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "series", "allowSliceSelection", "isSurfaceInteractionDisabled", "allowSliceExplosion", "innerExtent", "selectedStyle"],
                    outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip", "tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "sliceClick", "holeDimensionsChanged"]
                }] }
    ];
    /** @nocollapse */
    IgDoughnutChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgDoughnutChartComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgDoughnutChartComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgFunnelChartComponent = /** @class */ (function (_super) {
    __extends(IgFunnelChartComponent, _super);
    function IgFunnelChartComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgFunnelChartComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var chart = jQuery(this._el).data(this._widgetName);
            if (chart) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgFunnelChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Gets array of selected slice items.
     *
     * @param selection     Array or selected slice items.
     * @return array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    /**
     * Gets array of selected slice items.
     *
     * @param {?=} selection     Array or selected slice items.
     * @return {?} array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.selectedSliceItems = /**
     * Gets array of selected slice items.
     *
     * @param {?=} selection     Array or selected slice items.
     * @return {?} array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    function (selection) { return; };
    /**
     * Gets sets array of indexes of selected slices.
     *
     * @param selection     Array or selected slice indexes.
     * @return array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    /**
     * Gets sets array of indexes of selected slices.
     *
     * @param {?=} selection     Array or selected slice indexes.
     * @return {?} array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.selectedSliceIndexes = /**
     * Gets sets array of indexes of selected slices.
     *
     * @param {?=} selection     Array or selected slice indexes.
     * @return {?} array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    function (selection) { return; };
    /**
     * Checks if slice is selected.
     *
     * @param slice     Index of slice or reference to slice-data-item.
     */
    /* istanbul ignore next */
    /**
     * Checks if slice is selected.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.isSelected = /**
     * Checks if slice is selected.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    function (slice) { return; };
    /**
     * Toggles selected state of slice.
     *
     * @param slice     Index of slice or reference to slice-data-item.
     */
    /* istanbul ignore next */
    /**
     * Toggles selected state of slice.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.toggleSelection = /**
     * Toggles selected state of slice.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    function (slice) { return; };
    /**
     * @return {?}
     */
    IgFunnelChartComponent.prototype.exportVisualData = /**
     * @return {?}
     */
    function () { return; };
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgFunnelChartComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-funnel-chart",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "bezierPoints", "legend", "valueMemberPath", "brushes", "outlines", "bottomEdgeWidth", "innerLabelMemberPath", "outerLabelMemberPath", "innerLabelVisibility", "outerLabelVisibility", "outerLabelAlignment", "funnelSliceDisplay", "formatInnerLabel", "formatOuterLabel", "transitionDuration", "isInverted", "useBezierCurve", "allowSliceSelection", "useUnselectedStyle", "selectedSliceStyle", "unselectedSliceStyle", "legendItemBadgeTemplate", "useOuterLabelsForLegend", "textStyle", "outerLabelTextStyle", "outlineThickness", "pixelScalingRatio", "outerLabelTextColor", "textColor"],
                    outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip", "sliceClicked"]
                }] }
    ];
    /** @nocollapse */
    IgFunnelChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgFunnelChartComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgFunnelChartComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgRadialGaugeComponent = /** @class */ (function (_super) {
    __extends(IgRadialGaugeComponent, _super);
    function IgRadialGaugeComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    /* istanbul ignore next */
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.getRangeNames = /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Adds a new range to the radial gauge.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Adds a new range to the radial gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.addRange = /**
     * Adds a new range to the radial gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Removes a specified range.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Removes a specified range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.removeRange = /**
     * Removes a specified range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Updates the range.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Updates the range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.updateRange = /**
     * Updates the range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Clears the ranges in the radial gauge.
     */
    /* istanbul ignore next */
    /**
     * Clears the ranges in the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.clearRanges = /**
     * Clears the ranges in the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.scaleValue = /**
     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.unscaleValue = /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param x
     * @param y
     */
    /* istanbul ignore next */
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.getValueForPoint = /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    function (x, y) { return; };
    /**
     * Gets the point on the gauge for a given scale value and extent.
     *
     * @param value
     * @param extent
     */
    /* istanbul ignore next */
    /**
     * Gets the point on the gauge for a given scale value and extent.
     *
     * @param {?} value
     * @param {?} extent
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.getPointForValue = /**
     * Gets the point on the gauge for a given scale value and extent.
     *
     * @param {?} value
     * @param {?} extent
     * @return {?}
     */
    /* istanbul ignore next */
    function (value, extent) { return; };
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param x
     * @param y
     */
    /* istanbul ignore next */
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.needleContainsPoint = /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    function (x, y) { return; };
    /**
     * Exports the visual data for the radial gauge.
     */
    /* istanbul ignore next */
    /**
     * Exports the visual data for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.exportVisualData = /**
     * Exports the visual data for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Flushes the gauge.
     */
    /* istanbul ignore next */
    /**
     * Flushes the gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.flush = /**
     * Flushes the gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns true if the style was updated for the radial gauge.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the style was updated for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.styleUpdated = /**
     * Returns true if the style was updated for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgRadialGaugeComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-radial-gauge",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "ranges", "rangeBrushes", "rangeOutlines", "minimumValue", "maximumValue", "interval", "centerX", "centerY", "value", "scaleStartAngle", "scaleEndAngle", "scaleSweepDirection", "transitionDuration", "transitionEasingFunction", "needleBrush", "needleOutline", "needleStartExtent", "needleEndExtent", "needleShape", "needleStartWidthRatio", "needleEndWidthRatio", "needleBaseFeatureWidthRatio", "needleBaseFeatureExtent", "needlePointFeatureWidthRatio", "needlePointFeatureExtent", "needlePivotWidthRatio", "needlePivotInnerWidthRatio", "needlePivotShape", "scaleStartExtent", "needlePivotBrush", "needlePivotOutline", "needleStrokeThickness", "needlePivotStrokeThickness", "scaleEndExtent", "labelExtent", "labelInterval", "tickStartExtent", "tickEndExtent", "tickStrokeThickness", "tickBrush", "fontBrush", "minorTickStartExtent", "minorTickEndExtent", "minorTickStrokeThickness", "minorTickBrush", "minorTickCount", "scaleBrush", "backingBrush", "backingOutline", "backingStrokeThickness", "backingOuterExtent", "backingOversweep", "scaleOversweep", "scaleOversweepShape", "backingCornerRadius", "backingInnerExtent", "backingShape", "radiusMultiplier", "duplicateLabelOmissionStrategy", "isNeedleDraggingEnabled", "isNeedleDraggingConstrained", "font", "transitionProgress", "pixelScalingRatio"],
                    outputs: ["formatLabel", "alignLabel", "valueChanged"]
                }] }
    ];
    /** @nocollapse */
    IgRadialGaugeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgRadialGaugeComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgZoombarComponent = /** @class */ (function (_super) {
    __extends(IgZoombarComponent, _super);
    function IgZoombarComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Destroys the Zoombar widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the Zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.destroy = /**
     * Destroys the Zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the main zoombar element
     */
    /* istanbul ignore next */
    /**
     * Returns the main zoombar element
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.widget = /**
     * Returns the main zoombar element
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the ID of the element the zoombar is initialized on
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of the element the zoombar is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.id = /**
     * Returns the ID of the element the zoombar is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the DIV that is the topmost container of the zoombar widget
     */
    /* istanbul ignore next */
    /**
     * Returns the DIV that is the topmost container of the zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.container = /**
     * Returns the DIV that is the topmost container of the zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the element the clone widget is initialized on
     */
    /* istanbul ignore next */
    /**
     * Returns the element the clone widget is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.clone = /**
     * Returns the element the clone widget is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets or sets the current zoom window
     *
     * @param left     The left parameter of the new zoom window in percentages
     * @param width     The width parameter of the new zoom window in percentages
     */
    /* istanbul ignore next */
    /**
     * Gets or sets the current zoom window
     *
     * @param {?=} left     The left parameter of the new zoom window in percentages
     * @param {?=} width     The width parameter of the new zoom window in percentages
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.zoom = /**
     * Gets or sets the current zoom window
     *
     * @param {?=} left     The left parameter of the new zoom window in percentages
     * @param {?=} width     The width parameter of the new zoom window in percentages
     * @return {?}
     */
    /* istanbul ignore next */
    function (left, width) { return; };
    IgZoombarComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-zoombar",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "target", "clone", "width", "height", "zoomAction", "zoomWindowMoveDistance", "defaultZoomWindow", "zoomWindowMinWidth", "hoverStyleAnimationDuration", "windowPanDuration", "tabIndex"],
                    outputs: ["zoomChanging", "zoomChanged", "providerCreated", "windowDragStarting", "windowDragStarted", "windowDragging", "windowDragEnding", "windowDragEnded", "windowResizing", "windowResized"]
                }] }
    ];
    /** @nocollapse */
    IgZoombarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgZoombarComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgMapComponent = /** @class */ (function (_super) {
    __extends(IgMapComponent, _super);
    function IgMapComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgMapComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    Object.defineProperty(IgMapComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var map = jQuery(this._el).data(this._widgetName);
            if (map) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the ID of parent element holding the map.
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of parent element holding the map.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.id = /**
     * Returns the ID of parent element holding the map.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Exports the map to a PNG image.
     *
     * @param width The width of the image.
     * @param height The height of the image.
     */
    /* istanbul ignore next */
    /**
     * Exports the map to a PNG image.
     *
     * @param {?=} width The width of the image.
     * @param {?=} height The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.exportImage = /**
     * Exports the map to a PNG image.
     *
     * @param {?=} width The width of the image.
     * @param {?=} height The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    function (width, height) { return; };
    /**
     * Notify the map that styles it draws colors from may have been updated.
     */
    /* istanbul ignore next */
    /**
     * Notify the map that styles it draws colors from may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.styleUpdated = /**
     * Notify the map that styles it draws colors from may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Resets the zoom level of the map to default.
     */
    /* istanbul ignore next */
    /**
     * Resets the zoom level of the map to default.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.resetZoom = /**
     * Resets the zoom level of the map to default.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Adds a new item to the data source and notifies the map.
     *
     * @param item     The item that we want to add to the data source.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Adds a new item to the data source and notifies the map.
     *
     * @param {?} item     The item that we want to add to the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.addItem = /**
     * Adds a new item to the data source and notifies the map.
     *
     * @param {?} item     The item that we want to add to the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, targetName) { return; };
    /**
     * Inserts a new item to the data source and notifies the map.
     *
     * @param item     the new item that we want to insert in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Inserts a new item to the data source and notifies the map.
     *
     * @param {?} item     the new item that we want to insert in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.insertItem = /**
     * Inserts a new item to the data source and notifies the map.
     *
     * @param {?} item     the new item that we want to insert in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, index, targetName) { return; };
    /**
     * Deletes an item from the data source and notifies the map.
     *
     * @param index     The index in the data source from where the item will be been removed.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Deletes an item from the data source and notifies the map.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.removeItem = /**
     * Deletes an item from the data source and notifies the map.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, targetName) { return; };
    /**
     * Updates an item in the data source and notifies the map.
     *
     * @param index     The index of the item in the data source that we want to change.
     * @param item     The new item object that will be set in the data source.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Updates an item in the data source and notifies the map.
     *
     * @param {?} index     The index of the item in the data source that we want to change.
     * @param {?} item     The new item object that will be set in the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.setItem = /**
     * Updates an item in the data source and notifies the map.
     *
     * @param {?} index     The index of the item in the data source that we want to change.
     * @param {?} item     The new item object that will be set in the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, item, targetName) { return; };
    /**
     * Notifies the the map that an item has been set in an associated data source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source that has been changed.
     * @param newItem the new item that has been set in the collection.
     * @param oldItem the old item that has been overwritten in the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the map that an item has been set in an associated data source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source that has been changed.
     * @param {?} newItem the new item that has been set in the collection.
     * @param {?} oldItem the old item that has been overwritten in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifySetItem = /**
     * Notifies the the map that an item has been set in an associated data source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source that has been changed.
     * @param {?} newItem the new item that has been set in the collection.
     * @param {?} oldItem the old item that has been overwritten in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, newItem, oldItem) { return; };
    /**
     * Notifies the the map that the items have been cleared from an associated data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the map that the items have been cleared from an associated data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyClearItems = /**
     * Notifies the the map that the items have been cleared from an associated data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource) { return; };
    /**
     * Notifies the the target series that an item has been inserted at the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source where the new item has been inserted.
     * @param newItem the new item that has been set in the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the target series that an item has been inserted at the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source where the new item has been inserted.
     * @param {?} newItem the new item that has been set in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyInsertItem = /**
     * Notifies the the target series that an item has been inserted at the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source where the new item has been inserted.
     * @param {?} newItem the new item that has been set in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, newItem) { return; };
    /**
     * Notifies the the target series that an item has been removed from the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source from where the old item has been removed.
     * @param oldItem the old item that has been removed from the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the target series that an item has been removed from the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source from where the old item has been removed.
     * @param {?} oldItem the old item that has been removed from the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyRemoveItem = /**
     * Notifies the the target series that an item has been removed from the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source from where the old item has been removed.
     * @param {?} oldItem the old item that has been removed from the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, oldItem) { return; };
    /**
     * Notifies the target series or axis that it should scroll the requested data item into view.
     *
     * @param targetName The name of the series or axis notify.
     * @param item The data item to bring into view, if possible.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target series or axis that it should scroll the requested data item into view.
     *
     * @param {?} targetName The name of the series or axis notify.
     * @param {?} item The data item to bring into view, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.scrollIntoView = /**
     * Notifies the target series or axis that it should scroll the requested data item into view.
     *
     * @param {?} targetName The name of the series or axis notify.
     * @param {?} item The data item to bring into view, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, item) { return; };
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
     * 				For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
     *
     * @param targetName Either xAxis or yAxis to notify.
     * @param unscaledValue The value in axis space to translate into map space.
     */
    /* istanbul ignore next */
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
     * 				For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} unscaledValue The value in axis space to translate into map space.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.scaleValue = /**
     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
     * 				For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} unscaledValue The value in axis space to translate into map space.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, unscaledValue) { return; };
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
     * 				For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
     *
     * @param targetName Either xAxis or yAxis to notify.
     * @param scaledValue The value in map space to translate into axis space.
     */
    /* istanbul ignore next */
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
     * 				For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} scaledValue The value in map space to translate into axis space.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.unscaleValue = /**
     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
     * 				For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} scaledValue The value in map space to translate into axis space.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, scaledValue) { return; };
    /**
     * Manually starts a tiled zoom if one isn't already running.
     */
    /* istanbul ignore next */
    /**
     * Manually starts a tiled zoom if one isn't already running.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.startTiledZoomingIfNecessary = /**
     * Manually starts a tiled zoom if one isn't already running.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Manually ends a tiled zoom if one is running.
     */
    /* istanbul ignore next */
    /**
     * Manually ends a tiled zoom if one is running.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.endTiledZoomingIfRunning = /**
     * Manually ends a tiled zoom if one is running.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
     */
    /* istanbul ignore next */
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.clearTileZoomCache = /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Forces any pending deferred work to render on the map before continuing
     */
    /* istanbul ignore next */
    /**
     * Forces any pending deferred work to render on the map before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.flush = /**
     * Forces any pending deferred work to render on the map before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Exports visual data from the map to aid in unit testing
     */
    /* istanbul ignore next */
    /**
     * Exports visual data from the map to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.exportVisualData = /**
     * Exports visual data from the map to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the actual minimum value of the target xAxis or yAxis
     *
     * @param targetName
     */
    /* istanbul ignore next */
    /**
     * Gets the actual minimum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getActualMinimumValue = /**
     * Gets the actual minimum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Gets the actual maximum value of the target xAxis or yAxis
     *
     * @param targetName
     */
    /* istanbul ignore next */
    /**
     * Gets the actual maximum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getActualMaximumValue = /**
     * Gets the actual maximum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    /**
     * Notifies the map that the container was resized
     */
    /* istanbul ignore next */
    /**
     * Notifies the map that the container was resized
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyContainerResized = /**
     * Notifies the map that the container was resized
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
     *
     * @param rect The geographic area rectangle.
     */
    /* istanbul ignore next */
    /**
     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.zoomToGeographic = /**
     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rect) { return; };
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param rect The geographic area rectangle.
     */
    /* istanbul ignore next */
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getGeographicFromZoom = /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rect) { return; };
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param rect The geographic area rectangle.
     */
    /* istanbul ignore next */
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getZoomFromGeographic = /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rect) { return; };
    /**
     * Creates a print preview page with the map, hiding all other elements on the page.
     */
    /* istanbul ignore next */
    /**
     * Creates a print preview page with the map, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.print = /**
     * Creates a print preview page with the map, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param targetName     The name of the series to render.
     * @param animate     Whether the change should be animated, if possible.
     */
    /* istanbul ignore next */
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param {?} targetName     The name of the series to render.
     * @param {?} animate     Whether the change should be animated, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.renderSeries = /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param {?} targetName     The name of the series to render.
     * @param {?} animate     Whether the change should be animated, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, animate) { return; };
    IgMapComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-map",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "autoMarginWidth", "autoMarginHeight", "crosshairVisibility", "crosshairPoint", "plotAreaBackground", "defaultInteraction", "dragModifier", "panModifier", "previewRect", "windowRect", "zoomable", "windowScale", "windowResponse", "windowRectMinWidth", "windowPositionHorizontal", "windowPositionVertical", "circleMarkerTemplate", "triangleMarkerTemplate", "pyramidMarkerTemplate", "squareMarkerTemplate", "diamondMarkerTemplate", "pentagonMarkerTemplate", "hexagonMarkerTemplate", "tetragramMarkerTemplate", "pentagramMarkerTemplate", "hexagramMarkerTemplate", "overviewPlusDetailPaneBackgroundImageUri", "useTiledZooming", "preferHigherResolutionTiles", "zoomTileCacheSize", "backgroundContent", "series", "theme"],
                    outputs: ["tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "seriesCursorMouseMove", "seriesMouseLeftButtonDown", "seriesMouseLeftButtonUp", "seriesMouseMove", "seriesMouseEnter", "seriesMouseLeave", "windowRectChanged", "gridAreaRectChanged", "refreshCompleted", "triangulationStatusChanged"]
                }] }
    ];
    /** @nocollapse */
    IgMapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgMapComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgMapComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgSparklineComponent = /** @class */ (function (_super) {
    __extends(IgSparklineComponent, _super);
    function IgSparklineComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgSparklineComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var widget = jQuery(this._el).data(this._widgetName);
            if (widget) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgSparklineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgSparklineComponent.prototype.destroy = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    IgSparklineComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-sparkline",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "brush", "negativeBrush", "markerBrush", "negativeMarkerBrush", "firstMarkerBrush", "lastMarkerBrush", "highMarkerBrush", "lowMarkerBrush", "trendLineBrush", "horizontalAxisBrush", "verticalAxisBrush", "normalRangeFill", "horizontalAxisVisibility", "verticalAxisVisibility", "markerVisibility", "negativeMarkerVisibility", "firstMarkerVisibility", "lastMarkerVisibility", "lowMarkerVisibility", "highMarkerVisibility", "normalRangeVisibility", "displayNormalRangeInFront", "markerSize", "firstMarkerSize", "lastMarkerSize", "highMarkerSize", "lowMarkerSize", "negativeMarkerSize", "lineThickness", "valueMemberPath", "labelMemberPath", "trendLineType", "trendLinePeriod", "trendLineThickness", "normalRangeMinimum", "normalRangeMaximum", "displayType", "unknownValuePlotting", "verticalAxisLabel", "horizontalAxisLabel", "formatLabel", "pixelScalingRatio"],
                    outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip"]
                }] }
    ];
    /** @nocollapse */
    IgSparklineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgSparklineComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgSparklineComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgBulletGraphComponent = /** @class */ (function (_super) {
    __extends(IgBulletGraphComponent, _super);
    function IgBulletGraphComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    /* istanbul ignore next */
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.getRangeNames = /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Adds a new range to the bullet graph.
     *
     * @param value     The range object to be added.
     */
    /* istanbul ignore next */
    /**
     * Adds a new range to the bullet graph.
     *
     * @param {?} value     The range object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.addRange = /**
     * Adds a new range to the bullet graph.
     *
     * @param {?} value     The range object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Removes a range from the bullet graph.
     *
     * @param value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     */
    /* istanbul ignore next */
    /**
     * Removes a range from the bullet graph.
     *
     * @param {?} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.removeRange = /**
     * Removes a range from the bullet graph.
     *
     * @param {?} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Updates the specified range of the bullet graph.
     *
     * @param value     The range object to be updated.
     */
    /* istanbul ignore next */
    /**
     * Updates the specified range of the bullet graph.
     *
     * @param {?} value     The range object to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.updateRange = /**
     * Updates the specified range of the bullet graph.
     *
     * @param {?} value     The range object to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Returns information about how the bullet graph is rendered.
     */
    /* istanbul ignore next */
    /**
     * Returns information about how the bullet graph is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.exportVisualData = /**
     * Returns information about how the bullet graph is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     */
    /* istanbul ignore next */
    /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.flush = /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    /* istanbul ignore next */
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.styleUpdated = /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgBulletGraphComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-bullet-graph",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "ranges", "rangeToolTipTemplate", "valueToolTipTemplate", "targetValueToolTipTemplate", "orientation", "rangeBrushes", "rangeOutlines", "minimumValue", "maximumValue", "targetValue", "targetValueName", "value", "valueName", "rangeInnerExtent", "rangeOuterExtent", "valueInnerExtent", "valueOuterExtent", "interval", "ticksPostInitial", "ticksPreTerminal", "labelInterval", "labelExtent", "labelsPostInitial", "labelsPreTerminal", "minorTickCount", "tickStartExtent", "tickEndExtent", "tickStrokeThickness", "tickBrush", "fontBrush", "valueBrush", "valueOutline", "valueStrokeThickness", "minorTickStartExtent", "minorTickEndExtent", "minorTickStrokeThickness", "minorTickBrush", "isScaleInverted", "backingBrush", "backingOutline", "backingStrokeThickness", "backingInnerExtent", "backingOuterExtent", "scaleStartExtent", "scaleEndExtent", "targetValueBrush", "targetValueBreadth", "targetValueInnerExtent", "targetValueOuterExtent", "targetValueOutline", "targetValueStrokeThickness", "transitionDuration", "showToolTipTimeout", "showToolTip", "font", "pixelScalingRatio"],
                    outputs: ["formatLabel", "alignLabel"]
                }] }
    ];
    /** @nocollapse */
    IgBulletGraphComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgBulletGraphComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgLinearGaugeComponent = /** @class */ (function (_super) {
    __extends(IgLinearGaugeComponent, _super);
    function IgLinearGaugeComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    /* istanbul ignore next */
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.getRangeNames = /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Adds a new range to the linear gauge.
     *
     * @param value     The range object to be added.
     */
    /* istanbul ignore next */
    /**
     * Adds a new range to the linear gauge.
     *
     * @param {?} value     The range object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.addRange = /**
     * Adds a new range to the linear gauge.
     *
     * @param {?} value     The range object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Removes a range from the linear gauge.
     *
     * @param value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     */
    /* istanbul ignore next */
    /**
     * Removes a range from the linear gauge.
     *
     * @param {?} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.removeRange = /**
     * Removes a range from the linear gauge.
     *
     * @param {?} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Updates the specified range of the linear gauge.
     *
     * @param value     The range object to be updated.
     */
    /* istanbul ignore next */
    /**
     * Updates the specified range of the linear gauge.
     *
     * @param {?} value     The range object to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.updateRange = /**
     * Updates the specified range of the linear gauge.
     *
     * @param {?} value     The range object to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param x
     * @param y
     */
    /* istanbul ignore next */
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.getValueForPoint = /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    function (x, y) { return; };
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param x The x coordinate of the point.
     * @param y The y coordinate of the point.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param {?} x The x coordinate of the point.
     * @param {?} y The y coordinate of the point.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.needleContainsPoint = /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param {?} x The x coordinate of the point.
     * @param {?} y The y coordinate of the point.
     * @return {?}
     */
    /* istanbul ignore next */
    function (x, y) { return; };
    /**
     * Returns information about how the linear gauge is rendered.
     */
    /* istanbul ignore next */
    /**
     * Returns information about how the linear gauge is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.exportVisualData = /**
     * Returns information about how the linear gauge is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Causes all pending changes of the linear gauge e.g. by changed property values to be rendered immediately.
     */
    /* istanbul ignore next */
    /**
     * Causes all pending changes of the linear gauge e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.flush = /**
     * Causes all pending changes of the linear gauge e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    /* istanbul ignore next */
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLinearGaugeComponent.prototype.styleUpdated = /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgLinearGaugeComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-linear-gauge",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "ranges", "rangeToolTipTemplate", "needleToolTipTemplate", "orientation", "rangeBrushes", "rangeOutlines", "minimumValue", "maximumValue", "value", "needleShape", "needleName", "rangeInnerExtent", "scaleInnerExtent", "rangeOuterExtent", "scaleOuterExtent", "needleInnerExtent", "needleOuterExtent", "needleInnerBaseWidth", "needleOuterBaseWidth", "needleInnerPointWidth", "needleOuterPointWidth", "needleInnerPointExtent", "needleOuterPointExtent", "interval", "ticksPostInitial", "ticksPreTerminal", "labelInterval", "labelExtent", "labelsPostInitial", "labelsPreTerminal", "minorTickCount", "tickStartExtent", "tickEndExtent", "tickStrokeThickness", "tickBrush", "fontBrush", "needleBreadth", "needleBrush", "needleOutline", "needleStrokeThickness", "minorTickStartExtent", "minorTickEndExtent", "minorTickStrokeThickness", "minorTickBrush", "isScaleInverted", "backingBrush", "backingOutline", "backingStrokeThickness", "backingInnerExtent", "backingOuterExtent", "scaleStartExtent", "scaleEndExtent", "scaleBrush", "scaleOutline", "scaleStrokeThickness", "isNeedleDraggingEnabled", "transitionDuration", "showToolTipTimeout", "showToolTip", "font", "pixelScalingRatio"],
                    outputs: ["formatLabel", "alignLabel", "valueChanged"]
                }] }
    ];
    /** @nocollapse */
    IgLinearGaugeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgLinearGaugeComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgQRCodeBarcodeComponent = /** @class */ (function (_super) {
    __extends(IgQRCodeBarcodeComponent, _super);
    function IgQRCodeBarcodeComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgQRCodeBarcodeComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    /**
     * Returns information about how the barcode is rendered.
     */
    /* istanbul ignore next */
    /**
     * Returns information about how the barcode is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.exportVisualData = /**
     * Returns information about how the barcode is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
     */
    /* istanbul ignore next */
    /**
     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.flush = /**
     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    /* istanbul ignore next */
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.styleUpdated = /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgQRCodeBarcodeComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-q-r-code-barcode",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "backingBrush", "backingOutline", "backingStrokeThickness", "barBrush", "fontBrush", "font", "data", "errorMessageText", "stretch", "barsFillMode", "widthToHeightRatio", "xDimension", "errorCorrectionLevel", "sizeVersion", "encodingMode", "eciNumber", "eciHeaderDisplayMode", "fnc1Mode", "applicationIndicator"],
                    outputs: ["errorMessageDisplaying", "dataChanged"]
                }] }
    ];
    /** @nocollapse */
    IgQRCodeBarcodeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgQRCodeBarcodeComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgUploadComponent = /** @class */ (function (_super) {
    __extends(IgUploadComponent, _super);
    function IgUploadComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Return jquery object of fileupload container - html DOM element
     */
    /* istanbul ignore next */
    /**
     * Return jquery object of fileupload container - html DOM element
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.container = /**
     * Return jquery object of fileupload container - html DOM element
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the current widget element
     */
    /* istanbul ignore next */
    /**
     * Returns the current widget element
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.widget = /**
     * Returns the current widget element
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Hide finished files
     */
    /* istanbul ignore next */
    /**
     * Hide finished files
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.clearAll = /**
     * Hide finished files
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Append additional data field to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param field    Data field that should be appended to the formData. The object has 2 properties - value and name. If the browser supports HTML5 the data field is appended to the formData object. Otherwise it is appended as input hidden field to the <form>
     */
    /* istanbul ignore next */
    /**
     * Append additional data field to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param {?} formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param {?} field    Data field that should be appended to the formData. The object has 2 properties - value and name. If the browser supports HTML5 the data field is appended to the formData object. Otherwise it is appended as input hidden field to the <form>
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.addDataField = /**
     * Append additional data field to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param {?} formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param {?} field    Data field that should be appended to the formData. The object has 2 properties - value and name. If the browser supports HTML5 the data field is appended to the formData object. Otherwise it is appended as input hidden field to the <form>
     * @return {?}
     */
    /* istanbul ignore next */
    function (formData, field) { return; };
    /**
     * Append additional data fields to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param fields    Array of data fields that should be appended to the formData. Each data field is object with 2 properties - value and name. If the browser supports HTML5 these data fields are added to the formData. Otherwise each of these data field is appended as input hidden field to the <form>
     */
    /* istanbul ignore next */
    /**
     * Append additional data fields to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param {?} formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param {?} fields    Array of data fields that should be appended to the formData. Each data field is object with 2 properties - value and name. If the browser supports HTML5 these data fields are added to the formData. Otherwise each of these data field is appended as input hidden field to the <form>
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.addDataFields = /**
     * Append additional data fields to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param {?} formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param {?} fields    Array of data fields that should be appended to the formData. Each data field is object with 2 properties - value and name. If the browser supports HTML5 these data fields are added to the formData. Otherwise each of these data field is appended as input hidden field to the <form>
     * @return {?}
     */
    /* istanbul ignore next */
    function (formData, fields) { return; };
    /**
     * Start uploading file as submitting form with the specified formNumber.
     *
     * @param formNumber    id of the upload form
     */
    /* istanbul ignore next */
    /**
     * Start uploading file as submitting form with the specified formNumber.
     *
     * @param {?} formNumber    id of the upload form
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.startUpload = /**
     * Start uploading file as submitting form with the specified formNumber.
     *
     * @param {?} formNumber    id of the upload form
     * @return {?}
     */
    /* istanbul ignore next */
    function (formNumber) { return; };
    /**
     * Cancel upload for the specified file id
     * 			 formNumber - id of the file to be canceled
     *
     * @param formNumber    id of the form which should be cancelled
     */
    /* istanbul ignore next */
    /**
     * Cancel upload for the specified file id
     * 			 formNumber - id of the file to be canceled
     *
     * @param {?} formNumber    id of the form which should be cancelled
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.cancelUpload = /**
     * Cancel upload for the specified file id
     * 			 formNumber - id of the file to be canceled
     *
     * @param {?} formNumber    id of the form which should be cancelled
     * @return {?}
     */
    /* istanbul ignore next */
    function (formNumber) { return; };
    /**
     * Destroy the widget
     */
    /* istanbul ignore next */
    /**
     * Destroy the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.destroy = /**
     * Destroy the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the information about uploading files - all files uploaded/uploading/pending
     */
    /* istanbul ignore next */
    /**
     * Returns the information about uploading files - all files uploaded/uploading/pending
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.getFileInfoData = /**
     * Returns the information about uploading files - all files uploaded/uploading/pending
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Cancel all uploading and pending files
     */
    /* istanbul ignore next */
    /**
     * Cancel all uploading and pending files
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.cancelAll = /**
     * Cancel all uploading and pending files
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the information about the file by specified file identifier. It could be file which is uploading/uploaded or uploading is not started. If there isn"t file with the specified file id returns null
     *
     * @param fileIndex    unique identifier of the file
     */
    /* istanbul ignore next */
    /**
     * Returns the information about the file by specified file identifier. It could be file which is uploading/uploaded or uploading is not started. If there isn"t file with the specified file id returns null
     *
     * @param {?} fileIndex    unique identifier of the file
     * @return {?}
     */
    /* istanbul ignore next */
    IgUploadComponent.prototype.getFileInfo = /**
     * Returns the information about the file by specified file identifier. It could be file which is uploading/uploaded or uploading is not started. If there isn"t file with the specified file id returns null
     *
     * @param {?} fileIndex    unique identifier of the file
     * @return {?}
     */
    /* istanbul ignore next */
    function (fileIndex) { return; };
    IgUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-upload",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "autostartupload", "labelUploadButton", "labelAddButton", "labelClearAllButton", "labelSummaryTemplate", "labelSummaryProgressBarTemplate", "labelShowDetails", "labelHideDetails", "labelSummaryProgressButtonCancel", "labelSummaryProgressButtonContinue", "labelSummaryProgressButtonDone", "labelProgressBarFileNameContinue", "errorMessageMaxFileSizeExceeded", "errorMessageGetFileStatus", "errorMessageCancelUpload", "errorMessageNoSuchFile", "errorMessageOther", "errorMessageValidatingFileExtension", "errorMessageAJAXRequestFileSize", "errorMessageTryToRemoveNonExistingFile", "errorMessageTryToStartNonExistingFile", "errorMessageMaxUploadedFiles", "errorMessageMaxSimultaneousFiles", "errorMessageDropMultipleFilesWhenSingleModel", "uploadUrl", "progressUrl", "allowedExtensions", "showFileExtensionIcon", "css", "fileExtensionIcons", "mode", "multipleFiles", "maxUploadedFiles", "maxSimultaneousFilesUploads", "fileSizeMetric", "controlId", "fileSizeDecimalDisplay", "maxFileSize"],
                    outputs: ["fileSelecting", "fileSelected", "fileUploading", "fileUploaded", "fileUploadAborted", "cancelAllClicked", "onError", "fileExtensionsValidating", "onXHRLoad", "onFormDataSubmit"]
                }] }
    ];
    /** @nocollapse */
    IgUploadComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgUploadComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgPopoverComponent = /** @class */ (function (_super) {
    __extends(IgPopoverComponent, _super);
    function IgPopoverComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgPopoverComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    /**
     * @return {?}
     */
    IgPopoverComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elem = jQuery(document).find("#" + this.widgetId);
        if (elem.length === 1) {
            this._el = elem;
            this._events = new Map();
            //events binding
            /** @type {?} */
            var that_1 = this;
            /** @type {?} */
            var evtName;
            for (var propt in jQuery.ui[this._widgetName].prototype.events) {
                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
                this._events[evtName] = propt;
                jQuery(this._el).on(evtName, (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that_1[that_1._events[evt.type]].emit({ event: evt, ui: ui });
                }));
            }
            jQuery(this._el)[this._widgetName](this.options);
        }
        else {
            _super.prototype.ngOnInit.call(this);
        }
    };
    /**
     * Destroys the popover widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the popover widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.destroy = /**
     * Destroys the popover widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the ID of the element the popover is attached to
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of the element the popover is attached to
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.id = /**
     * Returns the ID of the element the popover is attached to
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns the container for the popover contents
     */
    /* istanbul ignore next */
    /**
     * Returns the container for the popover contents
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.container = /**
     * Returns the container for the popover contents
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Shows the popover for the specified target
     *
     * @param trg     The element to show popover for.
     * @param content     The string to set for the popover to show.
     */
    /* istanbul ignore next */
    /**
     * Shows the popover for the specified target
     *
     * @param {?=} trg     The element to show popover for.
     * @param {?=} content     The string to set for the popover to show.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.show = /**
     * Shows the popover for the specified target
     *
     * @param {?=} trg     The element to show popover for.
     * @param {?=} content     The string to set for the popover to show.
     * @return {?}
     */
    /* istanbul ignore next */
    function (trg, content) { return; };
    /**
     * Hides the popover for the specified target
     */
    /* istanbul ignore next */
    /**
     * Hides the popover for the specified target
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.hide = /**
     * Hides the popover for the specified target
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the currently set content for the popover container
     */
    /* istanbul ignore next */
    /**
     * Gets the currently set content for the popover container
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.getContent = /**
     * Gets the currently set content for the popover container
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets the content for the popover container
     *
     * @param newCnt     The popover content to set.
     */
    /* istanbul ignore next */
    /**
     * Sets the content for the popover container
     *
     * @param {?} newCnt     The popover content to set.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.setContent = /**
     * Sets the content for the popover container
     *
     * @param {?} newCnt     The popover content to set.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newCnt) { return; };
    /**
     * Gets the popover current target
     */
    /* istanbul ignore next */
    /**
     * Gets the popover current target
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.target = /**
     * Gets the popover current target
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets the current coordinates of the popover
     */
    /* istanbul ignore next */
    /**
     * Gets the current coordinates of the popover
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.getCoordinates = /**
     * Gets the current coordinates of the popover
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets the popover to specific coordinates.
     *
     * @param pos     The popover coordinates in pixels.
     */
    /* istanbul ignore next */
    /**
     * Sets the popover to specific coordinates.
     *
     * @param {?} pos     The popover coordinates in pixels.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.setCoordinates = /**
     * Sets the popover to specific coordinates.
     *
     * @param {?} pos     The popover coordinates in pixels.
     * @return {?}
     */
    /* istanbul ignore next */
    function (pos) { return; };
    IgPopoverComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-popover",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "closeOnBlur", "direction", "position", "width", "height", "minWidth", "maxWidth", "maxHeight", "animationDuration", "contentTemplate", "selectors", "headerTemplate", "showOn", "containment", "appendTo"],
                    outputs: ["showing", "shown", "hiding", "hidden"]
                }] }
    ];
    /** @nocollapse */
    IgPopoverComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgPopoverComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgNotifierComponent = /** @class */ (function (_super) {
    __extends(IgNotifierComponent, _super);
    function IgNotifierComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgNotifierComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    /**
     * @return {?}
     */
    IgNotifierComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elem = jQuery(document).find("#" + this.widgetId);
        if (elem.length === 1) {
            this._el = elem;
            this._events = new Map();
            //events binding
            /** @type {?} */
            var that_1 = this;
            /** @type {?} */
            var evtName;
            for (var propt in jQuery.ui[this._widgetName].prototype.events) {
                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
                this._events[evtName] = propt;
                jQuery(this._el).on(evtName, (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that_1[that_1._events[evt.type]].emit({ event: evt, ui: ui });
                }));
            }
            jQuery(this._el)[this._widgetName](this.options);
        }
        else {
            _super.prototype.ngOnInit.call(this);
        }
    };
    /**
     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
     *
     * @param state    The state to show notification for.
     * @param message    Optional message to show, overrides defaults.
     */
    /* istanbul ignore next */
    /**
     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
     *
     * @param {?} state    The state to show notification for.
     * @param {?=} message    Optional message to show, overrides defaults.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNotifierComponent.prototype.notify = /**
     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
     *
     * @param {?} state    The state to show notification for.
     * @param {?=} message    Optional message to show, overrides defaults.
     * @return {?}
     */
    /* istanbul ignore next */
    function (state, message) { return; };
    /**
     * Returns true if the notification is currently visible
     */
    /* istanbul ignore next */
    /**
     * Returns true if the notification is currently visible
     * @return {?}
     */
    /* istanbul ignore next */
    IgNotifierComponent.prototype.isVisible = /**
     * Returns true if the notification is currently visible
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNotifierComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgNotifierComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-notifier",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "closeOnBlur", "direction", "position", "width", "height", "minWidth", "maxWidth", "maxHeight", "animationDuration", "contentTemplate", "selectors", "headerTemplate", "showOn", "containment", "appendTo", "state", "notifyLevel", "mode", "allowCSSOnTarget", "messages", "showIcon", "animationSlideDistance"],
                    outputs: ["showing", "shown", "hiding", "hidden"]
                }] }
    ];
    /** @nocollapse */
    IgNotifierComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgNotifierComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgRatingComponent = /** @class */ (function (_super) {
    __extends(IgRatingComponent, _super);
    function IgRatingComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Gets reference to [igValidator](ui.igvalidator) used by igRating.
     *
     * @param destroy     Request to destroy validator.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to [igValidator](ui.igvalidator) used by igRating.
     *
     * @param {?=} destroy     Request to destroy validator.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.validator = /**
     * Gets reference to [igValidator](ui.igvalidator) used by igRating.
     *
     * @param {?=} destroy     Request to destroy validator.
     * @return {?}
     */
    /* istanbul ignore next */
    function (destroy) { return; };
    /**
     * Triggers validation.
     */
    /* istanbul ignore next */
    /**
     * Triggers validation.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.validate = /**
     * Triggers validation.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets (selected) value.
     *
     * @param val     New value which is rendered with selected css.
     * @return number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets (selected) value.
     *
     * @param {?} val     New value which is rendered with selected css.
     * @return {?} number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.value = /**
     * Gets/Sets (selected) value.
     *
     * @param {?} val     New value which is rendered with selected css.
     * @return {?} number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    function (val) { return; };
    /**
     * Gets/Sets hover value.
     *
     * @param val     New value which will be rendered with hover css when rating gets mouse.
     * @return number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets hover value.
     *
     * @param {?=} val     New value which will be rendered with hover css when rating gets mouse.
     * @return {?} number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.valueHover = /**
     * Gets/Sets hover value.
     *
     * @param {?=} val     New value which will be rendered with hover css when rating gets mouse.
     * @return {?} number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    function (val) { return; };
    /**
     * Checks if igRating has focus.
     */
    /* istanbul ignore next */
    /**
     * Checks if igRating has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.hasFocus = /**
     * Checks if igRating has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     */
    /* istanbul ignore next */
    /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.focus = /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys igRating widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys igRating widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.destroy = /**
     * Destroys igRating widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgRatingComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-rating",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "vertical", "value", "valueHover", "voteCount", "voteWidth", "voteHeight", "swapDirection", "valueAsPercent", "focusable", "precision", "precisionZeroVote", "roundedDecimalPlaces", "theme", "validatorOptions", "cssVotes"],
                    outputs: ["hoverChange", "valueChange"]
                }] }
    ];
    /** @nocollapse */
    IgRatingComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgRatingComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgVideoPlayerComponent = /** @class */ (function (_super) {
    __extends(IgVideoPlayerComponent, _super);
    function IgVideoPlayerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns the element on which the widget was instantiated
     */
    /* istanbul ignore next */
    /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.widget = /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Hide the add message if shown.
     */
    /* istanbul ignore next */
    /**
     * Hide the add message if shown.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.hideAdMessage = /**
     * Hide the add message if shown.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Play a linked commercial for this video.
     *
     * @param commercial     Specify the linked commercial to play.
     */
    /* istanbul ignore next */
    /**
     * Play a linked commercial for this video.
     *
     * @param {?} commercial     Specify the linked commercial to play.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.playCommercial = /**
     * Play a linked commercial for this video.
     *
     * @param {?} commercial     Specify the linked commercial to play.
     * @return {?}
     */
    /* istanbul ignore next */
    function (commercial) { return; };
    /**
     * Shows the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    /* istanbul ignore next */
    /**
     * Shows the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.showBanner = /**
     * Shows the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Hide the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    /* istanbul ignore next */
    /**
     * Hide the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.hideBanner = /**
     * Hide the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    /**
     * Resets the commercials, to be shown again.
     */
    /* istanbul ignore next */
    /**
     * Resets the commercials, to be shown again.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.resetCommercialsShow = /**
     * Resets the commercials, to be shown again.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     */
    /* istanbul ignore next */
    /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.togglePlay = /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Start playing current loaded video if any.
     */
    /* istanbul ignore next */
    /**
     * Start playing current loaded video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.play = /**
     * Start playing current loaded video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Pause the currently playing video if any.
     */
    /* istanbul ignore next */
    /**
     * Pause the currently playing video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.pause = /**
     * Pause the currently playing video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets/Sets the current time of the playing video.
     *
     * @param val     Specify the playback position in seconds to navigate to.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets the current time of the playing video.
     *
     * @param {?} val     Specify the playback position in seconds to navigate to.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.currentTime = /**
     * Gets/Sets the current time of the playing video.
     *
     * @param {?} val     Specify the playback position in seconds to navigate to.
     * @return {?}
     */
    /* istanbul ignore next */
    function (val) { return; };
    /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param scaleFactor    Specify scale factor between 0 and 1.
     */
    /* istanbul ignore next */
    /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param {?=} scaleFactor    Specify scale factor between 0 and 1.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.screenshot = /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param {?=} scaleFactor    Specify scale factor between 0 and 1.
     * @return {?}
     */
    /* istanbul ignore next */
    function (scaleFactor) { return; };
    /**
     * Get whether the current browser supports video tag.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports video tag.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsVideo = /**
     * Get whether the current browser supports video tag.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Get whether the current browser supports H.264 codec.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports H.264 codec.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsH264BaselineVideo = /**
     * Get whether the current browser supports H.264 codec.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Get whether the current browser supports Theora codec.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports Theora codec.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsOggTheoraVideo = /**
     * Get whether the current browser supports Theora codec.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Get whether the current browser supports WEBM codec.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports WEBM codec.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsWebmVideo = /**
     * Get whether the current browser supports WEBM codec.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns whether the currently played video is paused.
     */
    /* istanbul ignore next */
    /**
     * Returns whether the currently played video is paused.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.paused = /**
     * Returns whether the currently played video is paused.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Get whether the current played video has ended.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current played video has ended.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.ended = /**
     * Get whether the current played video has ended.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     */
    /* istanbul ignore next */
    /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.duration = /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Get whether the player is seeking to find the new playback position specified.
     */
    /* istanbul ignore next */
    /**
     * Get whether the player is seeking to find the new playback position specified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.seeking = /**
     * Get whether the player is seeking to find the new playback position specified.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgVideoPlayerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-video-player",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "sources", "width", "height", "posterUrl", "preload", "autoplay", "autohide", "volumeAutohideDelay", "centerButtonHideDelay", "loop", "browserControls", "fullscreen", "volume", "muted", "title", "showSeekTime", "progressLabelFormat", "bookmarks", "relatedVideos", "banners", "commercials"],
                    outputs: ["ended", "playing", "paused", "buffering", "progress", "waiting", "bookmarkHit", "bookmarkClick", "enterFullScreen", "exitFullScreen", "relatedVideoClick", "bannerVisible", "bannerHidden", "bannerClick", "browserNotSupported"]
                }] }
    ];
    /** @nocollapse */
    IgVideoPlayerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgVideoPlayerComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgRadialMenuComponent = /** @class */ (function (_super) {
    __extends(IgRadialMenuComponent, _super);
    function IgRadialMenuComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @param {?} itemKey
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    IgRadialMenuComponent.prototype.itemOption = /* istanbul ignore next */
    /**
     * @param {?} itemKey
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (itemKey, key, value) { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgRadialMenuComponent.prototype.exportVisualData = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgRadialMenuComponent.prototype.flush = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgRadialMenuComponent.prototype.destroy = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgRadialMenuComponent.prototype.styleUpdated = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    IgRadialMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-radial-menu",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "items", "currentOpenMenuItemName", "centerButtonContentWidth", "centerButtonContentHeight", "centerButtonClosedFill", "centerButtonClosedStroke", "centerButtonFill", "centerButtonHotTrackFill", "centerButtonHotTrackStroke", "centerButtonStroke", "centerButtonStrokeThickness", "font", "isOpen", "menuBackground", "menuItemOpenCloseAnimationDuration", "menuItemOpenCloseAnimationEasingFunction", "menuOpenCloseAnimationDuration", "menuOpenCloseAnimationEasingFunction", "minWedgeCount", "outerRingFill", "outerRingThickness", "outerRingStroke", "outerRingStrokeThickness", "rotationInDegrees", "rotationAsPercentageOfWedge", "wedgePaddingInDegrees", "pixelScalingRatio"],
                    outputs: ["formatLabel", "alignLabel", "valueChanged"]
                }] }
    ];
    /** @nocollapse */
    IgRadialMenuComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgRadialMenuComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgSplitButtonComponent = /** @class */ (function (_super) {
    __extends(IgSplitButtonComponent, _super);
    function IgSplitButtonComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Switch to given igToolbar button.
     *
     * @param button . The button jQuery element.
     */
    /* istanbul ignore next */
    /**
     * Switch to given igToolbar button.
     *
     * @param {?} button . The button jQuery element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.switchToButton = /**
     * Switch to given igToolbar button.
     *
     * @param {?} button . The button jQuery element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (button) { return; };
    /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param e The igSplitButton to be expanded/collapsed.
     */
    /* istanbul ignore next */
    /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param {?} e The igSplitButton to be expanded/collapsed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.toggle = /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param {?} e The igSplitButton to be expanded/collapsed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    /**
     * Collapse the widget.
     *
     * @param e Indicates the browser event which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Collapse the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.collapse = /**
     * Collapse the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    /**
     * Expands the widget.
     *
     * @param e Indicates the browser event which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Expands the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.expand = /**
     * Expands the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    /**
     * Destroy the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroy the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.destroy = /**
     * Destroy the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgSplitButtonComponent.prototype.widget = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    IgSplitButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-split-button",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "items", "defaultItemName", "swapDefaultEnabled"],
                    outputs: ["click", "expanded", "expanding", "collapsed", "collapsing"]
                }] }
    ];
    /** @nocollapse */
    IgSplitButtonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgSplitButtonComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgSpreadsheetComponent = /** @class */ (function (_super) {
    __extends(IgSpreadsheetComponent, _super);
    function IgSpreadsheetComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns an object that represents the pane with the focus.
     */
    /* istanbul ignore next */
    /**
     * Returns an object that represents the pane with the focus.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getActivePane = /**
     * Returns an object that represents the pane with the focus.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns an object that represents the current selection of the active pane.
     */
    /* istanbul ignore next */
    /**
     * Returns an object that represents the current selection of the active pane.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getActiveSelection = /**
     * Returns an object that represents the current selection of the active pane.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
     *				Any changes made to this object will affect all the objects in the selection. So for example, the
    *				Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
    *				cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
    *				affected by the selection will have their Font.Name updated to that value.
    */
    /* istanbul ignore next */
    /**
     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
     * 				Any changes made to this object will affect all the objects in the selection. So for example, the
     * 				Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
     * 				cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
     * 				affected by the selection will have their Font.Name updated to that value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getActiveSelectionCellRangeFormat = /**
     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
     * 				Any changes made to this object will affect all the objects in the selection. So for example, the
     * 				Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
     * 				cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
     * 				affected by the selection will have their Font.Name updated to that value.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
     */
    /* istanbul ignore next */
    /**
     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getIsRenamingWorksheet = /**
     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Returns an array of the panes for the activeWorksheet.
     *
    *				 returnType="ig.spreadsheet.SpreadsheetPane[]"
    */
    /* istanbul ignore next */
    /**
     * Returns an array of the panes for the activeWorksheet.
     *
     * 				 returnType="ig.spreadsheet.SpreadsheetPane[]"
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getPanes = /**
     * Returns an array of the panes for the activeWorksheet.
     *
     * 				 returnType="ig.spreadsheet.SpreadsheetPane[]"
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Executes the action associated with the specified id.
     *
     * @param action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
     */
    /* istanbul ignore next */
    /**
     * Executes the action associated with the specified id.
     *
     * @param {?} action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.executeAction = /**
     * Executes the action associated with the specified id.
     *
     * @param {?} action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
     * @return {?}
     */
    /* istanbul ignore next */
    function (action) { return; };
    /**
     * Forces any pending deferred work to render on the spreadsheet before continuing
     */
    /* istanbul ignore next */
    /**
     * Forces any pending deferred work to render on the spreadsheet before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.flush = /**
     * Forces any pending deferred work to render on the spreadsheet before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
     */
    /* istanbul ignore next */
    /**
     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.styleUpdated = /**
     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgSpreadsheetComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-spreadsheet",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "activeCell", "isScrollLocked", "activeWorksheet", "allowAddWorksheet", "allowDeleteWorksheet", "areGridlinesVisible", "areHeadersVisible", "enterKeyNavigationDirection", "isEnterKeyNavigationEnabled", "isFormulaBarVisible", "isInEndMode", "isUndoEnabled", "nameBoxWidth", "selectionMode", "selectedWorksheets", "validationInputMessagePosition", "workbook", "zoomLevel"],
                    outputs: ["actionExecuted", "actionExecuting", "activeCellChanged", "activePaneChanged", "activeWorksheetChanged", "editRangePasswordNeeded", "hyperlinkExecuting", "selectionChanged", "userPromptDisplaying", "workbookDirtied"]
                }] }
    ];
    /** @nocollapse */
    IgSpreadsheetComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgSpreadsheetComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgSchedulerComponent = /** @class */ (function (_super) {
    __extends(IgSchedulerComponent, _super);
    function IgSchedulerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Gets reference to appointment by id
     *
     * @param id
     */
    /* istanbul ignore next */
    /**
     * Gets reference to appointment by id
     *
     * @param {?} id
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.getAppointmentById = /**
     * Gets reference to appointment by id
     *
     * @param {?} id
     * @return {?}
     */
    /* istanbul ignore next */
    function (id) { return; };
    /**
     * Creates a new appointment and renders it to the scheduler
     *
     * @param appointment
     */
    /* istanbul ignore next */
    /**
     * Creates a new appointment and renders it to the scheduler
     *
     * @param {?} appointment
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.createAppointment = /**
     * Creates a new appointment and renders it to the scheduler
     *
     * @param {?} appointment
     * @return {?}
     */
    /* istanbul ignore next */
    function (appointment) { return; };
    /**
     * Deletes appointment from the appointment collection
     *
     * @param appointment	appointment
     */
    /* istanbul ignore next */
    /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.deleteAppointment = /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @return {?}
     */
    /* istanbul ignore next */
    function (appointment) { return; };
    /**
     * Deletes appointment from the appointment collection
     *
     * @param appointment	appointment
     * @param updateAppoinment	updateAppoinment
     */
    /* istanbul ignore next */
    /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @param {?} updateAppoinment 	updateAppoinment
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.editAppointment = /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @param {?} updateAppoinment 	updateAppoinment
     * @return {?}
     */
    /* istanbul ignore next */
    function (appointment, updateAppoinment) { return; };
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to the today UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the today UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.todayButton = /**
     * Gets reference to the today UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to the previous UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the previous UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.previousButton = /**
     * Gets reference to the previous UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to the date range UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the date range UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.dateRangeButton = /**
     * Gets reference to the date range UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to the next UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the next UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.nextButton = /**
     * Gets reference to the next UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    /**
     * Gets reference to the jQuery calendar UI control.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the jQuery calendar UI control.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.getCalendar = /**
     * Gets reference to the jQuery calendar UI control.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    IgSchedulerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-scheduler",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "views", "viewMode", "selectedDate", "enableTodayButton", "width", "height", "agendaViewSettings", "monthViewSettings", "appointmentDialogSuppress"],
                    outputs: ["agendaRangeChanging", "agendaRangeChanged", "daySelected", "monthChanging", "monthChanged", "rendering", "rendered", "viewChanging", "viewChanged", "appointmentDialogOpening", "appointmentDialogOpened", "appointmentDialogClosing", "appointmentDialogClosed", "appointmentCreating", "appointmentCreated", "appointmentDeleting", "appointmentDeleted", "appointmentEditing", "appointmentEdited"]
                }] }
    ];
    /** @nocollapse */
    IgSchedulerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgSchedulerComponent;
}(IgControlBase));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgniteUIModule = /** @class */ (function () {
    function IgniteUIModule() {
    }
    IgniteUIModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [Column, IgGridMultiColumnHeadersFeature, IgGridSortingFeature, IgGridFilteringFeature, IgGridPagingFeature, IgGridUpdatingFeature, IgGridGroupByFeature, IgGridColumnMovingFeature, IgGridHidingFeature, IgGridCellMergingFeature, IgGridResponsiveFeature, IgGridResizingFeature, IgGridSelectionFeature, IgGridRowSelectorsFeature, IgGridSummariesFeature, IgGridColumnFixingFeature, IgGridTooltipsFeature, IgGridAppendRowsOnDemandFeature, Features, IgGridComponent, IgTreeGridComponent, IgHierarchicalGridComponent, IgComboComponent, IgCheckboxEditorComponent, IgCurrencyEditorComponent, IgDateEditorComponent, IgDatePickerComponent, IgDatePickerComponent, IgTimePickerComponent, IgMaskEditorComponent, IgNumericEditorComponent, IgPercentEditorComponent, IgTextEditorComponent, IgTreeComponent, IgDialogComponent, IgSplitterComponent, IgLayoutManagerComponent, IgTileManagerComponent, IgHtmlEditorComponent, IgValidatorComponent, IgPivotDataSelectorComponent, IgPivotGridComponent, IgDataChartComponent, IgPieChartComponent, IgDoughnutChartComponent, IgFunnelChartComponent, IgRadialGaugeComponent, IgZoombarComponent, IgMapComponent, IgSparklineComponent, IgBulletGraphComponent, IgLinearGaugeComponent, IgQRCodeBarcodeComponent, IgUploadComponent, IgPopoverComponent, IgNotifierComponent, IgRatingComponent, IgVideoPlayerComponent, IgRadialMenuComponent, IgSplitButtonComponent, IgSpreadsheetComponent, IgSchedulerComponent],
                    exports: [Column, IgGridMultiColumnHeadersFeature, IgGridSortingFeature, IgGridFilteringFeature, IgGridPagingFeature, IgGridUpdatingFeature, IgGridGroupByFeature, IgGridColumnMovingFeature, IgGridHidingFeature, IgGridCellMergingFeature, IgGridResponsiveFeature, IgGridResizingFeature, IgGridSelectionFeature, IgGridRowSelectorsFeature, IgGridSummariesFeature, IgGridColumnFixingFeature, IgGridTooltipsFeature, IgGridAppendRowsOnDemandFeature, Features, IgGridComponent, IgTreeGridComponent, IgHierarchicalGridComponent, IgComboComponent, IgCheckboxEditorComponent, IgCurrencyEditorComponent, IgDateEditorComponent, IgDatePickerComponent, IgDatePickerComponent, IgTimePickerComponent, IgMaskEditorComponent, IgNumericEditorComponent, IgPercentEditorComponent, IgTextEditorComponent, IgTreeComponent, IgDialogComponent, IgSplitterComponent, IgLayoutManagerComponent, IgTileManagerComponent, IgHtmlEditorComponent, IgValidatorComponent, IgPivotDataSelectorComponent, IgPivotGridComponent, IgDataChartComponent, IgPieChartComponent, IgDoughnutChartComponent, IgFunnelChartComponent, IgRadialGaugeComponent, IgZoombarComponent, IgMapComponent, IgSparklineComponent, IgBulletGraphComponent, IgLinearGaugeComponent, IgQRCodeBarcodeComponent, IgUploadComponent, IgPopoverComponent, IgNotifierComponent, IgRatingComponent, IgVideoPlayerComponent, IgRadialMenuComponent, IgSplitButtonComponent, IgSpreadsheetComponent, IgSchedulerComponent]
                },] }
    ];
    return IgniteUIModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Column, Features, IgBulletGraphComponent, IgCheckboxEditorComponent, IgComboComponent, IgCurrencyEditorComponent, IgDataChartComponent, IgDateEditorComponent, IgDatePickerComponent, IgDialogComponent, IgDoughnutChartComponent, IgFunnelChartComponent, IgGridAppendRowsOnDemandFeature, IgGridCellMergingFeature, IgGridColumnFixingFeature, IgGridColumnMovingFeature, IgGridComponent, IgGridFilteringFeature, IgGridGroupByFeature, IgGridHidingFeature, IgGridMultiColumnHeadersFeature, IgGridPagingFeature, IgGridResizingFeature, IgGridResponsiveFeature, IgGridRowSelectorsFeature, IgGridSelectionFeature, IgGridSortingFeature, IgGridSummariesFeature, IgGridTooltipsFeature, IgGridUpdatingFeature, IgHierarchicalGridComponent, IgHtmlEditorComponent, IgLayoutManagerComponent, IgLinearGaugeComponent, IgMapComponent, IgMaskEditorComponent, IgNotifierComponent, IgNumericEditorComponent, IgPercentEditorComponent, IgPieChartComponent, IgPivotDataSelectorComponent, IgPivotGridComponent, IgPopoverComponent, IgQRCodeBarcodeComponent, IgRadialGaugeComponent, IgRadialMenuComponent, IgRatingComponent, IgSchedulerComponent, IgSparklineComponent, IgSplitButtonComponent, IgSplitterComponent, IgSpreadsheetComponent, IgTextEditorComponent, IgTileManagerComponent, IgTimePickerComponent, IgTreeComponent, IgTreeGridComponent, IgUploadComponent, IgValidatorComponent, IgVideoPlayerComponent, IgZoombarComponent, IgniteUIModule, Feature as ɵa, IgGridBase as ɵb, IgControlBase as ɵc, IgEditorBase as ɵd, IgContentControlBase as ɵe };
//# sourceMappingURL=igniteui-angular-wrappers.js.map
