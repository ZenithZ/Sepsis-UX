/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgSplitButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgSplitButtonComponent, _super);
    function IgSplitButtonComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Switch to given igToolbar button.
     *
     * @param button . The button jQuery element.
     */
    /* istanbul ignore next */
    /**
     * Switch to given igToolbar button.
     *
     * @param {?} button . The button jQuery element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.switchToButton = /**
     * Switch to given igToolbar button.
     *
     * @param {?} button . The button jQuery element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (button) { return; };
    ;
    /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param e The igSplitButton to be expanded/collapsed.
     */
    /* istanbul ignore next */
    /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param {?} e The igSplitButton to be expanded/collapsed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.toggle = /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param {?} e The igSplitButton to be expanded/collapsed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    ;
    /**
     * Collapse the widget.
     *
     * @param e Indicates the browser event which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Collapse the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.collapse = /**
     * Collapse the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    ;
    /**
     * Expands the widget.
     *
     * @param e Indicates the browser event which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Expands the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.expand = /**
     * Expands the widget.
     *
     * @param {?=} e Indicates the browser event which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    ;
    /**
     * Destroy the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroy the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSplitButtonComponent.prototype.destroy = /**
     * Destroy the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgSplitButtonComponent.prototype.widget = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    IgSplitButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-split-button",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "items", "defaultItemName", "swapDefaultEnabled"],
                    outputs: ["click", "expanded", "expanding", "collapsed", "collapsing"]
                }] }
    ];
    /** @nocollapse */
    IgSplitButtonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgSplitButtonComponent;
}(IgControlBase));
export { IgSplitButtonComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdzcGxpdGJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnc3BsaXRidXR0b24vaWdzcGxpdGJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0Q7SUFNNEMsa0RBQTRCO0lBQ3BFLGdDQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUFJLGtCQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUM7SUFBRSxDQUFDO0lBR25MOzs7O09BSUc7SUFDSCwwQkFBMEI7Ozs7Ozs7O0lBQ25CLCtDQUFjOzs7Ozs7O0lBQXJCLFVBQXNCLE1BQWMsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFHeEQ7Ozs7T0FJRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIsdUNBQU07Ozs7Ozs7SUFBYixVQUFjLENBQVMsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFHN0M7Ozs7T0FJRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIseUNBQVE7Ozs7Ozs7SUFBZixVQUFnQixDQUFVLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBR2hEOzs7O09BSUc7SUFDSCwwQkFBMEI7Ozs7Ozs7O0lBQ25CLHVDQUFNOzs7Ozs7O0lBQWIsVUFBYyxDQUFVLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRTlDOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsd0NBQU87Ozs7O0lBQWQsY0FBeUIsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBQ25DLDBCQUEwQjs7Ozs7SUFDbkIsdUNBQU07Ozs7SUFBYixjQUF3QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7O2dCQW5EckMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsb0JBQW9CLENBQUM7b0JBQ2xJLE9BQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUM7aUJBQ3pFOzs7O2dCQVJRLFVBQVU7Z0JBQUUsUUFBUTtnQkFBRSxlQUFlO2dCQUFhLGVBQWU7Z0JBQUUsaUJBQWlCOztJQXVEN0YsNkJBQUM7Q0FBQSxBQXBERCxDQU00QyxhQUFhLEdBOEN4RDtTQTlDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBDb21wb25lbnQsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udHJvbGJhc2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctc3BsaXQtYnV0dG9uXCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czogW1wid2lkZ2V0SWRcIiwgXCJvcHRpb25zXCIsIFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIiwgXCJkaXNhYmxlZFwiLCBcImNyZWF0ZVwiLCBcIml0ZW1zXCIsIFwiZGVmYXVsdEl0ZW1OYW1lXCIsIFwic3dhcERlZmF1bHRFbmFibGVkXCJdLFxuICAgIG91dHB1dHM6IFtcImNsaWNrXCIsIFwiZXhwYW5kZWRcIiwgXCJleHBhbmRpbmdcIiwgXCJjb2xsYXBzZWRcIiwgXCJjb2xsYXBzaW5nXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnU3BsaXRCdXR0b25Db21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnU3BsaXRCdXR0b24+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyKTsgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTd2l0Y2ggdG8gZ2l2ZW4gaWdUb29sYmFyIGJ1dHRvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBidXR0b24gLiBUaGUgYnV0dG9uIGpRdWVyeSBlbGVtZW50LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHN3aXRjaFRvQnV0dG9uKGJ1dHRvbjogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHdpZGdldCBzdGF0ZSBiZXR3ZWVuIGNvbGxhcHNlZCBhbmQgZXhwYW5kZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSBUaGUgaWdTcGxpdEJ1dHRvbiB0byBiZSBleHBhbmRlZC9jb2xsYXBzZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdG9nZ2xlKGU6IE9iamVjdCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuXG4gICAgLyoqXG4gICAgICogQ29sbGFwc2UgdGhlIHdpZGdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIEluZGljYXRlcyB0aGUgYnJvd3NlciBldmVudCB3aGljaCB0cmlnZ2VyZWQgdGhpcyBhY3Rpb24gKG5vdCBBUEkpLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGNvbGxhcHNlKGU/OiBPYmplY3QpOiBPYmplY3QgeyByZXR1cm47IH07XG5cblxuICAgIC8qKlxuICAgICAqIEV4cGFuZHMgdGhlIHdpZGdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIEluZGljYXRlcyB0aGUgYnJvd3NlciBldmVudCB3aGljaCB0cmlnZ2VyZWQgdGhpcyBhY3Rpb24gKG5vdCBBUEkpLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGV4cGFuZChlPzogT2JqZWN0KTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgd2lkZ2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB3aWRnZXQoKTogdm9pZCB7IHJldHVybjsgfTtcbn0iXX0=