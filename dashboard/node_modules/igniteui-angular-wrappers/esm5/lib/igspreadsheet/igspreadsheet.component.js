/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgSpreadsheetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgSpreadsheetComponent, _super);
    function IgSpreadsheetComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns an object that represents the pane with the focus.
     */
    /* istanbul ignore next */
    /**
     * Returns an object that represents the pane with the focus.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getActivePane = /**
     * Returns an object that represents the pane with the focus.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns an object that represents the current selection of the active pane.
     */
    /* istanbul ignore next */
    /**
     * Returns an object that represents the current selection of the active pane.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getActiveSelection = /**
     * Returns an object that represents the current selection of the active pane.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
     *				Any changes made to this object will affect all the objects in the selection. So for example, the
    *				Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
    *				cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
    *				affected by the selection will have their Font.Name updated to that value.
    */
    /* istanbul ignore next */
    /**
     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
     * 				Any changes made to this object will affect all the objects in the selection. So for example, the
     * 				Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
     * 				cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
     * 				affected by the selection will have their Font.Name updated to that value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getActiveSelectionCellRangeFormat = /**
     * Returns an object used to get the formatting of the activeCell and where modifications are applied to the entire active selection.
     * 				Any changes made to this object will affect all the objects in the selection. So for example, the
     * 				Font.Name may return "Arial" because the active cell has that as its resolved font name even though the other
     * 				cells are using a different font but if you set the Font.Name of this object to "Arial" then all the objects
     * 				affected by the selection will have their Font.Name updated to that value.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
     */
    /* istanbul ignore next */
    /**
     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getIsRenamingWorksheet = /**
     * Returns a boolean indicating if the user is currently editing the name of the active worksheet.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns an array of the panes for the activeWorksheet.
     *
    *				 returnType="ig.spreadsheet.SpreadsheetPane[]"
    */
    /* istanbul ignore next */
    /**
     * Returns an array of the panes for the activeWorksheet.
     *
     * 				 returnType="ig.spreadsheet.SpreadsheetPane[]"
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.getPanes = /**
     * Returns an array of the panes for the activeWorksheet.
     *
     * 				 returnType="ig.spreadsheet.SpreadsheetPane[]"
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Executes the action associated with the specified id.
     *
     * @param action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
     */
    /* istanbul ignore next */
    /**
     * Executes the action associated with the specified id.
     *
     * @param {?} action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.executeAction = /**
     * Executes the action associated with the specified id.
     *
     * @param {?} action An [enumeration](ig.spreadsheet.SpreadsheetAction) or string that identifies the action to execute.
     * @return {?}
     */
    /* istanbul ignore next */
    function (action) { return; };
    ;
    /**
     * Forces any pending deferred work to render on the spreadsheet before continuing
     */
    /* istanbul ignore next */
    /**
     * Forces any pending deferred work to render on the spreadsheet before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.flush = /**
     * Forces any pending deferred work to render on the spreadsheet before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
     */
    /* istanbul ignore next */
    /**
     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSpreadsheetComponent.prototype.styleUpdated = /**
     * Notify the spreadsheet that style information used for rendering the spreadsheet may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgSpreadsheetComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-spreadsheet",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "activeCell", "isScrollLocked", "activeWorksheet", "allowAddWorksheet", "allowDeleteWorksheet", "areGridlinesVisible", "areHeadersVisible", "enterKeyNavigationDirection", "isEnterKeyNavigationEnabled", "isFormulaBarVisible", "isInEndMode", "isUndoEnabled", "nameBoxWidth", "selectionMode", "selectedWorksheets", "validationInputMessagePosition", "workbook", "zoomLevel"],
                    outputs: ["actionExecuted", "actionExecuting", "activeCellChanged", "activePaneChanged", "activeWorksheetChanged", "editRangePasswordNeeded", "hyperlinkExecuting", "selectionChanged", "userPromptDisplaying", "workbookDirtied"]
                }] }
    ];
    /** @nocollapse */
    IgSpreadsheetComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgSpreadsheetComponent;
}(IgControlBase));
export { IgSpreadsheetComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdzcHJlYWRzaGVldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnc3ByZWFkc2hlZXQvaWdzcHJlYWRzaGVldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0Q7SUFNNEMsa0RBQTRCO0lBQ3BFLGdDQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUMxSCxrQkFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDO0lBQ2xELENBQUM7SUFDRDs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLDhDQUFhOzs7OztJQUFwQixjQUFpQyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFM0M7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQixtREFBa0I7Ozs7O0lBQXpCLGNBQXNDLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVoRDs7Ozs7O01BTUU7SUFDRiwwQkFBMEI7Ozs7Ozs7Ozs7SUFDbkIsa0VBQWlDOzs7Ozs7Ozs7SUFBeEMsY0FBcUQsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRS9EOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsdURBQXNCOzs7OztJQUE3QixjQUEyQyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFckQ7Ozs7TUFJRTtJQUNGLDBCQUEwQjs7Ozs7Ozs7SUFDbkIseUNBQVE7Ozs7Ozs7SUFBZixjQUEwQixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFcEM7Ozs7T0FJRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIsOENBQWE7Ozs7Ozs7SUFBcEIsVUFBcUIsTUFBYyxJQUFhLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUUxRDs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLHNDQUFLOzs7OztJQUFaLGNBQXVCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVqQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLHdDQUFPOzs7OztJQUFkLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVuQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLDZDQUFZOzs7OztJQUFuQixjQUE4QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7O2dCQXRFM0MsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxzQkFBc0IsRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsRUFBRSw2QkFBNkIsRUFBRSw2QkFBNkIsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUsZ0NBQWdDLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQztvQkFDdGQsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsd0JBQXdCLEVBQUUseUJBQXlCLEVBQUUsb0JBQW9CLEVBQUUsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsaUJBQWlCLENBQUM7aUJBQ3JPOzs7O2dCQVJtQixVQUFVO2dCQUFFLFFBQVE7Z0JBQUUsZUFBZTtnQkFBRSxlQUFlO2dCQUFFLGlCQUFpQjs7SUEwRTdGLDZCQUFDO0NBQUEsQUF2RUQsQ0FNNEMsYUFBYSxHQWlFeEQ7U0FqRVksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElnQ29udHJvbEJhc2UgfSBmcm9tIFwiLi4vaWdjb250cm9sYmFzZS9pZ2NvbnRyb2xiYXNlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImlnLXNwcmVhZHNoZWV0XCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czogW1wid2lkZ2V0SWRcIiwgXCJvcHRpb25zXCIsIFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIiwgXCJkaXNhYmxlZFwiLCBcImNyZWF0ZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwiYWN0aXZlQ2VsbFwiLCBcImlzU2Nyb2xsTG9ja2VkXCIsIFwiYWN0aXZlV29ya3NoZWV0XCIsIFwiYWxsb3dBZGRXb3Jrc2hlZXRcIiwgXCJhbGxvd0RlbGV0ZVdvcmtzaGVldFwiLCBcImFyZUdyaWRsaW5lc1Zpc2libGVcIiwgXCJhcmVIZWFkZXJzVmlzaWJsZVwiLCBcImVudGVyS2V5TmF2aWdhdGlvbkRpcmVjdGlvblwiLCBcImlzRW50ZXJLZXlOYXZpZ2F0aW9uRW5hYmxlZFwiLCBcImlzRm9ybXVsYUJhclZpc2libGVcIiwgXCJpc0luRW5kTW9kZVwiLCBcImlzVW5kb0VuYWJsZWRcIiwgXCJuYW1lQm94V2lkdGhcIiwgXCJzZWxlY3Rpb25Nb2RlXCIsIFwic2VsZWN0ZWRXb3Jrc2hlZXRzXCIsIFwidmFsaWRhdGlvbklucHV0TWVzc2FnZVBvc2l0aW9uXCIsIFwid29ya2Jvb2tcIiwgXCJ6b29tTGV2ZWxcIl0sXG4gICAgb3V0cHV0czogW1wiYWN0aW9uRXhlY3V0ZWRcIiwgXCJhY3Rpb25FeGVjdXRpbmdcIiwgXCJhY3RpdmVDZWxsQ2hhbmdlZFwiLCBcImFjdGl2ZVBhbmVDaGFuZ2VkXCIsIFwiYWN0aXZlV29ya3NoZWV0Q2hhbmdlZFwiLCBcImVkaXRSYW5nZVBhc3N3b3JkTmVlZGVkXCIsIFwiaHlwZXJsaW5rRXhlY3V0aW5nXCIsIFwic2VsZWN0aW9uQ2hhbmdlZFwiLCBcInVzZXJQcm9tcHREaXNwbGF5aW5nXCIsIFwid29ya2Jvb2tEaXJ0aWVkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnU3ByZWFkc2hlZXRDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnU3ByZWFkc2hlZXQ+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICAgICAgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBwYW5lIHdpdGggdGhlIGZvY3VzLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldEFjdGl2ZVBhbmUoKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBvZiB0aGUgYWN0aXZlIHBhbmUuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0QWN0aXZlU2VsZWN0aW9uKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb2JqZWN0IHVzZWQgdG8gZ2V0IHRoZSBmb3JtYXR0aW5nIG9mIHRoZSBhY3RpdmVDZWxsIGFuZCB3aGVyZSBtb2RpZmljYXRpb25zIGFyZSBhcHBsaWVkIHRvIHRoZSBlbnRpcmUgYWN0aXZlIHNlbGVjdGlvbi5cbiAgICAgKlx0XHRcdFx0QW55IGNoYW5nZXMgbWFkZSB0byB0aGlzIG9iamVjdCB3aWxsIGFmZmVjdCBhbGwgdGhlIG9iamVjdHMgaW4gdGhlIHNlbGVjdGlvbi4gU28gZm9yIGV4YW1wbGUsIHRoZSBcbiAgICAqXHRcdFx0XHRGb250Lk5hbWUgbWF5IHJldHVybiBcIkFyaWFsXCIgYmVjYXVzZSB0aGUgYWN0aXZlIGNlbGwgaGFzIHRoYXQgYXMgaXRzIHJlc29sdmVkIGZvbnQgbmFtZSBldmVuIHRob3VnaCB0aGUgb3RoZXIgXG4gICAgKlx0XHRcdFx0Y2VsbHMgYXJlIHVzaW5nIGEgZGlmZmVyZW50IGZvbnQgYnV0IGlmIHlvdSBzZXQgdGhlIEZvbnQuTmFtZSBvZiB0aGlzIG9iamVjdCB0byBcIkFyaWFsXCIgdGhlbiBhbGwgdGhlIG9iamVjdHMgXG4gICAgKlx0XHRcdFx0YWZmZWN0ZWQgYnkgdGhlIHNlbGVjdGlvbiB3aWxsIGhhdmUgdGhlaXIgRm9udC5OYW1lIHVwZGF0ZWQgdG8gdGhhdCB2YWx1ZS5cbiAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldEFjdGl2ZVNlbGVjdGlvbkNlbGxSYW5nZUZvcm1hdCgpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBlZGl0aW5nIHRoZSBuYW1lIG9mIHRoZSBhY3RpdmUgd29ya3NoZWV0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldElzUmVuYW1pbmdXb3Jrc2hlZXQoKTogYm9vbGVhbiB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHBhbmVzIGZvciB0aGUgYWN0aXZlV29ya3NoZWV0LlxuICAgICAqXHRcdFx0IFxuICAgICpcdFx0XHRcdCByZXR1cm5UeXBlPVwiaWcuc3ByZWFkc2hlZXQuU3ByZWFkc2hlZXRQYW5lW11cIlxuICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0UGFuZXMoKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBhY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgaWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWN0aW9uIEFuIFtlbnVtZXJhdGlvbl0oaWcuc3ByZWFkc2hlZXQuU3ByZWFkc2hlZXRBY3Rpb24pIG9yIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhlIGFjdGlvbiB0byBleGVjdXRlLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGV4ZWN1dGVBY3Rpb24oYWN0aW9uOiBPYmplY3QpOiBib29sZWFuIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRm9yY2VzIGFueSBwZW5kaW5nIGRlZmVycmVkIHdvcmsgdG8gcmVuZGVyIG9uIHRoZSBzcHJlYWRzaGVldCBiZWZvcmUgY29udGludWluZ1xuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGZsdXNoKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgd2lkZ2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIE5vdGlmeSB0aGUgc3ByZWFkc2hlZXQgdGhhdCBzdHlsZSBpbmZvcm1hdGlvbiB1c2VkIGZvciByZW5kZXJpbmcgdGhlIHNwcmVhZHNoZWV0IG1heSBoYXZlIGJlZW4gdXBkYXRlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzdHlsZVVwZGF0ZWQoKTogdm9pZCB7IHJldHVybjsgfTtcbn0iXX0=