/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgRadialGaugeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgRadialGaugeComponent, _super);
    function IgRadialGaugeComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    /* istanbul ignore next */
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.getRangeNames = /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Adds a new range to the radial gauge.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Adds a new range to the radial gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.addRange = /**
     * Adds a new range to the radial gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Removes a specified range.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Removes a specified range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.removeRange = /**
     * Removes a specified range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Updates the range.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Updates the range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.updateRange = /**
     * Updates the range.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Clears the ranges in the radial gauge.
     */
    /* istanbul ignore next */
    /**
     * Clears the ranges in the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.clearRanges = /**
     * Clears the ranges in the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.scaleValue = /**
     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
     *
     * @param value
     */
    /* istanbul ignore next */
    /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.unscaleValue = /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
     *
     * @param {?} value
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param x
     * @param y
     */
    /* istanbul ignore next */
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.getValueForPoint = /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    function (x, y) { return; };
    ;
    /**
     * Gets the point on the gauge for a given scale value and extent.
     *
     * @param value
     * @param extent
     */
    /* istanbul ignore next */
    /**
     * Gets the point on the gauge for a given scale value and extent.
     *
     * @param {?} value
     * @param {?} extent
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.getPointForValue = /**
     * Gets the point on the gauge for a given scale value and extent.
     *
     * @param {?} value
     * @param {?} extent
     * @return {?}
     */
    /* istanbul ignore next */
    function (value, extent) { return; };
    ;
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param x
     * @param y
     */
    /* istanbul ignore next */
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.needleContainsPoint = /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    /* istanbul ignore next */
    function (x, y) { return; };
    ;
    /**
     * Exports the visual data for the radial gauge.
     */
    /* istanbul ignore next */
    /**
     * Exports the visual data for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.exportVisualData = /**
     * Exports the visual data for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Flushes the gauge.
     */
    /* istanbul ignore next */
    /**
     * Flushes the gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.flush = /**
     * Flushes the gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns true if the style was updated for the radial gauge.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the style was updated for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRadialGaugeComponent.prototype.styleUpdated = /**
     * Returns true if the style was updated for the radial gauge.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgRadialGaugeComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-radial-gauge",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "ranges", "rangeBrushes", "rangeOutlines", "minimumValue", "maximumValue", "interval", "centerX", "centerY", "value", "scaleStartAngle", "scaleEndAngle", "scaleSweepDirection", "transitionDuration", "transitionEasingFunction", "needleBrush", "needleOutline", "needleStartExtent", "needleEndExtent", "needleShape", "needleStartWidthRatio", "needleEndWidthRatio", "needleBaseFeatureWidthRatio", "needleBaseFeatureExtent", "needlePointFeatureWidthRatio", "needlePointFeatureExtent", "needlePivotWidthRatio", "needlePivotInnerWidthRatio", "needlePivotShape", "scaleStartExtent", "needlePivotBrush", "needlePivotOutline", "needleStrokeThickness", "needlePivotStrokeThickness", "scaleEndExtent", "labelExtent", "labelInterval", "tickStartExtent", "tickEndExtent", "tickStrokeThickness", "tickBrush", "fontBrush", "minorTickStartExtent", "minorTickEndExtent", "minorTickStrokeThickness", "minorTickBrush", "minorTickCount", "scaleBrush", "backingBrush", "backingOutline", "backingStrokeThickness", "backingOuterExtent", "backingOversweep", "scaleOversweep", "scaleOversweepShape", "backingCornerRadius", "backingInnerExtent", "backingShape", "radiusMultiplier", "duplicateLabelOmissionStrategy", "isNeedleDraggingEnabled", "isNeedleDraggingConstrained", "font", "transitionProgress", "pixelScalingRatio"],
                    outputs: ["formatLabel", "alignLabel", "valueChanged"]
                }] }
    ];
    /** @nocollapse */
    IgRadialGaugeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgRadialGaugeComponent;
}(IgControlBase));
export { IgRadialGaugeComponent };
//# sourceMappingURL=data:application/json;base64,