/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, Optional, NgZone, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
import { NgModel } from "@angular/forms";
var IgHtmlEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgHtmlEditorComponent, _super);
    function IgHtmlEditorComponent(el, renderer, differs, model, zone, kvalDiffers, cdr) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
        _this.model = model;
        _this.zone = zone;
        _this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
        });
        _this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        if (model) {
            model.valueAccessor = _this;
            _this._zone = zone;
            _this._model = model;
        }
        return _this;
    }
    /**
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        /** @type {?} */
        var that = this;
        if (this._model) {
            /** @type {?} */
            var iframe = jQuery(this._el).find("iframe")[0].contentWindow.document;
            jQuery(iframe).find("body[contenteditable=true]").on("keyup", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that._model.viewToModelUpdate(jQuery(evt.target).html());
                that._zone.run((/**
                 * @return {?}
                 */
                function () {
                    that._model.viewToModelUpdate(jQuery(evt.target).html());
                }));
            }));
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!!jQuery(this._el).data(this._widgetName) && value !== null && value !== jQuery(this._el)[this._widgetName]("getContent", "html")) {
            jQuery(this._el)[this._widgetName]("setContent", value, "html");
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgHtmlEditorComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * Returns the element on which the widget was instantiated
     */
    /* istanbul ignore next */
    /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.widget = /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Resizes the height of the workspace
     */
    /* istanbul ignore next */
    /**
     * Resizes the height of the workspace
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.resizeWorkspace = /**
     * Resizes the height of the workspace
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets the content of the html editor.
     *
     * @param format Returns the content as html or plain text. Values can be "text" or "html".
     */
    /* istanbul ignore next */
    /**
     * Gets the content of the html editor.
     *
     * @param {?} format Returns the content as html or plain text. Values can be "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.getContent = /**
     * Gets the content of the html editor.
     *
     * @param {?} format Returns the content as html or plain text. Values can be "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    function (format) { return; };
    ;
    /**
     * Sets the content of the html editor.
     *
     * @param content The content which will be set.
     * @param format The content type: "text" or "html".
     */
    /* istanbul ignore next */
    /**
     * Sets the content of the html editor.
     *
     * @param {?} content The content which will be set.
     * @param {?} format The content type: "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.setContent = /**
     * Sets the content of the html editor.
     *
     * @param {?} content The content which will be set.
     * @param {?} format The content type: "text" or "html".
     * @return {?}
     */
    /* istanbul ignore next */
    function (content, format) { return; };
    ;
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Executes htmleditor commands.
     *
     * @param actionName The command name.
     * @param args Additional parameter for the command.
     */
    /* istanbul ignore next */
    /**
     * Executes htmleditor commands.
     *
     * @param {?} actionName The command name.
     * @param {?=} args Additional parameter for the command.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.executeAction = /**
     * Executes htmleditor commands.
     *
     * @param {?} actionName The command name.
     * @param {?=} args Additional parameter for the command.
     * @return {?}
     */
    /* istanbul ignore next */
    function (actionName, args) { return; };
    ;
    /**
     * Returns true/false if the editor contents were modified or not.
     */
    /* istanbul ignore next */
    /**
     * Returns true/false if the editor contents were modified or not.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.isDirty = /**
     * Returns true/false if the editor contents were modified or not.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the window object associated with the Html Editor's content editable area
     */
    /* istanbul ignore next */
    /**
     * Returns the window object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.contentWindow = /**
     * Returns the window object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the document object associated with the Html Editor's content editable area
     */
    /* istanbul ignore next */
    /**
     * Returns the document object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.contentDocument = /**
     * Returns the document object associated with the Html Editor's content editable area
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the content editable associated with this Html Editor
     */
    /* istanbul ignore next */
    /**
     * Returns the content editable associated with this Html Editor
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.contentEditable = /**
     * Returns the content editable associated with this Html Editor
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns Selection object that represent the current selection in the content editable
     */
    /* istanbul ignore next */
    /**
     * Returns Selection object that represent the current selection in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.selection = /**
     * Returns Selection object that represent the current selection in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns Range object that represent the current range in the content editable
     */
    /* istanbul ignore next */
    /**
     * Returns Range object that represent the current range in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.range = /**
     * Returns Range object that represent the current range in the content editable
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Inserts the provided content at the position of the caret.
     *
     * @param element Accepts html string, DOM element or a jQuery object.
     */
    /* istanbul ignore next */
    /**
     * Inserts the provided content at the position of the caret.
     *
     * @param {?} element Accepts html string, DOM element or a jQuery object.
     * @return {?}
     */
    /* istanbul ignore next */
    IgHtmlEditorComponent.prototype.insertAtCaret = /**
     * Inserts the provided content at the position of the caret.
     *
     * @param {?} element Accepts html string, DOM element or a jQuery object.
     * @return {?}
     */
    /* istanbul ignore next */
    function (element) { return; };
    ;
    IgHtmlEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-html-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "showFormattingToolbar", "showTextToolbar", "showInsertObjectToolbar", "showCopyPasteToolbar", "width", "height", "toolbarSettings", "customToolbars", "inputName", "value"],
                    outputs: ["rendered", "rendering", "actionExecuting", "actionExecuted", "toolbarCollapsing", "toolbarCollapsed", "toolbarExpanding", "toolbarExpanded", "cut", "copy", "paste", "undo", "redo", "workspaceResized"]
                }] }
    ];
    /** @nocollapse */
    IgHtmlEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: NgModel, decorators: [{ type: Optional }] },
        { type: NgZone },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgHtmlEditorComponent;
}(IgControlBase));
export { IgHtmlEditorComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgHtmlEditorComponent.prototype._model;
    /**
     * @type {?}
     * @protected
     */
    IgHtmlEditorComponent.prototype._zone;
    /** @type {?} */
    IgHtmlEditorComponent.prototype.onChange;
    /** @type {?} */
    IgHtmlEditorComponent.prototype.onTouched;
    /** @type {?} */
    IgHtmlEditorComponent.prototype.model;
    /**
     * @type {?}
     * @private
     */
    IgHtmlEditorComponent.prototype.zone;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,