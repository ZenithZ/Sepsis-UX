/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer, ElementRef, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
var IgPercentEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgPercentEditorComponent, _super);
    function IgPercentEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
     *
     * @param string The string to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.insert = /**
     * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
     * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (string) { return; };
    ;
    /**
     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
     *
     * @param symbol New percent symbol.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
     *
     * @param {?=} symbol New percent symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.percentSymbol = /**
     * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
     *
     * @param {?=} symbol New percent symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function (symbol) { return; };
    ;
    /**
     * Gets/Sets editor value.
     *
     * @param newValue New editor value.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    ;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number The text to search for.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (number) { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgPercentEditorComponent.prototype.getSelectedText = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgPercentEditorComponent.prototype.getSelectionStart = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgPercentEditorComponent.prototype.getSelectionEnd = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Increments value.
     */
    /* istanbul ignore next */
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.spinUp = /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Decrement value.
     */
    /* istanbul ignore next */
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.spinDown = /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.selectListIndexUp = /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.selectListIndexDown = /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets current regional.
     */
    /* istanbul ignore next */
    /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.getRegionalOption = /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgPercentEditorComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgPercentEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-percent-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "negativeSign", "negativePattern", "decimalSeparator", "groupSeparator", "groups", "maxDecimals", "minDecimals", "dataMode", "minValue", "maxValue", "spinDelta", "scientificFormat", "positivePattern", "percentSymbol", "displayFactor"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgPercentEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgPercentEditorComponent;
}(IgEditorBase));
export { IgPercentEditorComponent };
if (false) {
    /** @type {?} */
    IgPercentEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdwZXJjZW50ZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdlZGl0b3JzL2lncGVyY2VudGVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0gsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QztJQU04QyxvREFBNkI7SUFDdkUsa0NBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCLEVBQXFCLEtBQWM7UUFBakssWUFBcUssa0JBQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBRztRQUExRSxXQUFLLEdBQUwsS0FBSyxDQUFTOztJQUEyRCxDQUFDO0lBRTdOOzs7OztPQUtHO0lBQ0gsMEJBQTBCOzs7Ozs7Ozs7SUFDbkIseUNBQU07Ozs7Ozs7O0lBQWIsVUFBYyxNQUFjLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRWhEOzs7O09BSUc7SUFDSCwwQkFBMEI7Ozs7Ozs7O0lBQ25CLGdEQUFhOzs7Ozs7O0lBQXBCLFVBQXFCLE1BQWUsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFMUQ7Ozs7T0FJRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIsd0NBQUs7Ozs7Ozs7SUFBWixVQUFhLFFBQWlCLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRXBEOzs7O09BSUc7SUFDSCwwQkFB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T0FBTyx1QkFTcUgsUUFBUTs7SUFpRjdJLCtCQUFDO0NBQUEsQUF4RkQsQ0FNOEMsWUFBWSxHQWtGekQ7U0FsRlksd0JBQXdCOzs7SUFDK0YseUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBSZW5kZXJlciwgRWxlbWVudFJlZiwgSXRlcmFibGVEaWZmZXJzLCBPcHRpb25hbCwgS2V5VmFsdWVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0VkaXRvckJhc2UgfSBmcm9tIFwiLi9pZ2VkaXRvcmJhc2VcIjtcbmltcG9ydCB7IE5nTW9kZWwgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctcGVyY2VudC1lZGl0b3JcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLCBcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJ2YWx1ZVwiLCBcInRhYkluZGV4XCIsIFwiYWxsb3dOdWxsVmFsdWVcIiwgXCJudWxsVmFsdWVcIiwgXCJpbnB1dE5hbWVcIiwgXCJyZWFkT25seVwiLCBcInZhbGlkYXRvck9wdGlvbnNcIiwgXCJidXR0b25UeXBlXCIsIFwibGlzdEl0ZW1zXCIsIFwibGlzdFdpZHRoXCIsIFwibGlzdEl0ZW1Ib3ZlckR1cmF0aW9uXCIsIFwiZHJvcERvd25BdHRhY2hlZFRvQm9keVwiLCBcImRyb3BEb3duQW5pbWF0aW9uRHVyYXRpb25cIiwgXCJ2aXNpYmxlSXRlbXNDb3VudFwiLCBcImluY2x1ZGVLZXlzXCIsIFwiZXhjbHVkZUtleXNcIiwgXCJ0ZXh0QWxpZ25cIiwgXCJwbGFjZUhvbGRlclwiLCBcInNlbGVjdGlvbk9uRm9jdXNcIiwgXCJ0ZXh0TW9kZVwiLCBcInNwaW5XcmFwQXJvdW5kXCIsIFwiaXNMaW1pdGVkVG9MaXN0VmFsdWVzXCIsIFwicmV2ZXJ0SWZOb3RWYWxpZFwiLCBcInByZXZlbnRTdWJtaXRPbkVudGVyXCIsIFwiZHJvcERvd25PcmllbnRhdGlvblwiLCBcIm1heExlbmd0aFwiLCBcImRyb3BEb3duT25SZWFkT25seVwiLCBcInRvVXBwZXJcIiwgXCJ0b0xvd2VyXCIsIFwibG9jYWxlXCIsIFwic3VwcHJlc3NOb3RpZmljYXRpb25zXCIsIFwicmVnaW9uYWxcIiwgXCJuZWdhdGl2ZVNpZ25cIiwgXCJuZWdhdGl2ZVBhdHRlcm5cIiwgXCJkZWNpbWFsU2VwYXJhdG9yXCIsIFwiZ3JvdXBTZXBhcmF0b3JcIiwgXCJncm91cHNcIiwgXCJtYXhEZWNpbWFsc1wiLCBcIm1pbkRlY2ltYWxzXCIsIFwiZGF0YU1vZGVcIiwgXCJtaW5WYWx1ZVwiLCBcIm1heFZhbHVlXCIsIFwic3BpbkRlbHRhXCIsIFwic2NpZW50aWZpY0Zvcm1hdFwiLCBcInBvc2l0aXZlUGF0dGVyblwiLCBcInBlcmNlbnRTeW1ib2xcIiwgXCJkaXNwbGF5RmFjdG9yXCJdLFxuICAgIG91dHB1dHM6IFtcInJlbmRlcmluZ1wiLCBcInJlbmRlcmVkXCIsIFwibW91c2Vkb3duXCIsIFwibW91c2V1cFwiLCBcIm1vdXNlbW92ZVwiLCBcIm1vdXNlb3ZlclwiLCBcIm1vdXNlb3V0XCIsIFwiYmx1clwiLCBcImZvY3VzXCIsIFwia2V5ZG93blwiLCBcImtleXByZXNzXCIsIFwia2V5dXBcIiwgXCJ2YWx1ZUNoYW5naW5nXCIsIFwidmFsdWVDaGFuZ2VkXCIsIFwiZHJvcERvd25MaXN0T3BlbmluZ1wiLCBcImRyb3BEb3duTGlzdE9wZW5lZFwiLCBcImRyb3BEb3duTGlzdENsb3NpbmdcIiwgXCJkcm9wRG93bkxpc3RDbG9zZWRcIiwgXCJkcm9wRG93bkl0ZW1TZWxlY3RpbmdcIiwgXCJkcm9wRG93bkl0ZW1TZWxlY3RlZFwiLCBcInRleHRDaGFuZ2VkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnUGVyY2VudEVkaXRvckNvbXBvbmVudCBleHRlbmRzIElnRWRpdG9yQmFzZTxJZ1BlcmNlbnRFZGl0b3I+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIEBPcHRpb25hbCgpIHB1YmxpYyBtb2RlbDogTmdNb2RlbCkgeyBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIsIG1vZGVsKTsgfVxuXG4gICAgLyoqXG4gICAgICogUGFzdGUgdGV4dCBhdCBsb2NhdGlvbiBvZiB0aGUgY2FyZXQgb3Igb3ZlciB0aGUgY3VycmVudCBzZWxlY3Rpb24uIEJlc3QgdXNlZCBkdXJpbmcgZWRpdGluZywgYXMgdGhlIG1ldGhvZCB3aWxsIGluc3RlYWQgc2V0IHRoZSB0ZXh0IGFzIHZhbHVlIChtb2RpZmllZCBieSB0aGUgW2Rpc3BsYXlGYWN0b3JdKHVpLmlncGVyY2VudGVkaXRvciNvcHRpb25zOmRpc3BsYXlGYWN0b3IpKSBpZiB0aGUgZWRpdG9yIGlzIG5vdCBmb2N1c2VkLlxuICAgICAqIE5vdGU6IHRoZSBtZXRob2QgcmFpc2VzIHRoZSBbdGV4dENoYW5nZWRdKHVpLmlncGVyY2VudGVkaXRvciNldmVudHM6dGV4dENoYW5nZWQpIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmluZyBUaGUgc3RyaW5nIHRvIGJlIGluc2VydGVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGluc2VydChzdHJpbmc6IHN0cmluZyk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgYSBzdHJpbmcgdGhhdCBpcyB1c2VkIGFzIHRoZSBwZXJjZW50IHN5bWJvbCBzaG93biB3aXRoIHRoZSBudW1iZXIgaW4gdGhlIGlucHV0LiBUaGUgdmFsdWUgcHJvdmlkZWQgYXMgYSBwYXJhbSBpcyBwcm9wYWdhdGVkIHRvIHRoZSBbcGVyY2VudFN5bWJvbF0odWkuaWdwZXJjZW50ZWRpdG9yI29wdGlvbnM6cGVyY2VudFN5bWJvbCkgb3B0aW9uIGFuZCB0aHVzIGhhcyB0aGUgc2FtZSBwcmlvcml0eSBhcyB0aGUgb3B0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN5bWJvbCBOZXcgcGVyY2VudCBzeW1ib2wuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgcGVyY2VudFN5bWJvbChzeW1ib2w/OiBPYmplY3QpOiBzdHJpbmcgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgZWRpdG9yIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ld1ZhbHVlIE5ldyBlZGl0b3IgdmFsdWUuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdmFsdWUobmV3VmFsdWU/OiBudW1iZXIpOiBudW1iZXIgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBpbmRleCBvZiBsaXN0IGl0ZW0gYnkgdGV4dCB0aGF0IG1hdGNoZXMgd2l0aCB0aGUgc2VhcmNoIHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbnVtYmVyIFRoZSB0ZXh0IHRvIHNlYXJjaCBmb3IuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZmluZExpc3RJdGVtSW5kZXgobnVtYmVyOiBudW1iZXIpOiBudW1iZXIgeyByZXR1cm47IH07XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0U2VsZWN0ZWRUZXh0KCk6IHZvaWQgeyByZXR1cm47IH07XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0U2VsZWN0aW9uU3RhcnQoKTogdm9pZCB7IHJldHVybjsgfTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBnZXRTZWxlY3Rpb25FbmQoKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEluY3JlbWVudHMgdmFsdWUgaW4gZWRpdG9yIGFjY29yZGluZyB0byB0aGUgcGFyYW1ldGVyIG9yIHNlbGVjdHMgdGhlIHByZXZpb3VzIGl0ZW0gZnJvbSB0aGUgZHJvcC1kb3duIGxpc3QgaWYgW2lzTGltaXRlZFRvTGlzdFZhbHVlc10odWkuJSVXaWRnZXROYW1lTG93ZXJlZCUlI29wdGlvbnM6aXNMaW1pdGVkVG9MaXN0VmFsdWVzKSBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlbHRhIEluY3JlbWVudHMgdmFsdWUuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc3BpblVwKGRlbHRhPzogbnVtYmVyKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlY3JlbWVudHMgdmFsdWUgaW4gZWRpdG9yIGFjY29yZGluZyB0byB0aGUgcGFyYW1ldGVyIHNlbGVjdHMgdGhlIG5leHQgaXRlbSBmcm9tIHRoZSBkcm9wLWRvd24gbGlzdCBpZiBbaXNMaW1pdGVkVG9MaXN0VmFsdWVzXSh1aS4lJVdpZGdldE5hbWVMb3dlcmVkJSUjb3B0aW9uczppc0xpbWl0ZWRUb0xpc3RWYWx1ZXMpIGlzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVsdGEgRGVjcmVtZW50IHZhbHVlLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHNwaW5Eb3duKGRlbHRhPzogbnVtYmVyKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgW3NwaW5VcF0odWkuJSVXaWRnZXROYW1lTG93ZXJlZCUlI29wdGlvbnM6c3BpblVwKS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzZWxlY3RMaXN0SW5kZXhVcCgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBbc3BpbkRvd25dKHVpLiUlV2lkZ2V0TmFtZUxvd2VyZWQlJSNvcHRpb25zOnNwaW5Eb3duKS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBzZWxlY3RMaXN0SW5kZXhEb3duKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGN1cnJlbnQgcmVnaW9uYWwuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZ2V0UmVnaW9uYWxPcHRpb24oKTogc3RyaW5nIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgdGhlIHJlZ2lvbmFsIHNldHRpbmdzIG9mIHdpZGdldCBlbGVtZW50IHRvIHRoZSBsYW5ndWFnZSBzcGVjaWZpZWQgaW4gW29wdGlvbnMucmVnaW9uYWxdKHVpLmlnbnVtZXJpY2VkaXRvciNvcHRpb25zOnJlZ2lvbmFsKVxuICAgICAqIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCBpcyBmb3IgcmFyZSBzY2VuYXJpb3MsIHVzZSBbcmVnaW9uYWxdKHVpLmlnbnVtZXJpY2VkaXRvciNvcHRpb25zOnJlZ2lvbmFsKSBvcHRpb24gc2V0dGVyXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgY2hhbmdlUmVnaW9uYWwoKTogdm9pZCB7IHJldHVybjsgfTtcbn0iXX0=