/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
var IgCheckboxEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgCheckboxEditorComponent, _super);
    function IgCheckboxEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param newValue
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param {?} newValue
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.value = /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param {?} newValue
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    ;
    /**
     * Toggles the state of the checkbox.
     */
    /* istanbul ignore next */
    /**
     * Toggles the state of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.toggle = /**
     * Toggles the state of the checkbox.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param newValue The new input name.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.inputName = /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param {?=} newValue The new input name.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    ;
    /**
     * Gets the input element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.field = /**
     * Gets the input element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.editorContainer = /**
     * Gets a reference to the jQuery element that wraps the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets whether the editor has focus.
     */
    /* istanbul ignore next */
    /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.hasFocus = /**
     * Gets whether the editor has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param delay The delay before focusing the editor.
     */
    /* istanbul ignore next */
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.setFocus = /**
     * Sets focus to the editor after the specified delay.
     *
     * @param {?=} delay The delay before focusing the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delay) { return; };
    ;
    /**
     * Hides the editor.
     */
    /* istanbul ignore next */
    /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.hide = /**
     * Hides the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Shows the editor.
     */
    /* istanbul ignore next */
    /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.show = /**
     * Shows the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.validator = /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     */
    /* istanbul ignore next */
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.validate = /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgCheckboxEditorComponent.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgCheckboxEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-checkbox-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "checked", "size", "iconClass"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged"]
                }] }
    ];
    /** @nocollapse */
    IgCheckboxEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgCheckboxEditorComponent;
}(IgEditorBase));
export { IgCheckboxEditorComponent };
if (false) {
    /** @type {?} */
    IgCheckboxEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,