/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
var IgTimePickerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgTimePickerComponent, _super);
    function IgTimePickerComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Gets the selected list item.
     */
    /* istanbul ignore next */
    /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.getSelectedListItem = /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the visibility state of the calendar.
     */
    /* istanbul ignore next */
    /**
     * Returns the visibility state of the calendar.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.dropDownVisible = /**
     * Returns the visibility state of the calendar.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.dropDownButton = /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.dropDownContainer = /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param text The text to search for in the drop down list.
     * @param matchType The rule that is applied for searching the text.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} text The text to search for in the drop down list.
     * @param {?=} matchType The rule that is applied for searching the text.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text, matchType) { return; };
    ;
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param index The index of the item that needs to be selected.
     */
    /* istanbul ignore next */
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.selectedListIndex = /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @param {?} newValue
     * @return {?}
     */
    IgTimePickerComponent.prototype.value = /* istanbul ignore next */
    /**
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgTimePickerComponent.prototype.selectDate = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.igdateeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.igdateeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     */
    /* istanbul ignore next */
    /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.getSelectedDate = /**
     * Gets selected date as a date object. This method can be used when dataMode is set as either displayModeText or editModeText.
     * In such cases the value() method will not return date object and getSelectedDate() can be used to replace that functionality.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param delta The increase delta.
     */
    /* istanbul ignore next */
    /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinUp = /**
     * Increases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The increase delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param delta The decrease delta.
     */
    /* istanbul ignore next */
    /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinDown = /**
     * Decreases the date or time period, depending on the current cursor position.
     *
     * @param {?=} delta The decrease delta.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * Returns a reference to the spin up UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinUpButton = /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns a reference to the spin down UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.spinDownButton = /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    /* istanbul ignore next */
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTimePickerComponent.prototype.isValid = /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgTimePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-time-picker",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "disabled", "create", "locale", "language", "regional", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "suppressNotifications", "suppressKeyboard", "inputMask", "dataMode", "unfilledCharsPrompt", "padChar", "emptyChar", "minValue", "maxValue", "dateDisplayFormat", "dateInputFormat", "displayTimeOffset", "spinDelta", "limitSpinToCurrentField", "enableUTCDates", "centuryThreshold", "yearShift", "itemsDelta", "timeInputFormat", "timeDisplayFormat"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgTimePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgTimePickerComponent;
}(IgEditorBase));
export { IgTimePickerComponent };
if (false) {
    /** @type {?} */
    IgTimePickerComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,