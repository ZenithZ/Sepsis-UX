/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer, ElementRef, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
var IgNumericEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgNumericEditorComponent, _super);
    function IgNumericEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Gets/Sets editor value.
     *
     * @param newValue New editor value.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    ;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number The text to search for.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (number) { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgNumericEditorComponent.prototype.getSelectedText = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgNumericEditorComponent.prototype.getSelectionStart = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgNumericEditorComponent.prototype.getSelectionEnd = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Increments value.
     */
    /* istanbul ignore next */
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinUp = /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Decrement value.
     */
    /* istanbul ignore next */
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinDown = /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.selectListIndexUp = /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.selectListIndexDown = /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets current regional.
     */
    /* istanbul ignore next */
    /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.getRegionalOption = /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.changeLocale = /**
     * Changes the all locales into the widget element to the language specified in [options.language](ui.igtexteditor#options:language)
     * Note that this method is for rare scenarios, see [language](ui.igtexteditor#options:language) or [locale](ui.igtexteditor#options:locale) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets the visible text in the editor.
     */
    /* istanbul ignore next */
    /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.displayValue = /**
     * Gets the visible text in the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.dropDownContainer = /**
     * Gets reference to jquery object which is used as container of drop-down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Shows the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.showDropDown = /**
     * Shows the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Hides the drop down list.
     */
    /* istanbul ignore next */
    /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.hideDropDown = /**
     * Hides the drop down list.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.dropDownButton = /**
     * Returns a reference to the drop-down button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns if the drop-down list is visible.
     */
    /* istanbul ignore next */
    /**
     * Returns if the drop-down list is visible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.dropDownVisible = /**
     * Returns if the drop-down list is visible.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns a reference to the clear button UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.clearButton = /**
     * Returns a reference to the clear button UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param index The index of the item that needs to be selected.
     */
    /* istanbul ignore next */
    /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.selectedListIndex = /**
     * Gets the index of the selected list item. Sets selected item by index.
     *
     * @param {?=} index The index of the item that needs to be selected.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    ;
    /**
     * Gets the selected list item.
     */
    /* istanbul ignore next */
    /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.getSelectedListItem = /**
     * Gets the selected list item.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param string The string to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.insert = /**
     * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
     * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
     *
     * @param {?} string The string to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (string) { return; };
    ;
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param start Start of the selection.
     * @param end End of the selection.
     */
    /* istanbul ignore next */
    /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.select = /**
     * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
     *
     * @param {?} start Start of the selection.
     * @param {?} end End of the selection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (start, end) { return; };
    ;
    /**
     * Returns a reference to the spin up UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinUpButton = /**
     * Returns a reference to the spin up UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns a reference to the spin down UI element of the editor.
     */
    /* istanbul ignore next */
    /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNumericEditorComponent.prototype.spinDownButton = /**
     * Returns a reference to the spin down UI element of the editor.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgNumericEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-numeric-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "negativeSign", "negativePattern", "decimalSeparator", "groupSeparator", "groups", "maxDecimals", "minDecimals", "dataMode", "minValue", "maxValue", "spinDelta", "scientificFormat"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgNumericEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgNumericEditorComponent;
}(IgEditorBase));
export { IgNumericEditorComponent };
if (false) {
    /** @type {?} */
    IgNumericEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,