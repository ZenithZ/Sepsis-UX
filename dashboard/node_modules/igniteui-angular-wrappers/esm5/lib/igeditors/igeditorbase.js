/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
import { NgModel } from "@angular/forms";
import { ElementRef, Renderer, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
/**
 * @template Model
 */
var IgEditorBase = /** @class */ (function (_super) {
    tslib_1.__extends(IgEditorBase, _super);
    function IgEditorBase(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
        _this.model = model;
        _this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
        });
        _this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        if (model) {
            model.valueAccessor = _this;
            _this._model = model;
        }
        return _this;
    }
    /**
     * @return {?}
     */
    IgEditorBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        _super.prototype.ngOnInit.call(this);
        if (this._model) {
            jQuery(this._el).on(this._widgetName.toLowerCase() + "valuechanged", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that.onChange(ui.newValue);
            }));
            if (this._widgetName === "igTextEditor") {
                jQuery(this._el).on(this._widgetName.toLowerCase() + "textchanged", (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that.onChange(ui.text);
                }));
            }
            jQuery(this._el).on(this._widgetName.toLowerCase() + "blur", (/**
             * @param {?} evt
             * @param {?} ui
             * @return {?}
             */
            function (evt, ui) {
                that.onTouched();
            }));
            //manually call writeValue, because the LifeCycle has been changed and writeValue is executed before ngOnInit
            this.writeValue(this._model.value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgEditorBase.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!!jQuery(this._el).data(this._widgetName) && value !== null) {
            jQuery(this._el)[this._widgetName]("value", value);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgEditorBase.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IgEditorBase.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /** @nocollapse */
    IgEditorBase.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgEditorBase;
}(IgControlBase));
export { IgEditorBase };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgEditorBase.prototype._model;
    /** @type {?} */
    IgEditorBase.prototype.onChange;
    /** @type {?} */
    IgEditorBase.prototype.onTouched;
    /** @type {?} */
    IgEditorBase.prototype.model;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdlZGl0b3JiYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ2VkaXRvcnMvaWdlZGl0b3JiYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQy9ELE9BQU8sRUFBd0IsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFFcEg7SUFBeUMsd0NBQW9CO0lBR3pELHNCQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQixFQUFxQixLQUFjO1FBQWpLLFlBQ0ksa0JBQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxTQUtqRDtRQU5rSixXQUFLLEdBQUwsS0FBSyxDQUFTO1FBa0NqSyxjQUFROzs7O1FBQUcsVUFBQyxDQUFNO1FBQ2xCLENBQUMsRUFBQztRQUNGLGVBQVM7OztRQUFHO1FBQ1osQ0FBQyxFQUFDO1FBbkNFLElBQUksS0FBSyxFQUFFO1lBQ1AsS0FBSyxDQUFDLGFBQWEsR0FBRyxLQUFJLENBQUM7WUFDM0IsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7U0FDdkI7O0lBQ0wsQ0FBQzs7OztJQUVELCtCQUFROzs7SUFBUjs7WUFDUSxJQUFJLEdBQUcsSUFBSTtRQUNmLGlCQUFNLFFBQVEsV0FBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEdBQUcsY0FBYzs7Ozs7WUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFO2dCQUNsRixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvQixDQUFDLEVBQUMsQ0FBQztZQUNILElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxjQUFjLEVBQUU7Z0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEdBQUcsYUFBYTs7Ozs7Z0JBQUUsVUFBVSxHQUFHLEVBQUUsRUFBRTtvQkFDakYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNCLENBQUMsRUFBQyxDQUFDO2FBQ047WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxHQUFHLE1BQU07Ozs7O1lBQUUsVUFBVSxHQUFHLEVBQUUsRUFBRTtnQkFDMUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3JCLENBQUMsRUFBQyxDQUFDO1lBQ0gsNkdBQTZHO1lBQzdHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztJQUNMLENBQUM7Ozs7O0lBRUQsaUNBQVU7Ozs7SUFBVixVQUFXLEtBQVU7UUFDakIsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3REO0lBQ0wsQ0FBQzs7Ozs7SUFPRCx1Q0FBZ0I7Ozs7SUFBaEIsVUFBaUIsRUFBa0I7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFFRCx3Q0FBaUI7Ozs7SUFBakIsVUFBa0IsRUFBWTtRQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7Z0JBbERJLFVBQVU7Z0JBQUUsUUFBUTtnQkFBRSxlQUFlO2dCQUFZLGVBQWU7Z0JBQUUsaUJBQWlCO2dCQUQ3RCxPQUFPLHVCQU0rRixRQUFROztJQThDN0ksbUJBQUM7Q0FBQSxBQWpERCxDQUF5QyxhQUFhLEdBaURyRDtTQWpEWSxZQUFZOzs7Ozs7SUFDckIsOEJBQXNCOztJQW9DdEIsZ0NBQ0U7O0lBQ0YsaUNBQ0U7O0lBckM4SCw2QkFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nTW9kZWwgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIE9wdGlvbmFsLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuZXhwb3J0IGNsYXNzIElnRWRpdG9yQmFzZTxNb2RlbD4gZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPE1vZGVsPiBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcm90ZWN0ZWQgX21vZGVsOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIEBPcHRpb25hbCgpIHB1YmxpYyBtb2RlbDogTmdNb2RlbCkge1xuICAgICAgICBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpO1xuICAgICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgICAgIG1vZGVsLnZhbHVlQWNjZXNzb3IgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlbCkge1xuICAgICAgICAgICAgalF1ZXJ5KHRoaXMuX2VsKS5vbih0aGlzLl93aWRnZXROYW1lLnRvTG93ZXJDYXNlKCkgKyBcInZhbHVlY2hhbmdlZFwiLCBmdW5jdGlvbiAoZXZ0LCB1aSkge1xuICAgICAgICAgICAgICAgIHRoYXQub25DaGFuZ2UodWkubmV3VmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fd2lkZ2V0TmFtZSA9PT0gXCJpZ1RleHRFZGl0b3JcIikge1xuICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzLl9lbCkub24odGhpcy5fd2lkZ2V0TmFtZS50b0xvd2VyQ2FzZSgpICsgXCJ0ZXh0Y2hhbmdlZFwiLCBmdW5jdGlvbiAoZXZ0LCB1aSkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uQ2hhbmdlKHVpLnRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgalF1ZXJ5KHRoaXMuX2VsKS5vbih0aGlzLl93aWRnZXROYW1lLnRvTG93ZXJDYXNlKCkgKyBcImJsdXJcIiwgZnVuY3Rpb24gKGV2dCwgdWkpIHtcbiAgICAgICAgICAgICAgICB0aGF0Lm9uVG91Y2hlZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL21hbnVhbGx5IGNhbGwgd3JpdGVWYWx1ZSwgYmVjYXVzZSB0aGUgTGlmZUN5Y2xlIGhhcyBiZWVuIGNoYW5nZWQgYW5kIHdyaXRlVmFsdWUgaXMgZXhlY3V0ZWQgYmVmb3JlIG5nT25Jbml0XG4gICAgICAgICAgICB0aGlzLndyaXRlVmFsdWUodGhpcy5fbW9kZWwudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICghIWpRdWVyeSh0aGlzLl9lbCkuZGF0YSh0aGlzLl93aWRnZXROYW1lKSAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgalF1ZXJ5KHRoaXMuX2VsKVt0aGlzLl93aWRnZXROYW1lXShcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2hhbmdlID0gKF86IGFueSkgPT4ge1xuICAgIH07XG4gICAgb25Ub3VjaGVkID0gKCkgPT4ge1xuICAgIH07XG5cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB7fSk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZCB7XG4gICAgICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gICAgfVxufSJdfQ==