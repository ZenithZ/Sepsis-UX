/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer, ElementRef, IterableDiffers, Optional, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
var IgCurrencyEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgCurrencyEditorComponent, _super);
    function IgCurrencyEditorComponent(el, renderer, differs, kvalDiffers, cdr, model) {
        var _this = _super.call(this, el, renderer, differs, kvalDiffers, cdr, model) || this;
        _this.model = model;
        return _this;
    }
    /**
     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
     *
     * @param symbol New currency symbol.
     */
    /* istanbul ignore next */
    /**
     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
     *
     * @param {?=} symbol New currency symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.currencySymbol = /**
     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
     *
     * @param {?=} symbol New currency symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function (symbol) { return; };
    ;
    /**
     * Gets/Sets editor value.
     *
     * @param newValue New editor value.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.value = /**
     * Gets/Sets editor value.
     *
     * @param {?=} newValue New editor value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newValue) { return; };
    ;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number The text to search for.
     */
    /* istanbul ignore next */
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.findListItemIndex = /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param {?} number The text to search for.
     * @return {?}
     */
    /* istanbul ignore next */
    function (number) { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgCurrencyEditorComponent.prototype.getSelectedText = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgCurrencyEditorComponent.prototype.getSelectionStart = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    IgCurrencyEditorComponent.prototype.getSelectionEnd = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Increments value.
     */
    /* istanbul ignore next */
    /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.spinUp = /**
     * Increments value in editor according to the parameter or selects the previous item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Increments value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param delta Decrement value.
     */
    /* istanbul ignore next */
    /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.spinDown = /**
     * Decrements value in editor according to the parameter selects the next item from the drop-down list if [isLimitedToListValues](ui.%%WidgetNameLowered%%#options:isLimitedToListValues) is enabled.
     *
     * @param {?=} delta Decrement value.
     * @return {?}
     */
    /* istanbul ignore next */
    function (delta) { return; };
    ;
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.selectListIndexUp = /**
     * This method is deprecated in favor of [spinUp](ui.%%WidgetNameLowered%%#options:spinUp).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     */
    /* istanbul ignore next */
    /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.selectListIndexDown = /**
     * This method is deprecated in favor of [spinDown](ui.%%WidgetNameLowered%%#options:spinDown).
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets current regional.
     */
    /* istanbul ignore next */
    /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.getRegionalOption = /**
     * Gets current regional.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     */
    /* istanbul ignore next */
    /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    IgCurrencyEditorComponent.prototype.changeRegional = /**
     * Changes the the regional settings of widget element to the language specified in [options.regional](ui.ignumericeditor#options:regional)
     * Note that this method is for rare scenarios, use [regional](ui.ignumericeditor#options:regional) option setter
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgCurrencyEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-currency-editor",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "value", "tabIndex", "allowNullValue", "nullValue", "inputName", "readOnly", "validatorOptions", "buttonType", "listItems", "listWidth", "listItemHoverDuration", "dropDownAttachedToBody", "dropDownAnimationDuration", "visibleItemsCount", "includeKeys", "excludeKeys", "textAlign", "placeHolder", "selectionOnFocus", "textMode", "spinWrapAround", "isLimitedToListValues", "revertIfNotValid", "preventSubmitOnEnter", "dropDownOrientation", "maxLength", "dropDownOnReadOnly", "toUpper", "toLower", "locale", "suppressNotifications", "regional", "negativeSign", "negativePattern", "decimalSeparator", "groupSeparator", "groups", "maxDecimals", "minDecimals", "dataMode", "minValue", "maxValue", "spinDelta", "scientificFormat", "positivePattern", "currencySymbol"],
                    outputs: ["rendering", "rendered", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "blur", "focus", "keydown", "keypress", "keyup", "valueChanging", "valueChanged", "dropDownListOpening", "dropDownListOpened", "dropDownListClosing", "dropDownListClosed", "dropDownItemSelecting", "dropDownItemSelected", "textChanged"]
                }] }
    ];
    /** @nocollapse */
    IgCurrencyEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef },
        { type: NgModel, decorators: [{ type: Optional }] }
    ]; };
    return IgCurrencyEditorComponent;
}(IgEditorBase));
export { IgCurrencyEditorComponent };
if (false) {
    /** @type {?} */
    IgCurrencyEditorComponent.prototype.model;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,