/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgContentControlBase } from "../igcontrolbase/igcontentcontrolbase";
var IgTileManagerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgTileManagerComponent, _super);
    function IgTileManagerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgTileManagerComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var widget = jQuery(this._el).data(this._widgetName);
            if (widget) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgTileManagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Maximizes a given tile.
     *
     * @param $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param animDuration Specifies the animation duration for this maximizing.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Maximizes a given tile.
     *
     * @param {?} $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param {?=} animDuration Specifies the animation duration for this maximizing.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.maximize = /**
     * Maximizes a given tile.
     *
     * @param {?} $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param {?=} animDuration Specifies the animation duration for this maximizing.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function ($tileToMaximize, animDuration, event) { return; };
    ;
    /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param animDuration Specifies the animation duration for this minimize.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param {?=} animDuration Specifies the animation duration for this minimize.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.minimize = /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param {?=} animDuration Specifies the animation duration for this minimize.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (animDuration, event) { return; };
    ;
    /**
     * Returns the maximized tile or null if such is not present.
     * @return object|null Returns the maximized tile or null if such is not present.
     */
    /* istanbul ignore next */
    /**
     * Returns the maximized tile or null if such is not present.
     * @return {?} object|null Returns the maximized tile or null if such is not present.
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.maximizedTile = /**
     * Returns the maximized tile or null if such is not present.
     * @return {?} object|null Returns the maximized tile or null if such is not present.
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * @return object|null Returns an array with the tiles in minimized state or null if such are not present.
     */
    /* istanbul ignore next */
    /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * @return {?} object|null Returns an array with the tiles in minimized state or null if such are not present.
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.minimizedTiles = /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * @return {?} object|null Returns an array with the tiles in minimized state or null if such are not present.
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the splitter associated with this tile manager or
     *                 null if the tile manager was instantiated with maximizedTileIndex.
     * @return object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
     */
    /* istanbul ignore next */
    /**
     * Returns the splitter associated with this tile manager or
     *                 null if the tile manager was instantiated with maximizedTileIndex.
     * @return {?} object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.splitter = /**
     * Returns the splitter associated with this tile manager or
     *                 null if the tile manager was instantiated with maximizedTileIndex.
     * @return {?} object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
     */
    /* istanbul ignore next */
    /**
     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.layoutManager = /**
     * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param animationDuration The animation duration to be used for this reflow only.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.reflow = /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (forceReflow, animationDuration, event) { return; };
    ;
    /**
     * Returns the element that represents this widget.
     */
    /* istanbul ignore next */
    /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.widget = /**
     * Returns the element that represents this widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
     */
    /* istanbul ignore next */
    /**
     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.dataBind = /**
     * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
     */
    /* istanbul ignore next */
    /**
     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTileManagerComponent.prototype.destroy = /**
     * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgTileManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-tile-manager",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "columnWidth", "columnHeight", "cols", "rows", "marginLeft", "marginTop", "rearrangeItems", "items", "dataSource", "minimizedState", "maximizedState", "maximizedTileIndex", "rightPanelCols", "rightPanelTilesWidth", "rightPanelTilesHeight", "showRightPanelScroll", "splitterOptions", "preventMaximizingSelector", "animationDuration", "dataSourceUrl", "responseDataKey", "responseDataType", "dataSourceType", "requestType", "responseContentType"],
                    outputs: ["dataBinding", "dataBound", "rendering", "rendered", "tileRendering", "tileRendered", "tileMaximizing", "tileMaximized", "tileMinimizing", "tileMinimized"]
                }] }
    ];
    /** @nocollapse */
    IgTileManagerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgTileManagerComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgTileManagerComponent;
}(IgContentControlBase));
export { IgTileManagerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgTileManagerComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,