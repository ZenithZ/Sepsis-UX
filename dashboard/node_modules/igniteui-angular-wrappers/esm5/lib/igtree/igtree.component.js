/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgTreeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgTreeComponent, _super);
    function IgTreeComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgTreeComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgTreeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgTreeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var ds = "dataSource";
        //const options = "options";
        if (ds in changes) {
            /** @type {?} */
            var value = changes[ds].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create();
                    this._changes = [];
                    for (var i = 0; i < this._dataSource.length; i++) {
                        this._changes.push(this.kvalDiffers.find({}).create());
                    }
                }
                catch (e) {
                    throw new Error("Only binding to arrays is supported.");
                }
            }
        }
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * @return {?}
     */
    IgTreeComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._differ) {
            /** @type {?} */
            var changes = this._differ.diff(this._dataSource);
            //check if grid is initialized
            /** @type {?} */
            var elem = jQuery(this._el).data(this._widgetName);
            if (changes && elem) {
                this.dataSourceApplyChanges(changes);
            }
            if (this._changes && elem) {
                //check recs
                for (var i = 0; i < this._dataSource.length; i++) {
                    /** @type {?} */
                    var item = this._dataSource[i];
                    /** @type {?} */
                    var rowChanges = this._changes[i].diff(item);
                    if (rowChanges) {
                        rowChanges.forEachChangedItem((/**
                         * @param {?} change
                         * @return {?}
                         */
                        function (change) {
                            _this.updateItem(item, change.currentValue, change.key);
                        }));
                    }
                }
            }
        }
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    IgTreeComponent.prototype.addItem = /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (item, index) {
        this.dataBind();
        this._changes.push(this.kvalDiffers.find({}).create());
    };
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    IgTreeComponent.prototype.deleteItem = /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (item, index) {
        this.dataBind();
        this._changes.splice(index, 1);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgTreeComponent.prototype.dataSourceApplyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return _this.addItem(r.item, r.currentIndex); }));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { _this.deleteItem(r.item, r.previousIndex); }));
    };
    /**
     * @param {?} item
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    IgTreeComponent.prototype.updateItem = /**
     * @param {?} item
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    function (item, value, key) {
        this.dataBind();
    };
    /**
     * @return {?}
     */
    IgTreeComponent.prototype.markForCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.markForCheck.call(this);
        /** @type {?} */
        var bindings = this["bindings"] || this.options.bindings;
        if (bindings && bindings.childDataProperty) {
            this.dataBind();
        }
    };
    // optionChange(options?) {
    // 	var opts = options || jQuery.extend(true, {}, this._config);
    // 	// Bindings are modified internally by the tree. Excluding them from the change detection
    // 	if (opts.bindings) {
    // 		delete opts.bindings;
    // 	}
    // 	super.optionChange(opts);
    // }
    /**
     * Performs databinding on the igTree.
     */
    /* istanbul ignore next */
    // optionChange(options?) {
    // 	var opts = options || jQuery.extend(true, {}, this._config);
    // 	// Bindings are modified internally by the tree. Excluding them from the change detection
    // 	if (opts.bindings) {
    // 		delete opts.bindings;
    // 	}
    // 	super.optionChange(opts);
    // }
    /**
     * Performs databinding on the igTree.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.dataBind = 
    // optionChange(options?) {
    // 	var opts = options || jQuery.extend(true, {}, this._config);
    // 	// Bindings are modified internally by the tree. Excluding them from the change detection
    // 	if (opts.bindings) {
    // 		delete opts.bindings;
    // 	}
    // 	super.optionChange(opts);
    // }
    /**
     * Performs databinding on the igTree.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param node     Specifies the node element the checkbox of which would be toggled.
     * @param event     Indicates the browser event which triggered this action, if this is not an API call.
     */
    /* istanbul ignore next */
    /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.toggleCheckstate = /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, event) { return; };
    ;
    /**
     * Toggles the collapse/expand state for the specified node.
     *
     * @param node     Specifies the node element the checkbox of which would be toggled.
     * @param event     Indicates the browser event which triggered this action, if this is not an API call.
     */
    /* istanbul ignore next */
    /**
     * Toggles the collapse/expand state for the specified node.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.toggle = /**
     * Toggles the collapse/expand state for the specified node.
     *
     * @param {?} node     Specifies the node element the checkbox of which would be toggled.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, event) { return; };
    ;
    /**
     * Expands the tree down to the specified node and selects the node if specified.
     *
     * @param node     Specifies the node element down to which the tree would be expanded.
     * @param toSelect     Specifies the whether to select the node after expanding to it.
     */
    /* istanbul ignore next */
    /**
     * Expands the tree down to the specified node and selects the node if specified.
     *
     * @param {?} node     Specifies the node element down to which the tree would be expanded.
     * @param {?=} toSelect     Specifies the whether to select the node after expanding to it.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.expandToNode = /**
     * Expands the tree down to the specified node and selects the node if specified.
     *
     * @param {?} node     Specifies the node element down to which the tree would be expanded.
     * @param {?=} toSelect     Specifies the whether to select the node after expanding to it.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, toSelect) { return; };
    ;
    /**
     * Expands the specified node.
     *
     * @param node     Specifies the node element to expand.
     */
    /* istanbul ignore next */
    /**
     * Expands the specified node.
     *
     * @param {?} node     Specifies the node element to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.expand = /**
     * Expands the specified node.
     *
     * @param {?} node     Specifies the node element to expand.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Collapses the specified node.
     *
     * @param node     Specifies the node element to collapse.
     */
    /* istanbul ignore next */
    /**
     * Collapses the specified node.
     *
     * @param {?} node     Specifies the node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.collapse = /**
     * Collapses the specified node.
     *
     * @param {?} node     Specifies the node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Retrieves the parent node element of the specified node element.
     *
     * @param node     Specifies the jQuery selected node element to collapse.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the parent node element of the specified node element.
     *
     * @param {?} node     Specifies the jQuery selected node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.parentNode = /**
     * Retrieves the parent node element of the specified node element.
     *
     * @param {?} node     Specifies the jQuery selected node element to collapse.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param nodePath     Specifies the path to the required node.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param {?} nodePath     Specifies the path to the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeByPath = /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param {?} nodePath     Specifies the path to the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    function (nodePath) { return; };
    ;
    /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param value     Specifies the value of the required node.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param {?} value     Specifies the value of the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodesByValue = /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param {?} value     Specifies the value of the required node.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes checked.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes checked.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.checkedNodes = /**
     * Retrieves all the node objects for the nodes that have their checkboxes checked.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.uncheckedNodes = /**
     * Retrieves all the node objects for the nodes that have their checkboxes unchecked.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.partiallyCheckedNodes = /**
     * Retrieves all the node objects for the nodes that have their checkboxes partially checked.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Selects a node.
     *
     * @param node     Specifies the node element to be selected.
     * @param event     Indicates the browser event which triggered this action, if this is not an API call.
     */
    /* istanbul ignore next */
    /**
     * Selects a node.
     *
     * @param {?} node     Specifies the node element to be selected.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.select = /**
     * Selects a node.
     *
     * @param {?} node     Specifies the node element to be selected.
     * @param {?=} event     Indicates the browser event which triggered this action, if this is not an API call.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, event) { return; };
    ;
    /**
     * Deselects the specified node.
     *
     * @param node     Specifies the node element to be deselected.
     */
    /* istanbul ignore next */
    /**
     * Deselects the specified node.
     *
     * @param {?} node     Specifies the node element to be deselected.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.deselect = /**
     * Deselects the specified node.
     *
     * @param {?} node     Specifies the node element to be deselected.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Deselects all the selected nodes.
     */
    /* istanbul ignore next */
    /**
     * Deselects all the selected nodes.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.clearSelection = /**
     * Deselects all the selected nodes.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Retrieves the node object for the selected node.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the node object for the selected node.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.selectedNode = /**
     * Retrieves the node object for the selected node.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param text     The text to search for.
     * @param parent     The node element to start the search from. If not specified then search would start from the root of the tree.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element to start the search from. If not specified then search would start from the root of the tree.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.findNodesByText = /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element to start the search from. If not specified then search would start from the root of the tree.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text, parent) { return; };
    ;
    /**
     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param text     The text to search for.
     * @param parent     The node element the children of which would be searched.
     */
    /* istanbul ignore next */
    /**
     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element the children of which would be searched.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.findImmediateNodesByText = /**
     * Retrieves all node objects for the immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param {?} text     The text to search for.
     * @param {?=} parent     The node element the children of which would be searched.
     * @return {?}
     */
    /* istanbul ignore next */
    function (text, parent) { return; };
    ;
    /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param index     Specifies the index the node at which to be retrieved.
     * @param parent     The parent node element to start the search from.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param {?} index     Specifies the index the node at which to be retrieved.
     * @param {?=} parent     The parent node element to start the search from.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeByIndex = /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param {?} index     Specifies the index the node at which to be retrieved.
     * @param {?=} parent     The parent node element to start the search from.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, parent) { return; };
    ;
    /**
     * Retrieves a node object for the specified node element.
     *
     * @param element     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Retrieves a node object for the specified node element.
     *
     * @param {?} element     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeFromElement = /**
     * Retrieves a node object for the specified node element.
     *
     * @param {?} element     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (element) { return; };
    ;
    /**
     * Retrieves a node object collection of the immediate children of the provided node element.
     *
     * @param parent     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Retrieves a node object collection of the immediate children of the provided node element.
     *
     * @param {?} parent     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.children = /**
     * Retrieves a node object collection of the immediate children of the provided node element.
     *
     * @param {?} parent     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (parent) { return; };
    ;
    /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param path     Specifies the path of the node the children of which are to be retrieved.
     */
    /* istanbul ignore next */
    /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param {?} path     Specifies the path of the node the children of which are to be retrieved.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.childrenByPath = /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param {?} path     Specifies the path of the node the children of which are to be retrieved.
     * @return {?}
     */
    /* istanbul ignore next */
    function (path) { return; };
    ;
    /**
     * Returns true if the provided node element is selected and false otherwise.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the provided node element is selected and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.isSelected = /**
     * Returns true if the provided node element is selected and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Returns true if the provided node element is expanded and false otherwise.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the provided node element is expanded and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.isExpanded = /**
     * Returns true if the provided node element is expanded and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.isChecked = /**
     * Returns true if the provided node element has its checkbox checkstate checked and false otherwise.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Returns the specified node checkstate.
     *
     * @param node     Specifies the node element.
     */
    /* istanbul ignore next */
    /**
     * Returns the specified node checkstate.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.checkState = /**
     * Returns the specified node checkstate.
     *
     * @param {?} node     Specifies the node element.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node) { return; };
    ;
    /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
     *
     * @param node     Specifies the data used to create the new nodeс.
     * @param parent     Specifies the element of the parent node the nodes are to be appended to.
     * @param nodeIndex     Specifies the index at which the nodes to be inserted.
     */
    /* istanbul ignore next */
    /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
     *
     * @param {?} node     Specifies the data used to create the new nodeс.
     * @param {?=} parent     Specifies the element of the parent node the nodes are to be appended to.
     * @param {?=} nodeIndex     Specifies the index at which the nodes to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.addNode = /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node, at a specified index.
     *
     * @param {?} node     Specifies the data used to create the new nodeс.
     * @param {?=} parent     Specifies the element of the parent node the nodes are to be appended to.
     * @param {?=} nodeIndex     Specifies the index at which the nodes to be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (node, parent, nodeIndex) { return; };
    ;
    /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param path     Specifies the path of the node to be removed.
     */
    /* istanbul ignore next */
    /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param {?} path     Specifies the path of the node to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.removeAt = /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param {?} path     Specifies the path of the node to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (path) { return; };
    ;
    /**
     * Removing all the nodes with the specified value.
     *
     * @param value     Specifies the value of the nodes to be removed.
     */
    /* istanbul ignore next */
    /**
     * Removing all the nodes with the specified value.
     *
     * @param {?} value     Specifies the value of the nodes to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.removeNodesByValue = /**
     * Removing all the nodes with the specified value.
     *
     * @param {?} value     Specifies the value of the nodes to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Performs a UI update on the provided node element with the provided data.
     *
     * @param element     Specifies the node to be updated.
     * @param data     Specifies the new data item the node would update according to.
     */
    /* istanbul ignore next */
    /**
     * Performs a UI update on the provided node element with the provided data.
     *
     * @param {?} element     Specifies the node to be updated.
     * @param {?} data     Specifies the new data item the node would update according to.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.applyChangesToNode = /**
     * Performs a UI update on the provided node element with the provided data.
     *
     * @param {?} element     Specifies the node to be updated.
     * @param {?} data     Specifies the new data item the node would update according to.
     * @return {?}
     */
    /* istanbul ignore next */
    function (element, data) { return; };
    ;
    /**
     * Returns the transaction log stack.
     */
    /* istanbul ignore next */
    /**
     * Returns the transaction log stack.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.transactionLog = /**
     * Returns the transaction log stack.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the data for the node with specified path.
     *
     * @param path     Specifies the node path for which the data is returned.
     */
    /* istanbul ignore next */
    /**
     * Returns the data for the node with specified path.
     *
     * @param {?} path     Specifies the node path for which the data is returned.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.nodeDataFor = /**
     * Returns the data for the node with specified path.
     *
     * @param {?} path     Specifies the node path for which the data is returned.
     * @return {?}
     */
    /* istanbul ignore next */
    function (path) { return; };
    ;
    /**
     * Destructor for the igTree widget.
     */
    /* istanbul ignore next */
    /**
     * Destructor for the igTree widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgTreeComponent.prototype.destroy = /**
     * Destructor for the igTree widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgTreeComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-tree",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "checkboxMode", "singleBranchExpand", "hotTracking", "parentNodeImageUrl", "parentNodeImageClass", "parentNodeImageTooltip", "leafNodeImageUrl", "leafNodeImageClass", "leafNodeImageTooltip", "animationDuration", "pathSeparator", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "responseDataType", "requestType", "responseContentType", "initialExpandDepth", "loadOnDemand", "bindings", "defaultNodeTarget", "dragAndDrop", "updateUrl", "dragAndDropSettings"],
                    outputs: ["dataBinding", "dataBound", "rendering", "rendered", "selectionChanging", "selectionChanged", "nodeCheckstateChanging", "nodeCheckstateChanged", "nodePopulating", "nodePopulated", "nodeCollapsing", "nodeCollapsed", "nodeExpanding", "nodeExpanded", "nodeClick", "nodeDoubleClick", "dragStart", "drag", "dragStop", "nodeDropping", "nodeDropped"]
                }] }
    ];
    /** @nocollapse */
    IgTreeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgTreeComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgTreeComponent;
}(IgControlBase));
export { IgTreeComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgTreeComponent.prototype._dataSource;
    /**
     * @type {?}
     * @private
     */
    IgTreeComponent.prototype._changes;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,