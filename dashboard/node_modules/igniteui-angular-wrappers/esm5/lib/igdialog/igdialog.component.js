/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgContentControlBase } from "../igcontrolbase/igcontentcontrolbase";
var IgDialogComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgDialogComponent, _super);
    function IgDialogComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Destroys the igDialog and moves the target element to its original parent.
     */
    /* istanbul ignore next */
    /**
     * Destroys the igDialog and moves the target element to its original parent.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.destroy = /**
     * Destroys the igDialog and moves the target element to its original parent.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets/Sets the state of the editor.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     *
     * @param state     New state.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets the state of the editor.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     *
     * @param {?=} state     New state.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.state = /**
     * Gets/Sets the state of the editor.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     *
     * @param {?=} state     New state.
     * @return {?}
     */
    /* istanbul ignore next */
    function (state) { return; };
    ;
    /**
     * Gets reference to the dynamically created DIV element which represents the dialog.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the dynamically created DIV element which represents the dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.mainElement = /**
     * Gets reference to the dynamically created DIV element which represents the dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Closes the dialog if it is opened.
     * 				Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog.
     * 				It means that method "open" will open the dialog and keep previous minimized or maximized state.
     *
     * @param e     Browser event: internal use only.
     */
    /* istanbul ignore next */
    /**
     * Closes the dialog if it is opened.
     * 				Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog.
     * 				It means that method "open" will open the dialog and keep previous minimized or maximized state.
     *
     * @param {?=} e     Browser event: internal use only.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.close = /**
     * Closes the dialog if it is opened.
     * 				Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog.
     * 				It means that method "open" will open the dialog and keep previous minimized or maximized state.
     *
     * @param {?=} e     Browser event: internal use only.
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    ;
    /**
     * Opens the dialog if it is closed. Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
     */
    /* istanbul ignore next */
    /**
     * Opens the dialog if it is closed. Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.open = /**
     * Opens the dialog if it is closed. Notes:
     * 				1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * 				2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Minimizes the dialog if it is not minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Minimizes the dialog if it is not minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.minimize = /**
     * Minimizes the dialog if it is not minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Maximizes the dialog if it is not maximized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Maximizes the dialog if it is not maximized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.maximize = /**
     * Maximizes the dialog if it is not maximized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Sets the normal state for the dialog if it was maximized or minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Sets the normal state for the dialog if it was maximized or minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.restore = /**
     * Sets the normal state for the dialog if it was maximized or minimized.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Pins the dialog if it is not pinned.
     * 				When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
     * 				The pinned dialog does not support modal state, maximized state and it can not be moved.
     * 				Notes:
     * 				1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
     * 				2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Pins the dialog if it is not pinned.
     * 				When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
     * 				The pinned dialog does not support modal state, maximized state and it can not be moved.
     * 				Notes:
     * 				1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
     * 				2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.pin = /**
     * Pins the dialog if it is not pinned.
     * 				When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
     * 				The pinned dialog does not support modal state, maximized state and it can not be moved.
     * 				Notes:
     * 				1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
     * 				2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Unpins the dialog if it is pinned.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     */
    /* istanbul ignore next */
    /**
     * Unpins the dialog if it is pinned.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.unpin = /**
     * Unpins the dialog if it is pinned.
     * 				Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets a reference to the top modal dialog.
     */
    /* istanbul ignore next */
    /**
     * Gets a reference to the top modal dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.getTopModal = /**
     * Gets a reference to the top modal dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Checks if the dialog is modal and if it is currently active.
     */
    /* istanbul ignore next */
    /**
     * Checks if the dialog is modal and if it is currently active.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.isTopModal = /**
     * Checks if the dialog is modal and if it is currently active.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Moves a not modal dialog to the top.
     *
     * @param e     Original event of browser.
     */
    /* istanbul ignore next */
    /**
     * Moves a not modal dialog to the top.
     *
     * @param {?=} e     Original event of browser.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.moveToTop = /**
     * Moves a not modal dialog to the top.
     *
     * @param {?=} e     Original event of browser.
     * @return {?}
     */
    /* istanbul ignore next */
    function (e) { return; };
    ;
    /**
     * Retrieves the igDialog content container or sets its content to be the new content provided.
     *
     * @param newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
     */
    /* istanbul ignore next */
    /**
     * Retrieves the igDialog content container or sets its content to be the new content provided.
     *
     * @param {?=} newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDialogComponent.prototype.content = /**
     * Retrieves the igDialog content container or sets its content to be the new content provided.
     *
     * @param {?=} newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newContent) { return; };
    ;
    IgDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-dialog",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "mainElement", "state", "pinned", "closeOnEscape", "showCloseButton", "showMaximizeButton", "showMinimizeButton", "showPinButton", "pinOnMinimized", "imageClass", "headerText", "showHeader", "showFooter", "footerText", "dialogClass", "container", "height", "width", "minHeight", "minWidth", "maxHeight", "maxWidth", "draggable", "position", "resizable", "tabIndex", "openAnimation", "closeAnimation", "zIndex", "modal", "trackFocus", "closeButtonTitle", "minimizeButtonTitle", "maximizeButtonTitle", "pinButtonTitle", "unpinButtonTitle", "restoreButtonTitle", "temporaryUrl", "enableHeaderFocus", "enableDblclick"],
                    outputs: ["stateChanging", "stateChanged", "animationEnded", "focus", "blur"]
                }] }
    ];
    /** @nocollapse */
    IgDialogComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgDialogComponent;
}(IgContentControlBase));
export { IgDialogComponent };
//# sourceMappingURL=data:application/json;base64,