/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer, IterableDiffers, ElementRef, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgBulletGraphComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgBulletGraphComponent, _super);
    function IgBulletGraphComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    /* istanbul ignore next */
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.getRangeNames = /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Adds a new range to the bullet graph.
     *
     * @param value     The range object to be added.
     */
    /* istanbul ignore next */
    /**
     * Adds a new range to the bullet graph.
     *
     * @param {?} value     The range object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.addRange = /**
     * Adds a new range to the bullet graph.
     *
     * @param {?} value     The range object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Removes a range from the bullet graph.
     *
     * @param value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     */
    /* istanbul ignore next */
    /**
     * Removes a range from the bullet graph.
     *
     * @param {?} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.removeRange = /**
     * Removes a range from the bullet graph.
     *
     * @param {?} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Updates the specified range of the bullet graph.
     *
     * @param value     The range object to be updated.
     */
    /* istanbul ignore next */
    /**
     * Updates the specified range of the bullet graph.
     *
     * @param {?} value     The range object to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.updateRange = /**
     * Updates the specified range of the bullet graph.
     *
     * @param {?} value     The range object to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Returns information about how the bullet graph is rendered.
     */
    /* istanbul ignore next */
    /**
     * Returns information about how the bullet graph is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.exportVisualData = /**
     * Returns information about how the bullet graph is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     */
    /* istanbul ignore next */
    /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.flush = /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    /* istanbul ignore next */
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgBulletGraphComponent.prototype.styleUpdated = /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgBulletGraphComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-bullet-graph",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "ranges", "rangeToolTipTemplate", "valueToolTipTemplate", "targetValueToolTipTemplate", "orientation", "rangeBrushes", "rangeOutlines", "minimumValue", "maximumValue", "targetValue", "targetValueName", "value", "valueName", "rangeInnerExtent", "rangeOuterExtent", "valueInnerExtent", "valueOuterExtent", "interval", "ticksPostInitial", "ticksPreTerminal", "labelInterval", "labelExtent", "labelsPostInitial", "labelsPreTerminal", "minorTickCount", "tickStartExtent", "tickEndExtent", "tickStrokeThickness", "tickBrush", "fontBrush", "valueBrush", "valueOutline", "valueStrokeThickness", "minorTickStartExtent", "minorTickEndExtent", "minorTickStrokeThickness", "minorTickBrush", "isScaleInverted", "backingBrush", "backingOutline", "backingStrokeThickness", "backingInnerExtent", "backingOuterExtent", "scaleStartExtent", "scaleEndExtent", "targetValueBrush", "targetValueBreadth", "targetValueInnerExtent", "targetValueOuterExtent", "targetValueOutline", "targetValueStrokeThickness", "transitionDuration", "showToolTipTimeout", "showToolTip", "font", "pixelScalingRatio"],
                    outputs: ["formatLabel", "alignLabel"]
                }] }
    ];
    /** @nocollapse */
    IgBulletGraphComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgBulletGraphComponent;
}(IgControlBase));
export { IgBulletGraphComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdidWxsZXRncmFwaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnYnVsbGV0Z3JhcGgvaWdidWxsZXRncmFwaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHL0Q7SUFNNEMsa0RBQTRCO0lBQ3BFLGdDQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUFJLGtCQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUM7SUFBRSxDQUFDO0lBR25MOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsOENBQWE7Ozs7O0lBQXBCLGNBQStCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUV6Qzs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQix5Q0FBUTs7Ozs7OztJQUFmLFVBQWdCLEtBQWEsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFakQ7Ozs7T0FJRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIsNENBQVc7Ozs7Ozs7SUFBbEIsVUFBbUIsS0FBYSxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVwRDs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQiw0Q0FBVzs7Ozs7OztJQUFsQixVQUFtQixLQUFhLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRXBEOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsaURBQWdCOzs7OztJQUF2QixjQUFvQyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFOUM7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQixzQ0FBSzs7Ozs7SUFBWixjQUF1QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFakM7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQix3Q0FBTzs7Ozs7SUFBZCxjQUF5QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFbkM7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQiw2Q0FBWTs7Ozs7SUFBbkIsY0FBOEIsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOztnQkE5RDNDLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQUUsNEJBQTRCLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUscUJBQXFCLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFFLG9CQUFvQixFQUFFLDBCQUEwQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxvQkFBb0IsRUFBRSw0QkFBNEIsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLG1CQUFtQixDQUFDO29CQUNycEMsT0FBTyxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztpQkFDekM7Ozs7Z0JBVDhDLFVBQVU7Z0JBQXJDLFFBQVE7Z0JBQUUsZUFBZTtnQkFBYyxlQUFlO2dCQUFFLGlCQUFpQjs7SUFvRTdGLDZCQUFDO0NBQUEsQUFoRUQsQ0FNNEMsYUFBYSxHQTBEeEQ7U0ExRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBFbGVtZW50UmVmLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElnQ29udHJvbEJhc2UgfSBmcm9tIFwiLi4vaWdjb250cm9sYmFzZS9pZ2NvbnRyb2xiYXNlXCI7XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctYnVsbGV0LWdyYXBoXCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czogW1wid2lkZ2V0SWRcIiwgXCJvcHRpb25zXCIsIFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIiwgXCJkaXNhYmxlZFwiLCBcImNyZWF0ZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwicmFuZ2VzXCIsIFwicmFuZ2VUb29sVGlwVGVtcGxhdGVcIiwgXCJ2YWx1ZVRvb2xUaXBUZW1wbGF0ZVwiLCBcInRhcmdldFZhbHVlVG9vbFRpcFRlbXBsYXRlXCIsIFwib3JpZW50YXRpb25cIiwgXCJyYW5nZUJydXNoZXNcIiwgXCJyYW5nZU91dGxpbmVzXCIsIFwibWluaW11bVZhbHVlXCIsIFwibWF4aW11bVZhbHVlXCIsIFwidGFyZ2V0VmFsdWVcIiwgXCJ0YXJnZXRWYWx1ZU5hbWVcIiwgXCJ2YWx1ZVwiLCBcInZhbHVlTmFtZVwiLCBcInJhbmdlSW5uZXJFeHRlbnRcIiwgXCJyYW5nZU91dGVyRXh0ZW50XCIsIFwidmFsdWVJbm5lckV4dGVudFwiLCBcInZhbHVlT3V0ZXJFeHRlbnRcIiwgXCJpbnRlcnZhbFwiLCBcInRpY2tzUG9zdEluaXRpYWxcIiwgXCJ0aWNrc1ByZVRlcm1pbmFsXCIsIFwibGFiZWxJbnRlcnZhbFwiLCBcImxhYmVsRXh0ZW50XCIsIFwibGFiZWxzUG9zdEluaXRpYWxcIiwgXCJsYWJlbHNQcmVUZXJtaW5hbFwiLCBcIm1pbm9yVGlja0NvdW50XCIsIFwidGlja1N0YXJ0RXh0ZW50XCIsIFwidGlja0VuZEV4dGVudFwiLCBcInRpY2tTdHJva2VUaGlja25lc3NcIiwgXCJ0aWNrQnJ1c2hcIiwgXCJmb250QnJ1c2hcIiwgXCJ2YWx1ZUJydXNoXCIsIFwidmFsdWVPdXRsaW5lXCIsIFwidmFsdWVTdHJva2VUaGlja25lc3NcIiwgXCJtaW5vclRpY2tTdGFydEV4dGVudFwiLCBcIm1pbm9yVGlja0VuZEV4dGVudFwiLCBcIm1pbm9yVGlja1N0cm9rZVRoaWNrbmVzc1wiLCBcIm1pbm9yVGlja0JydXNoXCIsIFwiaXNTY2FsZUludmVydGVkXCIsIFwiYmFja2luZ0JydXNoXCIsIFwiYmFja2luZ091dGxpbmVcIiwgXCJiYWNraW5nU3Ryb2tlVGhpY2tuZXNzXCIsIFwiYmFja2luZ0lubmVyRXh0ZW50XCIsIFwiYmFja2luZ091dGVyRXh0ZW50XCIsIFwic2NhbGVTdGFydEV4dGVudFwiLCBcInNjYWxlRW5kRXh0ZW50XCIsIFwidGFyZ2V0VmFsdWVCcnVzaFwiLCBcInRhcmdldFZhbHVlQnJlYWR0aFwiLCBcInRhcmdldFZhbHVlSW5uZXJFeHRlbnRcIiwgXCJ0YXJnZXRWYWx1ZU91dGVyRXh0ZW50XCIsIFwidGFyZ2V0VmFsdWVPdXRsaW5lXCIsIFwidGFyZ2V0VmFsdWVTdHJva2VUaGlja25lc3NcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJzaG93VG9vbFRpcFRpbWVvdXRcIiwgXCJzaG93VG9vbFRpcFwiLCBcImZvbnRcIiwgXCJwaXhlbFNjYWxpbmdSYXRpb1wiXSxcbiAgICBvdXRwdXRzOiBbXCJmb3JtYXRMYWJlbFwiLCBcImFsaWduTGFiZWxcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdCdWxsZXRHcmFwaENvbXBvbmVudCBleHRlbmRzIElnQ29udHJvbEJhc2U8SWdCdWxsZXRHcmFwaD4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpOyB9XG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZXMgb2YgYWxsIHRoZSByYW5nZXMgZGVsaW1pdGVkIHdpdGggYSBcXG4gc3ltYm9sLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldFJhbmdlTmFtZXMoKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgcmFuZ2UgdG8gdGhlIGJ1bGxldCBncmFwaC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAgVGhlIHJhbmdlIG9iamVjdCB0byBiZSBhZGRlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBhZGRSYW5nZSh2YWx1ZTogT2JqZWN0KTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSByYW5nZSBmcm9tIHRoZSBidWxsZXQgZ3JhcGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgICAgIEEgSlMgb2JqZWN0IHdpdGggcHJvcGVydGllcyBzZXQgYXMgZm9sbG93czogbmFtZTogbmFtZU9mVGhlUmFuZ2VUb1JlbW92ZSwgcmVtb3ZlOiB0cnVlXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgcmVtb3ZlUmFuZ2UodmFsdWU6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzcGVjaWZpZWQgcmFuZ2Ugb2YgdGhlIGJ1bGxldCBncmFwaC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAgVGhlIHJhbmdlIG9iamVjdCB0byBiZSB1cGRhdGVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHVwZGF0ZVJhbmdlKHZhbHVlOiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBob3cgdGhlIGJ1bGxldCBncmFwaCBpcyByZW5kZXJlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBleHBvcnRWaXN1YWxEYXRhKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIENhdXNlcyBhbGwgcGVuZGluZyBjaGFuZ2VzIG9mIHRoZSBidWxsZXQgZ3JhcGggZS5nLiBieSBjaGFuZ2VkIHByb3BlcnR5IHZhbHVlcyB0byBiZSByZW5kZXJlZCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBmbHVzaCgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgd2lkZ2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJlLXBvbGxzIHRoZSBjc3Mgc3R5bGVzIGZvciB0aGUgd2lkZ2V0LiBVc2UgdGhpcyBtZXRob2Qgd2hlbiB0aGUgY3NzIHN0eWxlcyBoYXZlIGJlZW4gbW9kaWZpZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc3R5bGVVcGRhdGVkKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbn0iXX0=