/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgFunnelChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgFunnelChartComponent, _super);
    function IgFunnelChartComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgFunnelChartComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var chart = jQuery(this._el).data(this._widgetName);
            if (chart) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgFunnelChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Gets array of selected slice items.
     *
     * @param selection     Array or selected slice items.
     * @return array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    /**
     * Gets array of selected slice items.
     *
     * @param {?=} selection     Array or selected slice items.
     * @return {?} array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.selectedSliceItems = /**
     * Gets array of selected slice items.
     *
     * @param {?=} selection     Array or selected slice items.
     * @return {?} array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    function (selection) { return; };
    ;
    /**
     * Gets sets array of indexes of selected slices.
     *
     * @param selection     Array or selected slice indexes.
     * @return array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    /**
     * Gets sets array of indexes of selected slices.
     *
     * @param {?=} selection     Array or selected slice indexes.
     * @return {?} array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.selectedSliceIndexes = /**
     * Gets sets array of indexes of selected slices.
     *
     * @param {?=} selection     Array or selected slice indexes.
     * @return {?} array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     */
    /* istanbul ignore next */
    function (selection) { return; };
    ;
    /**
     * Checks if slice is selected.
     *
     * @param slice     Index of slice or reference to slice-data-item.
     */
    /* istanbul ignore next */
    /**
     * Checks if slice is selected.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.isSelected = /**
     * Checks if slice is selected.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    function (slice) { return; };
    ;
    /**
     * Toggles selected state of slice.
     *
     * @param slice     Index of slice or reference to slice-data-item.
     */
    /* istanbul ignore next */
    /**
     * Toggles selected state of slice.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.toggleSelection = /**
     * Toggles selected state of slice.
     *
     * @param {?} slice     Index of slice or reference to slice-data-item.
     * @return {?}
     */
    /* istanbul ignore next */
    function (slice) { return; };
    ;
    /**
     * @return {?}
     */
    IgFunnelChartComponent.prototype.exportVisualData = /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgFunnelChartComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgFunnelChartComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-funnel-chart",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "bezierPoints", "legend", "valueMemberPath", "brushes", "outlines", "bottomEdgeWidth", "innerLabelMemberPath", "outerLabelMemberPath", "innerLabelVisibility", "outerLabelVisibility", "outerLabelAlignment", "funnelSliceDisplay", "formatInnerLabel", "formatOuterLabel", "transitionDuration", "isInverted", "useBezierCurve", "allowSliceSelection", "useUnselectedStyle", "selectedSliceStyle", "unselectedSliceStyle", "legendItemBadgeTemplate", "useOuterLabelsForLegend", "textStyle", "outerLabelTextStyle", "outlineThickness", "pixelScalingRatio", "outerLabelTextColor", "textColor"],
                    outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip", "sliceClicked"]
                }] }
    ];
    /** @nocollapse */
    IgFunnelChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgFunnelChartComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgFunnelChartComponent;
}(IgControlBase));
export { IgFunnelChartComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgFunnelChartComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,