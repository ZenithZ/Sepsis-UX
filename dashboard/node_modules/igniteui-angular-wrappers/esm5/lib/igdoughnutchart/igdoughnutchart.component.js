/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgDoughnutChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgDoughnutChartComponent, _super);
    function IgDoughnutChartComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgDoughnutChartComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var chart = jQuery(this._el).data(this._widgetName);
            if (chart) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgDoughnutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Adds a new series to the doughnut chart.
     *
     * @param seriesObj     The series object to be added.
     */
    /* istanbul ignore next */
    /**
     * Adds a new series to the doughnut chart.
     *
     * @param {?} seriesObj     The series object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.addSeries = /**
     * Adds a new series to the doughnut chart.
     *
     * @param {?} seriesObj     The series object to be added.
     * @return {?}
     */
    /* istanbul ignore next */
    function (seriesObj) { return; };
    ;
    /**
     * Removes the specified series from the doughnut chart.
     *
     * @param seriesObj     The series object identifying the series to be removed.
     */
    /* istanbul ignore next */
    /**
     * Removes the specified series from the doughnut chart.
     *
     * @param {?} seriesObj     The series object identifying the series to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.removeSeries = /**
     * Removes the specified series from the doughnut chart.
     *
     * @param {?} seriesObj     The series object identifying the series to be removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (seriesObj) { return; };
    ;
    /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param value     The series object identifying the series to be updated.
     */
    /* istanbul ignore next */
    /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param {?} value     The series object identifying the series to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.updateSeries = /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param {?} value     The series object identifying the series to be updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function (value) { return; };
    ;
    /**
     * Returns the center of the doughnut chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the center of the doughnut chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.getCenterCoordinates = /**
     * Returns the center of the doughnut chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the radius of the chart's hole.
     */
    /* istanbul ignore next */
    /**
     * Returns the radius of the chart's hole.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.getHoleRadius = /**
     * Returns the radius of the chart's hole.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns information about how the doughnut chart is rendered.
     */
    /* istanbul ignore next */
    /**
     * Returns information about how the doughnut chart is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.exportVisualData = /**
     * Returns information about how the doughnut chart is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     */
    /* istanbul ignore next */
    /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.flush = /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgDoughnutChartComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgDoughnutChartComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-doughnut-chart",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "tooltipTemplate", "maxRecCount", "dataSource", "dataSourceType", "dataSourceUrl", "responseTotalRecCountKey", "responseDataKey", "series", "allowSliceSelection", "isSurfaceInteractionDisabled", "allowSliceExplosion", "innerExtent", "selectedStyle"],
                    outputs: ["dataBinding", "dataBound", "updateTooltip", "hideTooltip", "tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "sliceClick", "holeDimensionsChanged"]
                }] }
    ];
    /** @nocollapse */
    IgDoughnutChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgDoughnutChartComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgDoughnutChartComponent;
}(IgControlBase));
export { IgDoughnutChartComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgDoughnutChartComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdkb3VnaG51dGNoYXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdkb3VnaG51dGNoYXJ0L2lnZG91Z2hudXRjaGFydC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRS9EO0lBTThDLG9EQUE4QjtJQUN4RSxrQ0FBWSxFQUFjLEVBQUUsUUFBa0IsRUFBRSxPQUF3QixFQUFFLFdBQTRCLEVBQUUsR0FBc0I7ZUFBSSxrQkFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDO0lBQUUsQ0FBQztJQUduTCxzQkFDVyxnREFBVTs7Ozs7UUFEckIsVUFDc0IsS0FBVTtZQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQzs7Z0JBQ25CLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3JELElBQUksS0FBSyxFQUFFO2dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ2hGO1FBQ0wsQ0FBQzs7O09BQUE7SUFBQSxDQUFDOzs7O0lBSUYsMkNBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUM3RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNqRDtRQUNELGlCQUFNLFFBQVEsV0FBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQiw0Q0FBUzs7Ozs7OztJQUFoQixVQUFpQixTQUFpQixJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUV0RDs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQiwrQ0FBWTs7Ozs7OztJQUFuQixVQUFvQixTQUFpQixJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUV6RDs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQiwrQ0FBWTs7Ozs7OztJQUFuQixVQUFvQixLQUFhLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRXJEOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsdURBQW9COzs7OztJQUEzQixjQUF3QyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFbEQ7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQixnREFBYTs7Ozs7SUFBcEIsY0FBaUMsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRTNDOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsbURBQWdCOzs7OztJQUF2QixjQUFvQyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFOUM7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQix3Q0FBSzs7Ozs7SUFBWixjQUF1QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFakM7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQiwwQ0FBTzs7Ozs7SUFBZCxjQUF5QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7O2dCQW5GdEMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLDBCQUEwQixFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSw4QkFBOEIsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLEVBQUUsZUFBZSxDQUFDO29CQUM3VixPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUscUJBQXFCLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixDQUFDO2lCQUMxTTs7OztnQkFSbUIsVUFBVTtnQkFBRSxRQUFRO2dCQUFFLGVBQWU7Z0JBQUUsZUFBZTtnQkFBRSxpQkFBaUI7Ozs2QkFheEYsS0FBSzs7SUEwRVYsK0JBQUM7Q0FBQSxBQXBGRCxDQU04QyxhQUFhLEdBOEUxRDtTQTlFWSx3QkFBd0I7Ozs7OztJQWFqQywrQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElnQ29udHJvbEJhc2UgfSBmcm9tIFwiLi4vaWdjb250cm9sYmFzZS9pZ2NvbnRyb2xiYXNlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImlnLWRvdWdobnV0LWNoYXJ0XCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czogW1wid2lkZ2V0SWRcIiwgXCJvcHRpb25zXCIsIFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIiwgXCJkaXNhYmxlZFwiLCBcImNyZWF0ZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwidG9vbHRpcFRlbXBsYXRlXCIsIFwibWF4UmVjQ291bnRcIiwgXCJkYXRhU291cmNlXCIsIFwiZGF0YVNvdXJjZVR5cGVcIiwgXCJkYXRhU291cmNlVXJsXCIsIFwicmVzcG9uc2VUb3RhbFJlY0NvdW50S2V5XCIsIFwicmVzcG9uc2VEYXRhS2V5XCIsIFwic2VyaWVzXCIsIFwiYWxsb3dTbGljZVNlbGVjdGlvblwiLCBcImlzU3VyZmFjZUludGVyYWN0aW9uRGlzYWJsZWRcIiwgXCJhbGxvd1NsaWNlRXhwbG9zaW9uXCIsIFwiaW5uZXJFeHRlbnRcIiwgXCJzZWxlY3RlZFN0eWxlXCJdLFxuICAgIG91dHB1dHM6IFtcImRhdGFCaW5kaW5nXCIsIFwiZGF0YUJvdW5kXCIsIFwidXBkYXRlVG9vbHRpcFwiLCBcImhpZGVUb29sdGlwXCIsIFwidG9vbHRpcFNob3dpbmdcIiwgXCJ0b29sdGlwU2hvd25cIiwgXCJ0b29sdGlwSGlkaW5nXCIsIFwidG9vbHRpcEhpZGRlblwiLCBcImJyb3dzZXJOb3RTdXBwb3J0ZWRcIiwgXCJzbGljZUNsaWNrXCIsIFwiaG9sZURpbWVuc2lvbnNDaGFuZ2VkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnRG91Z2hudXRDaGFydENvbXBvbmVudCBleHRlbmRzIElnQ29udHJvbEJhc2U8SWdEb3VnaG51dENoYXJ0PiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBrdmFsRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7IHN1cGVyKGVsLCByZW5kZXJlciwgZGlmZmVycywga3ZhbERpZmZlcnMsIGNkcik7IH1cblxuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc2V0IGRhdGFTb3VyY2UodmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLl9kYXRhU291cmNlID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0galF1ZXJ5KHRoaXMuX2VsKS5kYXRhKHRoaXMuX3dpZGdldE5hbWUpO1xuICAgICAgICBpZiAoY2hhcnQpIHtcbiAgICAgICAgICAgIGpRdWVyeSh0aGlzLl9lbClbdGhpcy5fd2lkZ2V0TmFtZV0oXCJvcHRpb25cIiwgXCJkYXRhU291cmNlXCIsIHRoaXMuX2RhdGFTb3VyY2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByaXZhdGUgX2RhdGFTb3VyY2U6IGFueTtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5fZGF0YVNvdXJjZSA9PT0gbnVsbCB8fCB0aGlzLl9kYXRhU291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSB0aGlzLm9wdGlvbnNbXCJkYXRhU291cmNlXCJdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXSAmJiB0aGlzLl9kYXRhU291cmNlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNbXCJkYXRhU291cmNlXCJdID0gdGhpcy5fZGF0YVNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgc2VyaWVzIHRvIHRoZSBkb3VnaG51dCBjaGFydC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZXJpZXNPYmogICAgIFRoZSBzZXJpZXMgb2JqZWN0IHRvIGJlIGFkZGVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGFkZFNlcmllcyhzZXJpZXNPYmo6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgc2VyaWVzIGZyb20gdGhlIGRvdWdobnV0IGNoYXJ0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlcmllc09iaiAgICAgVGhlIHNlcmllcyBvYmplY3QgaWRlbnRpZnlpbmcgdGhlIHNlcmllcyB0byBiZSByZW1vdmVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHJlbW92ZVNlcmllcyhzZXJpZXNPYmo6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzZXJpZXMgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUgd2l0aCB0aGUgc3BlY2lmaWVkIG5ldyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgICAgIFRoZSBzZXJpZXMgb2JqZWN0IGlkZW50aWZ5aW5nIHRoZSBzZXJpZXMgdG8gYmUgdXBkYXRlZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB1cGRhdGVTZXJpZXModmFsdWU6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIGRvdWdobnV0IGNoYXJ0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldENlbnRlckNvb3JkaW5hdGVzKCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJhZGl1cyBvZiB0aGUgY2hhcnQncyBob2xlLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldEhvbGVSYWRpdXMoKTogbnVtYmVyIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBob3cgdGhlIGRvdWdobnV0IGNoYXJ0IGlzIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGV4cG9ydFZpc3VhbERhdGEoKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogQ2F1c2VzIGFsbCBvZiB0aGUgc2VyaWVzIHRoYXQgaGF2ZSBwZW5kaW5nIGNoYW5nZXMgZS5nLiBieSBjaGFuZ2VkIHByb3BlcnR5IHZhbHVlcyB0byBiZSByZW5kZXJlZCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBmbHVzaCgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHdpZGdldC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19