/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgPivotDataSelectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgPivotDataSelectorComponent, _super);
    function IgPivotDataSelectorComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgPivotDataSelectorComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    ;
    Object.defineProperty(IgPivotDataSelectorComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var widget = jQuery(this._el).data(this._widgetName);
            if (widget) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgPivotDataSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Updates the data source.
     */
    /* istanbul ignore next */
    /**
     * Updates the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotDataSelectorComponent.prototype.update = /**
     * Updates the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                 1. Remove custom CSS classes that were added.
     *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *                 3. Unbind all events that were bound.
     */
    /* istanbul ignore next */
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                 1. Remove custom CSS classes that were added.
     *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *                 3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPivotDataSelectorComponent.prototype.destroy = /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                 1. Remove custom CSS classes that were added.
     *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     *                 3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgPivotDataSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-pivot-data-selector",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dataSource", "dataSourceOptions", "deferUpdate", "dragAndDropSettings", "dropDownParent", "disableRowsDropArea", "disableColumnsDropArea", "disableMeasuresDropArea", "disableFiltersDropArea", "customMoveValidation"],
                    outputs: ["dataSelectorRendered", "dataSourceInitialized", "dataSourceUpdated", "deferUpdateChanged", "dragStart", "drag", "dragStop", "metadataDropping", "metadataDropped", "metadataRemoving", "metadataRemoved", "filterDropDownOpening", "filterDropDownOpened", "filterMembersLoaded", "filterDropDownOk", "filterDropDownClosing", "filterDropDownClosed"]
                }] }
    ];
    /** @nocollapse */
    IgPivotDataSelectorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgPivotDataSelectorComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgPivotDataSelectorComponent;
}(IgControlBase));
export { IgPivotDataSelectorComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgPivotDataSelectorComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdwaXZvdGRhdGFzZWxlY3Rvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lncGl2b3RkYXRhc2VsZWN0b3IvaWdwaXZvdGRhdGFzZWxlY3Rvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRS9EO0lBTWtELHdEQUFrQztJQUNoRixzQ0FBWSxFQUFjLEVBQUUsUUFBa0IsRUFBRSxPQUF3QixFQUFFLFdBQTRCLEVBQUUsR0FBc0I7ZUFBSSxrQkFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDO0lBQUUsQ0FBQzs7OztJQUFRLDZDQUFNOzs7SUFBYixjQUF3QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFbE4sc0JBQ1csb0RBQVU7Ozs7O1FBRHJCLFVBQ3NCLEtBQVU7WUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7O2dCQUN2QixNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUN0RCxJQUFJLE1BQU0sRUFBRTtnQkFDUixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUNoRjtRQUNMLENBQUM7OztPQUFBO0lBQUEsQ0FBQzs7OztJQUlGLCtDQUFROzs7SUFBUjtRQUNJLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDakQ7UUFDRCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQiw2Q0FBTTs7Ozs7SUFBYixjQUF3QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFbEM7Ozs7O09BS0c7SUFDSCwwQkFBMEI7Ozs7Ozs7OztJQUNuQiw4Q0FBTzs7Ozs7Ozs7SUFBZCxjQUF5QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7O2dCQTNDdEMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUsd0JBQXdCLEVBQUUseUJBQXlCLEVBQUUsd0JBQXdCLEVBQUUsc0JBQXNCLENBQUM7b0JBQzVULE9BQU8sRUFBRSxDQUFDLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFLHVCQUF1QixFQUFFLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLHNCQUFzQixDQUFDO2lCQUNwVzs7OztnQkFSbUIsVUFBVTtnQkFBRSxRQUFRO2dCQUFFLGVBQWU7Z0JBQUUsZUFBZTtnQkFBRSxpQkFBaUI7Ozs2QkFZcEYsS0FBSzs7SUFtQ2QsbUNBQUM7Q0FBQSxBQTVDRCxDQU1rRCxhQUFhLEdBc0M5RDtTQXRDWSw0QkFBNEI7Ozs7OztJQVlyQyxtREFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElnQ29udHJvbEJhc2UgfSBmcm9tIFwiLi4vaWdjb250cm9sYmFzZS9pZ2NvbnRyb2xiYXNlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImlnLXBpdm90LWRhdGEtc2VsZWN0b3JcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLCBcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJkYXRhU291cmNlXCIsIFwiZGF0YVNvdXJjZU9wdGlvbnNcIiwgXCJkZWZlclVwZGF0ZVwiLCBcImRyYWdBbmREcm9wU2V0dGluZ3NcIiwgXCJkcm9wRG93blBhcmVudFwiLCBcImRpc2FibGVSb3dzRHJvcEFyZWFcIiwgXCJkaXNhYmxlQ29sdW1uc0Ryb3BBcmVhXCIsIFwiZGlzYWJsZU1lYXN1cmVzRHJvcEFyZWFcIiwgXCJkaXNhYmxlRmlsdGVyc0Ryb3BBcmVhXCIsIFwiY3VzdG9tTW92ZVZhbGlkYXRpb25cIl0sXG4gICAgb3V0cHV0czogW1wiZGF0YVNlbGVjdG9yUmVuZGVyZWRcIiwgXCJkYXRhU291cmNlSW5pdGlhbGl6ZWRcIiwgXCJkYXRhU291cmNlVXBkYXRlZFwiLCBcImRlZmVyVXBkYXRlQ2hhbmdlZFwiLCBcImRyYWdTdGFydFwiLCBcImRyYWdcIiwgXCJkcmFnU3RvcFwiLCBcIm1ldGFkYXRhRHJvcHBpbmdcIiwgXCJtZXRhZGF0YURyb3BwZWRcIiwgXCJtZXRhZGF0YVJlbW92aW5nXCIsIFwibWV0YWRhdGFSZW1vdmVkXCIsIFwiZmlsdGVyRHJvcERvd25PcGVuaW5nXCIsIFwiZmlsdGVyRHJvcERvd25PcGVuZWRcIiwgXCJmaWx0ZXJNZW1iZXJzTG9hZGVkXCIsIFwiZmlsdGVyRHJvcERvd25Pa1wiLCBcImZpbHRlckRyb3BEb3duQ2xvc2luZ1wiLCBcImZpbHRlckRyb3BEb3duQ2xvc2VkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnUGl2b3REYXRhU2VsZWN0b3JDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnUGl2b3REYXRhU2VsZWN0b3I+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyKTsgfSBwdWJsaWMgb3B0aW9uKCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAgICAgQElucHV0KClcbiAgICAgICAgcHVibGljIHNldCBkYXRhU291cmNlKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSB2YWx1ZTtcbiAgICAgICAgY29uc3Qgd2lkZ2V0ID0galF1ZXJ5KHRoaXMuX2VsKS5kYXRhKHRoaXMuX3dpZGdldE5hbWUpO1xuICAgICAgICBpZiAod2lkZ2V0KSB7XG4gICAgICAgICAgICBqUXVlcnkodGhpcy5fZWwpW3RoaXMuX3dpZGdldE5hbWVdKFwib3B0aW9uXCIsIFwiZGF0YVNvdXJjZVwiLCB0aGlzLl9kYXRhU291cmNlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcml2YXRlIF9kYXRhU291cmNlOiBhbnk7XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGFTb3VyY2UgPT09IG51bGwgfHwgdGhpcy5fZGF0YVNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhU291cmNlID0gdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9uc1tcImRhdGFTb3VyY2VcIl0gJiYgdGhpcy5fZGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW1wiZGF0YVNvdXJjZVwiXSA9IHRoaXMuX2RhdGFTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBkYXRhIHNvdXJjZS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgaXMgcGFydCBvZiB0aGUgalF1ZXJ5IFVJIHdpZGdldCBBUEkgYW5kIGRvZXMgdGhlIGZvbGxvd2luZzpcbiAgICAgKiAgICAgICAgICAgICAgICAgMS4gUmVtb3ZlIGN1c3RvbSBDU1MgY2xhc3NlcyB0aGF0IHdlcmUgYWRkZWQuXG4gICAgICogICAgICAgICAgICAgICAgIDIuIFVud3JhcCBhbnkgd3JhcHBpbmcgZWxlbWVudHMgc3VjaCBhcyBzY3JvbGxpbmcgZGl2cyBhbmQgb3RoZXIgY29udGFpbmVycy5cbiAgICAgKiAgICAgICAgICAgICAgICAgMy4gVW5iaW5kIGFsbCBldmVudHMgdGhhdCB3ZXJlIGJvdW5kLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcbn0iXX0=