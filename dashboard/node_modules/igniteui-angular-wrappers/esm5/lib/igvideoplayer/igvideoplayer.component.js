/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgVideoPlayerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgVideoPlayerComponent, _super);
    function IgVideoPlayerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Returns the element on which the widget was instantiated
     */
    /* istanbul ignore next */
    /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.widget = /**
     * Returns the element on which the widget was instantiated
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Hide the add message if shown.
     */
    /* istanbul ignore next */
    /**
     * Hide the add message if shown.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.hideAdMessage = /**
     * Hide the add message if shown.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Play a linked commercial for this video.
     *
     * @param commercial     Specify the linked commercial to play.
     */
    /* istanbul ignore next */
    /**
     * Play a linked commercial for this video.
     *
     * @param {?} commercial     Specify the linked commercial to play.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.playCommercial = /**
     * Play a linked commercial for this video.
     *
     * @param {?} commercial     Specify the linked commercial to play.
     * @return {?}
     */
    /* istanbul ignore next */
    function (commercial) { return; };
    ;
    /**
     * Shows the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    /* istanbul ignore next */
    /**
     * Shows the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.showBanner = /**
     * Shows the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    ;
    /**
     * Hide the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    /* istanbul ignore next */
    /**
     * Hide the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.hideBanner = /**
     * Hide the ad banner, if there is such.
     *
     * @param {?} index    Specify the index of the banner from the banners array.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    ;
    /**
     * Resets the commercials, to be shown again.
     */
    /* istanbul ignore next */
    /**
     * Resets the commercials, to be shown again.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.resetCommercialsShow = /**
     * Resets the commercials, to be shown again.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     */
    /* istanbul ignore next */
    /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.togglePlay = /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Start playing current loaded video if any.
     */
    /* istanbul ignore next */
    /**
     * Start playing current loaded video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.play = /**
     * Start playing current loaded video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Pause the currently playing video if any.
     */
    /* istanbul ignore next */
    /**
     * Pause the currently playing video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.pause = /**
     * Pause the currently playing video if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets/Sets the current time of the playing video.
     *
     * @param val     Specify the playback position in seconds to navigate to.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets the current time of the playing video.
     *
     * @param {?} val     Specify the playback position in seconds to navigate to.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.currentTime = /**
     * Gets/Sets the current time of the playing video.
     *
     * @param {?} val     Specify the playback position in seconds to navigate to.
     * @return {?}
     */
    /* istanbul ignore next */
    function (val) { return; };
    ;
    /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param scaleFactor    Specify scale factor between 0 and 1.
     */
    /* istanbul ignore next */
    /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param {?=} scaleFactor    Specify scale factor between 0 and 1.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.screenshot = /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param {?=} scaleFactor    Specify scale factor between 0 and 1.
     * @return {?}
     */
    /* istanbul ignore next */
    function (scaleFactor) { return; };
    ;
    /**
     * Get whether the current browser supports video tag.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports video tag.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsVideo = /**
     * Get whether the current browser supports video tag.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Get whether the current browser supports H.264 codec.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports H.264 codec.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsH264BaselineVideo = /**
     * Get whether the current browser supports H.264 codec.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Get whether the current browser supports Theora codec.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports Theora codec.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsOggTheoraVideo = /**
     * Get whether the current browser supports Theora codec.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Get whether the current browser supports WEBM codec.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current browser supports WEBM codec.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.supportsWebmVideo = /**
     * Get whether the current browser supports WEBM codec.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns whether the currently played video is paused.
     */
    /* istanbul ignore next */
    /**
     * Returns whether the currently played video is paused.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.paused = /**
     * Returns whether the currently played video is paused.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Get whether the current played video has ended.
     */
    /* istanbul ignore next */
    /**
     * Get whether the current played video has ended.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.ended = /**
     * Get whether the current played video has ended.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     */
    /* istanbul ignore next */
    /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.duration = /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Get whether the player is seeking to find the new playback position specified.
     */
    /* istanbul ignore next */
    /**
     * Get whether the player is seeking to find the new playback position specified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.seeking = /**
     * Get whether the player is seeking to find the new playback position specified.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgVideoPlayerComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgVideoPlayerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-video-player",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "sources", "width", "height", "posterUrl", "preload", "autoplay", "autohide", "volumeAutohideDelay", "centerButtonHideDelay", "loop", "browserControls", "fullscreen", "volume", "muted", "title", "showSeekTime", "progressLabelFormat", "bookmarks", "relatedVideos", "banners", "commercials"],
                    outputs: ["ended", "playing", "paused", "buffering", "progress", "waiting", "bookmarkHit", "bookmarkClick", "enterFullScreen", "exitFullScreen", "relatedVideoClick", "bannerVisible", "bannerHidden", "bannerClick", "browserNotSupported"]
                }] }
    ];
    /** @nocollapse */
    IgVideoPlayerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgVideoPlayerComponent;
}(IgControlBase));
export { IgVideoPlayerComponent };
//# sourceMappingURL=data:application/json;base64,