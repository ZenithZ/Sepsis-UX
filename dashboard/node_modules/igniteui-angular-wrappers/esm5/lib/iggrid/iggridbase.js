/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgControlBase } from '../igcontrolbase/igcontrolbase';
import { QueryList, ContentChild, ContentChildren, Input } from '@angular/core';
import { Column } from './column.directive';
import { Features } from './features.directive';
/**
 * @template Model
 */
var IgGridBase = /** @class */ (function (_super) {
    tslib_1.__extends(IgGridBase, _super);
    function IgGridBase(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    Object.defineProperty(IgGridBase.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var grid = jQuery(this._el).data(this._widgetName);
            if (grid) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgGridBase.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
    };
    /**
     * @return {?}
     */
    IgGridBase.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this._columns && this._columns.length) {
            if (this.options) {
                this.options["columns"] = this._columns.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c._settings; }));
            }
        }
        if (this.featuresList) {
            if (this.options) {
                this.options["features"] = this.featuresList.allFeatures.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.initSettings; }));
            }
        }
        if (this.options && this.options["features"] && !this.featuresList) {
            this.featuresList = new Features();
            //populate featuresList
            for (var i = 0; i < this.options["features"].length; i++) {
                /** @type {?} */
                var featureName = this.options["features"][i].name.charAt(0).toLowerCase() + this.options["features"][i].name.slice(1);
                this.featuresList.addFeature(featureName, this._el);
            }
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgGridBase.prototype.createDataSource = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return jQuery.extend(true, [], value);
    };
    /**
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    IgGridBase.prototype.deleteRow = /**
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    function (id, index) {
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var tr = element.find("tr[data-id='" + id + "']");
        if (tr.length > 0) {
            tr.remove();
            jQuery(this._el).data(this._widgetName).dataSource.deleteRow(id, true);
            jQuery(this._el).data(this._widgetName).dataSource._removeTransactionsByRecordId(id);
        }
        this._changes.splice(index, 1);
    };
    /**
     * @param {?} rowData
     * @param {?} index
     * @return {?}
     */
    IgGridBase.prototype.addRow = /**
     * @param {?} rowData
     * @param {?} index
     * @return {?}
     */
    function (rowData, index) {
        /** @type {?} */
        var grid;
        /** @type {?} */
        var pkKey = this["primaryKey"] || this.options["primaryKey"];
        /** @type {?} */
        var existingDomRow = jQuery(this._el).find("tr[data-id='" + rowData[pkKey] + "']");
        /** @type {?} */
        var widgetName = this._widgetName;
        /** @type {?} */
        var existingRow;
        /** @type {?} */
        var t;
        if (this._widgetName === "igHierarchicalGrid") {
            widgetName = "igGrid";
        }
        grid = jQuery(this._el).data(widgetName);
        if (existingDomRow.length === 0) {
            grid.renderNewRow(rowData, rowData[pkKey]);
        }
        existingRow = grid.dataSource.findRecordByKey(rowData[pkKey]);
        if (!existingRow) {
            // add the row without affecting the original DS (scope source) 
            // TODO: trigger rowAdded event?
            grid.dataSource._addRow(rowData, index);
            //add transaction
            t = grid.dataSource._createNewRowTransaction(rowData[pkKey], rowData);
            grid.dataSource._addTransaction(t);
            grid.dataSource._removeTransactionByTransactionId(t.tid);
        }
        this._changes.push(this.kvalDiffers.find({}).create());
    };
    /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    IgGridBase.prototype.updateRow = /**
     * @param {?} rec
     * @param {?} currValue
     * @param {?} key
     * @return {?}
     */
    function (rec, currValue, key) {
        /** @type {?} */
        var pkKey = this["primaryKey"] || this.options["primaryKey"];
        /** @type {?} */
        var widgetName = this._widgetName;
        if (this._widgetName === "igHierarchicalGrid") {
            widgetName = "igGrid";
        }
        /** @type {?} */
        var element = jQuery(this._el);
        /** @type {?} */
        var grid = element.data(widgetName);
        /** @type {?} */
        var tr = element.find("tr[data-id='" + rec[pkKey] + "']");
        /** @type {?} */
        var column = grid.columnByKey(key);
        /** @type {?} */
        var newFormattedVal;
        /** @type {?} */
        var td;
        if (column) {
            if (column.template) {
                newFormattedVal = grid._renderTemplatedCell(rec, column);
            }
            else {
                newFormattedVal = grid._renderCell(currValue, column, rec);
            }
            td = grid._getCellsByColKey(element.find("tr[data-id='" + rec[pkKey] + "']"), key);
            //if current cell is still in edit mode, exit it.
            if (jQuery(td).find("input.ui-igedit-input").length > 0) {
                element.data("igGridUpdating").endEdit();
            }
            jQuery(td).html(newFormattedVal);
            if (grid.options.localSchemaTransform) {
                rec = grid.dataSource.schema().transform([rec])[0];
            }
            grid.dataSource.updateRow(rec[pkKey], rec);
            grid.dataSource._commitTransactionsByRowId(rec[pkKey]);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgGridBase.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var ds = "dataSource";
        if (ds in changes) {
            /** @type {?} */
            var value = changes[ds].currentValue;
            if (value) {
                try {
                    this._differ = this._differs.find(value).create();
                    this._changes = [];
                    for (var i = 0; i < this._dataSource.length; i++) {
                        this._changes.push(this.kvalDiffers.find({}).create());
                    }
                }
                catch (e) {
                    throw new Error("Only binding to arrays is supported.");
                }
            }
        }
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * @return {?}
     */
    IgGridBase.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._differ) {
            /** @type {?} */
            var changes = this._differ.diff(this._dataSource);
            //check if grid is initialized
            /** @type {?} */
            var grid = jQuery(this._el).data(this._widgetName);
            if (changes && grid) {
                this.dataSourceApplyChanges(changes);
            }
            if (changes && changes.isDirty && grid) {
                //data source has been changed post initialization.
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
            if (this._changes && grid) {
                /** @type {?} */
                var pkKey = this["primaryKey"] || this.options["primaryKey"];
                //check recs
                for (var i = 0; i < this._dataSource.length; i++) {
                    /** @type {?} */
                    var item = this._dataSource[i];
                    /** @type {?} */
                    var rowChanges = this._changes[i].diff(item);
                    if (rowChanges) {
                        rowChanges.forEachChangedItem((/**
                         * @param {?} change
                         * @return {?}
                         */
                        function (change) {
                            _this.updateRow(item, change.currentValue, change.key);
                        }));
                    }
                }
            }
        }
        _super.prototype.ngDoCheck.call(this);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgGridBase.prototype.dataSourceApplyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var pkKey = this["primaryKey"] || this.options["primaryKey"];
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return _this.addRow(r.item, r.currentIndex); }));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { _this.deleteRow(r.item[pkKey], r.previousIndex); }));
    };
    /**
     * @return {?}
     */
    IgGridBase.prototype.allRows = /**
     * @return {?}
     */
    function () { };
    ;
    IgGridBase.propDecorators = {
        dataSource: [{ type: Input }],
        _columns: [{ type: ContentChildren, args: [Column,] }],
        featuresList: [{ type: ContentChild, args: [Features, { static: true },] }]
    };
    return IgGridBase;
}(IgControlBase));
export { IgGridBase };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgGridBase.prototype._changes;
    /** @type {?} */
    IgGridBase.prototype._columns;
    /** @type {?} */
    IgGridBase.prototype.featuresList;
    /**
     * @type {?}
     * @private
     */
    IgGridBase.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,