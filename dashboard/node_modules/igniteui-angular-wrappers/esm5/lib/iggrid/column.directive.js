/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Directive } from "@angular/core";
var Column = /** @class */ (function () {
    function Column(el) {
        this._settings = {};
        this._el = el;
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var i;
        /** @type {?} */
        var settings = ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass'];
        for (i = 0; i < settings.length; i++) {
            Object.defineProperty(self, settings[i], {
                set: self.createColumnsSetter(settings[i]),
                get: self.createColumnsGetter(settings[i]),
                enumerable: true,
                configurable: true
            });
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    Column.prototype.createColumnsSetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var grid = jQuery(this._el.nativeElement.parentElement).find("table[role='grid']");
            /** @type {?} */
            var columns = grid["igGrid"]("option", "columns");
            this._settings[name] = value;
            if (jQuery.ui["igGrid"] &&
                jQuery.ui["igGrid"].prototype.options &&
                jQuery.ui["igGrid"].prototype.options.hasOwnProperty("columns") &&
                grid.data("igGrid")) {
                //reapply all column settings when a column setting is changed
                grid["igGrid"]("option", "columns", columns);
            }
        });
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Column.prototype.createColumnsGetter = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return (/**
         * @return {?}
         */
        function () {
            return this._settings[name];
        });
    };
    Column.decorators = [
        { type: Directive, args: [{
                    selector: 'column',
                    inputs: ['headerText', 'key', 'formatter', 'format', 'dataType', 'width', 'hidden', 'template', 'unbound', 'group', 'rowspan', 'formula', 'unboundValues', 'unboundValuesUpdateMode', 'headerCssClass', 'columnCssClass']
                },] }
    ];
    /** @nocollapse */
    Column.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Column;
}());
export { Column };
if (false) {
    /** @type {?} */
    Column.prototype._settings;
    /**
     * @type {?}
     * @private
     */
    Column.prototype._el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2NvbHVtbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSXREO0lBUUMsZ0JBQVksRUFBYztRQUhuQixjQUFTLEdBQVEsRUFBRSxDQUFDO1FBSTFCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDOztZQUNWLElBQUksR0FBRyxJQUFJOztZQUNYLENBQUM7O1lBQUUsUUFBUSxHQUFHLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLHlCQUF5QixFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDO1FBQ25PLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hDLEdBQUcsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxHQUFHLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFlBQVksRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQztTQUNIO0lBQ0YsQ0FBQzs7Ozs7SUFFRCxvQ0FBbUI7Ozs7SUFBbkIsVUFBb0IsSUFBSTtRQUN2Qjs7OztRQUFPLFVBQVUsS0FBSzs7Z0JBQ2pCLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDOztnQkFDOUUsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO1lBQ2pELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBRTdCLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU87Z0JBQ3JDLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO2dCQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNyQiw4REFBOEQ7Z0JBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzdDO1FBQ0YsQ0FBQyxFQUFBO0lBQ0YsQ0FBQzs7Ozs7SUFFRCxvQ0FBbUI7Ozs7SUFBbkIsVUFBb0IsSUFBSTtRQUN2Qjs7O1FBQU87WUFDTixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxFQUFBO0lBQ0YsQ0FBQzs7Z0JBMUNELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsUUFBUTtvQkFDbEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLHlCQUF5QixFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDO2lCQUN6Tjs7OztnQkFQUSxVQUFVOztJQStDbkIsYUFBQztDQUFBLEFBM0NELElBMkNDO1NBdkNZLE1BQU07OztJQUNsQiwyQkFBMkI7Ozs7O0lBQzNCLHFCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIERpcmVjdGl2ZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmRlY2xhcmUgdmFyIGpRdWVyeTogYW55O1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdjb2x1bW4nLFxuXHRpbnB1dHM6IFsnaGVhZGVyVGV4dCcsICdrZXknLCAnZm9ybWF0dGVyJywgJ2Zvcm1hdCcsICdkYXRhVHlwZScsICd3aWR0aCcsICdoaWRkZW4nLCAndGVtcGxhdGUnLCAndW5ib3VuZCcsICdncm91cCcsICdyb3dzcGFuJywgJ2Zvcm11bGEnLCAndW5ib3VuZFZhbHVlcycsICd1bmJvdW5kVmFsdWVzVXBkYXRlTW9kZScsICdoZWFkZXJDc3NDbGFzcycsICdjb2x1bW5Dc3NDbGFzcyddXG59KVxuZXhwb3J0IGNsYXNzIENvbHVtbiB7XG5cdHB1YmxpYyBfc2V0dGluZ3M6IGFueSA9IHt9O1xuXHRwcml2YXRlIF9lbDogYW55O1xuXG5cdGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG5cdFx0dGhpcy5fZWwgPSBlbDtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0bGV0IGksIHNldHRpbmdzID0gWydoZWFkZXJUZXh0JywgJ2tleScsICdmb3JtYXR0ZXInLCAnZm9ybWF0JywgJ2RhdGFUeXBlJywgJ3dpZHRoJywgJ2hpZGRlbicsICd0ZW1wbGF0ZScsICd1bmJvdW5kJywgJ2dyb3VwJywgJ3Jvd3NwYW4nLCAnZm9ybXVsYScsICd1bmJvdW5kVmFsdWVzJywgJ3VuYm91bmRWYWx1ZXNVcGRhdGVNb2RlJywgJ2hlYWRlckNzc0NsYXNzJywgJ2NvbHVtbkNzc0NsYXNzJ107XG5cdFx0Zm9yKGkgPSAwOyBpIDwgc2V0dGluZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBzZXR0aW5nc1tpXSwge1xuXHRcdFx0XHRzZXQ6IHNlbGYuY3JlYXRlQ29sdW1uc1NldHRlcihzZXR0aW5nc1tpXSksXG5cdFx0XHRcdGdldDogc2VsZi5jcmVhdGVDb2x1bW5zR2V0dGVyKHNldHRpbmdzW2ldKSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRjcmVhdGVDb2x1bW5zU2V0dGVyKG5hbWUpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRsZXQgZ3JpZCA9IGpRdWVyeSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQpLmZpbmQoXCJ0YWJsZVtyb2xlPSdncmlkJ11cIik7XG5cdFx0XHRsZXQgY29sdW1ucyA9IGdyaWRbXCJpZ0dyaWRcIl0oXCJvcHRpb25cIiwgXCJjb2x1bW5zXCIpO1xuXHRcdFx0dGhpcy5fc2V0dGluZ3NbbmFtZV0gPSB2YWx1ZTtcblxuXHRcdFx0aWYgKGpRdWVyeS51aVtcImlnR3JpZFwiXSAmJlxuXHRcdFx0XHRqUXVlcnkudWlbXCJpZ0dyaWRcIl0ucHJvdG90eXBlLm9wdGlvbnMgJiZcblx0XHRcdFx0alF1ZXJ5LnVpW1wiaWdHcmlkXCJdLnByb3RvdHlwZS5vcHRpb25zLmhhc093blByb3BlcnR5KFwiY29sdW1uc1wiKSAmJlxuXHRcdFx0XHRncmlkLmRhdGEoXCJpZ0dyaWRcIikpIHtcblx0XHRcdFx0Ly9yZWFwcGx5IGFsbCBjb2x1bW4gc2V0dGluZ3Mgd2hlbiBhIGNvbHVtbiBzZXR0aW5nIGlzIGNoYW5nZWRcblx0XHRcdFx0Z3JpZFtcImlnR3JpZFwiXShcIm9wdGlvblwiLCBcImNvbHVtbnNcIiwgY29sdW1ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Y3JlYXRlQ29sdW1uc0dldHRlcihuYW1lKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiB0aGlzLl9zZXR0aW5nc1tuYW1lXTtcblx0XHR9XG5cdH1cbn0iXX0=