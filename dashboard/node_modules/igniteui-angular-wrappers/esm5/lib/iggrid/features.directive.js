/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ContentChild, ElementRef } from "@angular/core";
import { IgGridSortingFeature } from "./iggridfeatures/iggridsorting.directive";
import { IgGridFilteringFeature } from "./iggridfeatures/iggridfiltering.directive";
import { IgGridPagingFeature } from "./iggridfeatures/iggridpaging.directive";
import { IgGridUpdatingFeature } from "./iggridfeatures/iggridupdating.directive";
import { IgGridGroupByFeature } from "./iggridfeatures/iggridgroupby.directive";
import { IgGridColumnMovingFeature } from "./iggridfeatures/iggridcolumnmoving";
import { IgGridHidingFeature } from "./iggridfeatures/iggridhiding.directive";
import { IgGridCellMergingFeature } from "./iggridfeatures/iggridcellmerging.directive";
import { IgGridResponsiveFeature } from "./iggridfeatures/iggridresponsive.directive";
import { IgGridResizingFeature } from "./iggridfeatures/iggridresizing.directive";
import { IgGridSelectionFeature } from "./iggridfeatures/iggridselection.directive";
import { IgGridRowSelectorsFeature } from "./iggridfeatures/iggridrowselectors.directive";
import { IgGridSummariesFeature } from "./iggridfeatures/iggridsummaries.directive";
import { IgGridColumnFixingFeature } from "./iggridfeatures/iggridcolumnfixing.directive";
import { IgGridTooltipsFeature } from "./iggridfeatures/iggridtooltips.directive";
import { IgGridAppendRowsOnDemandFeature } from "./iggridfeatures/iggridappendrowsondemand.directive";
import { IgGridMultiColumnHeadersFeature } from "./iggridfeatures/iggridmulticolumnheaders.directive";
var Features = /** @class */ (function () {
    function Features() {
        this.allFeatures = new Array();
    }
    /**
     * @param {?} name
     * @param {?} parent
     * @return {?}
     */
    Features.prototype.addFeature = /**
     * @param {?} name
     * @param {?} parent
     * @return {?}
     */
    function (name, parent) {
        /** @type {?} */
        var nodeName = name.replace(/([A-Z])/g, (/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return '-' + g[0].toLowerCase(); }));
        /** @type {?} */
        var el = document.createElement(nodeName);
        el = parent.appendChild(el);
        /** @type {?} */
        var child = new ElementRef(el);
        switch (nodeName) {
            case "filtering":
                this.filtering = new IgGridFilteringFeature(child);
                break;
            case "sorting":
                this.sorting = new IgGridSortingFeature(child);
                break;
            case "paging":
                this.paging = new IgGridPagingFeature(child);
                break;
            case "updating":
                this.updating = new IgGridUpdatingFeature(child);
                break;
            case "group-by":
                this.groupBy = new IgGridGroupByFeature(child);
                break;
            case "column-moving":
                this.columnMoving = new IgGridColumnMovingFeature(child);
                break;
            case "hiding":
                this.hiding = new IgGridHidingFeature(child);
                break;
            case "responsive":
                this.responsive = new IgGridResponsiveFeature(child);
                break;
            case "cell-merging":
                this.cellMerging = new IgGridCellMergingFeature(child);
                break;
            case "resizing":
                this.resizing = new IgGridResizingFeature(child);
                break;
            case "selection":
                this.selection = new IgGridSelectionFeature(child);
                break;
            case "row-selectors":
                this.rowSelectors = new IgGridRowSelectorsFeature(child);
                break;
            case "summaries":
                this.summaries = new IgGridSummariesFeature(child);
                break;
            case "column-fixing":
                this.columnFixing = new IgGridColumnFixingFeature(child);
                break;
            case "tooltips":
                this.tooltips = new IgGridTooltipsFeature(child);
                break;
            case "append-rows-on-demand":
                this.appendRowsOnDemand = new IgGridAppendRowsOnDemandFeature(child);
                break;
            case "multi-column-headers":
                this.multiColumnHeaders = new IgGridMultiColumnHeadersFeature(child);
                break;
        }
        this[name].ngOnInit();
        this.allFeatures.push(this[name]);
    };
    /**
     * @return {?}
     */
    Features.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.filtering ? this.allFeatures.push(this.filtering) : null;
        this.sorting ? this.allFeatures.push(this.sorting) : null;
        this.paging ? this.allFeatures.push(this.paging) : null;
        this.updating ? this.allFeatures.push(this.updating) : null;
        this.groupBy ? this.allFeatures.push(this.groupBy) : null;
        this.columnMoving ? this.allFeatures.push(this.columnMoving) : null;
        this.hiding ? this.allFeatures.push(this.hiding) : null;
        this.responsive ? this.allFeatures.push(this.responsive) : null;
        this.cellMerging ? this.allFeatures.push(this.cellMerging) : null;
        this.resizing ? this.allFeatures.push(this.resizing) : null;
        this.selection ? this.allFeatures.push(this.selection) : null;
        this.rowSelectors ? this.allFeatures.push(this.rowSelectors) : null;
        this.summaries ? this.allFeatures.push(this.summaries) : null;
        this.columnFixing ? this.allFeatures.push(this.columnFixing) : null;
        this.tooltips ? this.allFeatures.push(this.tooltips) : null;
        this.appendRowsOnDemand ? this.allFeatures.push(this.appendRowsOnDemand) : null;
        this.multiColumnHeaders ? this.allFeatures.push(this.multiColumnHeaders) : null;
    };
    Features.decorators = [
        { type: Directive, args: [{
                    selector: 'features'
                },] }
    ];
    Features.propDecorators = {
        sorting: [{ type: ContentChild, args: [IgGridSortingFeature, { static: true },] }],
        filtering: [{ type: ContentChild, args: [IgGridFilteringFeature, { static: true },] }],
        paging: [{ type: ContentChild, args: [IgGridPagingFeature, { static: true },] }],
        updating: [{ type: ContentChild, args: [IgGridUpdatingFeature, { static: true },] }],
        groupBy: [{ type: ContentChild, args: [IgGridGroupByFeature, { static: true },] }],
        columnMoving: [{ type: ContentChild, args: [IgGridColumnMovingFeature, { static: true },] }],
        hiding: [{ type: ContentChild, args: [IgGridHidingFeature, { static: true },] }],
        cellMerging: [{ type: ContentChild, args: [IgGridCellMergingFeature, { static: true },] }],
        responsive: [{ type: ContentChild, args: [IgGridResponsiveFeature, { static: true },] }],
        resizing: [{ type: ContentChild, args: [IgGridResizingFeature, { static: true },] }],
        selection: [{ type: ContentChild, args: [IgGridSelectionFeature, { static: true },] }],
        rowSelectors: [{ type: ContentChild, args: [IgGridRowSelectorsFeature, { static: true },] }],
        summaries: [{ type: ContentChild, args: [IgGridSummariesFeature, { static: true },] }],
        columnFixing: [{ type: ContentChild, args: [IgGridColumnFixingFeature, { static: true },] }],
        tooltips: [{ type: ContentChild, args: [IgGridTooltipsFeature, { static: true },] }],
        appendRowsOnDemand: [{ type: ContentChild, args: [IgGridAppendRowsOnDemandFeature, { static: true },] }],
        multiColumnHeaders: [{ type: ContentChild, args: [IgGridMultiColumnHeadersFeature, { static: true },] }]
    };
    return Features;
}());
export { Features };
if (false) {
    /** @type {?} */
    Features.prototype.allFeatures;
    /** @type {?} */
    Features.prototype.sorting;
    /** @type {?} */
    Features.prototype.filtering;
    /** @type {?} */
    Features.prototype.paging;
    /** @type {?} */
    Features.prototype.updating;
    /** @type {?} */
    Features.prototype.groupBy;
    /** @type {?} */
    Features.prototype.columnMoving;
    /** @type {?} */
    Features.prototype.hiding;
    /** @type {?} */
    Features.prototype.cellMerging;
    /** @type {?} */
    Features.prototype.responsive;
    /** @type {?} */
    Features.prototype.resizing;
    /** @type {?} */
    Features.prototype.selection;
    /** @type {?} */
    Features.prototype.rowSelectors;
    /** @type {?} */
    Features.prototype.summaries;
    /** @type {?} */
    Features.prototype.columnFixing;
    /** @type {?} */
    Features.prototype.tooltips;
    /** @type {?} */
    Features.prototype.appendRowsOnDemand;
    /** @type {?} */
    Features.prototype.multiColumnHeaders;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ2dyaWQvZmVhdHVyZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFvQixZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFD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LENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25FLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzdELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzdELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25FLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMvRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakYsQ0FBQzs7Z0JBdkVGLFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsVUFBVTtpQkFDcEI7OzswQkFJQyxZQUFZLFNBQUMsb0JBQW9CLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzRCQUNqRCxZQUFZLFNBQUMsc0JBQXNCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDO3lCQUNuRCxZQUFZLFNBQUMsbUJBQW1CLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzJCQUNoRCxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzBCQUNsRCxZQUFZLFNBQUMsb0JBQW9CLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOytCQUNqRCxZQUFZLFNBQUMseUJBQXlCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDO3lCQUN0RCxZQUFZLFNBQUMsbUJBQW1CLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzhCQUNoRCxZQUFZLFNBQUMsd0JBQXdCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzZCQUNyRCxZQUFZLFNBQUMsdUJBQXVCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzJCQUNwRCxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzRCQUNsRCxZQUFZLFNBQUMsc0JBQXNCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOytCQUNuRCxZQUFZLFNBQUMseUJBQXlCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzRCQUN0RCxZQUFZLFNBQUMsc0JBQXNCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOytCQUNuRCxZQUFZLFNBQUMseUJBQXlCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOzJCQUN0RCxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDO3FDQUNsRCxZQUFZLFNBQUMsK0JBQStCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDO3FDQUM1RCxZQUFZLFNBQUMsK0JBQStCLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDOztJQWtEOUQsZUFBQztDQUFBLEFBeEVELElBd0VDO1NBckVZLFFBQVE7OztJQUNwQiwrQkFBZ0Q7O0lBRWhELDJCQUFrRjs7SUFDbEYsNkJBQXdGOztJQUN4RiwwQkFBK0U7O0lBQy9FLDRCQUFxRjs7SUFDckYsMkJBQWtGOztJQUNsRixnQ0FBaUc7O0lBQ2pHLDBCQUErRTs7SUFDL0UsK0JBQThGOztJQUM5Riw4QkFBMkY7O0lBQzNGLDRCQUFxRjs7SUFDckYsNkJBQXdGOztJQUN4RixnQ0FBaUc7O0lBQ2pHLDZCQUF3Rjs7SUFDeEYsZ0NBQWlHOztJQUNqRyw0QkFBcUY7O0lBQ3JGLHNDQUFtSDs7SUFDbkgsc0NBQW1IIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBBZnRlckNvbnRlbnRJbml0LCBDb250ZW50Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdHcmlkU29ydGluZ0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRzb3J0aW5nLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgSWdHcmlkRmlsdGVyaW5nRmVhdHVyZSB9IGZyb20gXCIuL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZGZpbHRlcmluZy5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZFBhZ2luZ0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRwYWdpbmcuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBJZ0dyaWRVcGRhdGluZ0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWR1cGRhdGluZy5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZEdyb3VwQnlGZWF0dXJlIH0gZnJvbSBcIi4vaWdncmlkZmVhdHVyZXMvaWdncmlkZ3JvdXBieS5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZENvbHVtbk1vdmluZ0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRjb2x1bW5tb3ZpbmdcIjtcbmltcG9ydCB7IElnR3JpZEhpZGluZ0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRoaWRpbmcuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBJZ0dyaWRDZWxsTWVyZ2luZ0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRjZWxsbWVyZ2luZy5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZFJlc3BvbnNpdmVGZWF0dXJlIH0gZnJvbSBcIi4vaWdncmlkZmVhdHVyZXMvaWdncmlkcmVzcG9uc2l2ZS5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZFJlc2l6aW5nRmVhdHVyZSB9IGZyb20gXCIuL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZHJlc2l6aW5nLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgSWdHcmlkU2VsZWN0aW9uRmVhdHVyZSB9IGZyb20gXCIuL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZHNlbGVjdGlvbi5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZFJvd1NlbGVjdG9yc0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRyb3dzZWxlY3RvcnMuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBJZ0dyaWRTdW1tYXJpZXNGZWF0dXJlIH0gZnJvbSBcIi4vaWdncmlkZmVhdHVyZXMvaWdncmlkc3VtbWFyaWVzLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgSWdHcmlkQ29sdW1uRml4aW5nRmVhdHVyZSB9IGZyb20gXCIuL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZGNvbHVtbmZpeGluZy5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZFRvb2x0aXBzRmVhdHVyZSB9IGZyb20gXCIuL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZHRvb2x0aXBzLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgSWdHcmlkQXBwZW5kUm93c09uRGVtYW5kRmVhdHVyZSB9IGZyb20gXCIuL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZGFwcGVuZHJvd3NvbmRlbWFuZC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IElnR3JpZE11bHRpQ29sdW1uSGVhZGVyc0ZlYXR1cmUgfSBmcm9tIFwiLi9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRtdWx0aWNvbHVtbmhlYWRlcnMuZGlyZWN0aXZlXCI7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ2ZlYXR1cmVzJ1xufSlcbmV4cG9ydCBjbGFzcyBGZWF0dXJlcyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXHRwdWJsaWMgYWxsRmVhdHVyZXM6QXJyYXk8YW55PiA9IG5ldyBBcnJheTxhbnk+KClcblxuXHRAQ29udGVudENoaWxkKElnR3JpZFNvcnRpbmdGZWF0dXJlLCB7c3RhdGljOiB0cnVlfSkgc29ydGluZzogSWdHcmlkU29ydGluZ0ZlYXR1cmU7XG5cdEBDb250ZW50Q2hpbGQoSWdHcmlkRmlsdGVyaW5nRmVhdHVyZSwge3N0YXRpYzogdHJ1ZX0pIGZpbHRlcmluZzogSWdHcmlkRmlsdGVyaW5nRmVhdHVyZTtcblx0QENvbnRlbnRDaGlsZChJZ0dyaWRQYWdpbmdGZWF0dXJlLCB7c3RhdGljOiB0cnVlfSkgcGFnaW5nOiBJZ0dyaWRQYWdpbmdGZWF0dXJlO1xuXHRAQ29udGVudENoaWxkKElnR3JpZFVwZGF0aW5nRmVhdHVyZSwge3N0YXRpYzogdHJ1ZX0pIHVwZGF0aW5nOiBJZ0dyaWRVcGRhdGluZ0ZlYXR1cmU7XG5cdEBDb250ZW50Q2hpbGQoSWdHcmlkR3JvdXBCeUZlYXR1cmUsIHtzdGF0aWM6IHRydWV9KSBncm91cEJ5OiBJZ0dyaWRHcm91cEJ5RmVhdHVyZTtcblx0QENvbnRlbnRDaGlsZChJZ0dyaWRDb2x1bW5Nb3ZpbmdGZWF0dXJlLCB7c3RhdGljOiB0cnVlfSkgY29sdW1uTW92aW5nOiBJZ0dyaWRDb2x1bW5Nb3ZpbmdGZWF0dXJlO1xuXHRAQ29udGVudENoaWxkKElnR3JpZEhpZGluZ0ZlYXR1cmUsIHtzdGF0aWM6IHRydWV9KSBoaWRpbmc6IElnR3JpZEhpZGluZ0ZlYXR1cmU7XG5cdEBDb250ZW50Q2hpbGQoSWdHcmlkQ2VsbE1lcmdpbmdGZWF0dXJlLCB7c3RhdGljOiB0cnVlfSkgY2VsbE1lcmdpbmc6IElnR3JpZENlbGxNZXJnaW5nRmVhdHVyZTtcblx0QENvbnRlbnRDaGlsZChJZ0dyaWRSZXNwb25zaXZlRmVhdHVyZSwge3N0YXRpYzogdHJ1ZX0pIHJlc3BvbnNpdmU6IElnR3JpZFJlc3BvbnNpdmVGZWF0dXJlO1xuXHRAQ29udGVudENoaWxkKElnR3JpZFJlc2l6aW5nRmVhdHVyZSwge3N0YXRpYzogdHJ1ZX0pIHJlc2l6aW5nOiBJZ0dyaWRSZXNpemluZ0ZlYXR1cmU7XG5cdEBDb250ZW50Q2hpbGQoSWdHcmlkU2VsZWN0aW9uRmVhdHVyZSwge3N0YXRpYzogdHJ1ZX0pIHNlbGVjdGlvbjogSWdHcmlkU2VsZWN0aW9uRmVhdHVyZTtcblx0QENvbnRlbnRDaGlsZChJZ0dyaWRSb3dTZWxlY3RvcnNGZWF0dXJlLCB7c3RhdGljOiB0cnVlfSkgcm93U2VsZWN0b3JzOiBJZ0dyaWRSb3dTZWxlY3RvcnNGZWF0dXJlO1xuXHRAQ29udGVudENoaWxkKElnR3JpZFN1bW1hcmllc0ZlYXR1cmUsIHtzdGF0aWM6IHRydWV9KSBzdW1tYXJpZXM6IElnR3JpZFN1bW1hcmllc0ZlYXR1cmU7XG5cdEBDb250ZW50Q2hpbGQoSWdHcmlkQ29sdW1uRml4aW5nRmVhdHVyZSwge3N0YXRpYzogdHJ1ZX0pIGNvbHVtbkZpeGluZzogSWdHcmlkQ29sdW1uRml4aW5nRmVhdHVyZTtcblx0QENvbnRlbnRDaGlsZChJZ0dyaWRUb29sdGlwc0ZlYXR1cmUsIHtzdGF0aWM6IHRydWV9KSB0b29sdGlwczogSWdHcmlkVG9vbHRpcHNGZWF0dXJlO1xuXHRAQ29udGVudENoaWxkKElnR3JpZEFwcGVuZFJvd3NPbkRlbWFuZEZlYXR1cmUsIHtzdGF0aWM6IHRydWV9KSBhcHBlbmRSb3dzT25EZW1hbmQ6IElnR3JpZEFwcGVuZFJvd3NPbkRlbWFuZEZlYXR1cmU7XG5cdEBDb250ZW50Q2hpbGQoSWdHcmlkTXVsdGlDb2x1bW5IZWFkZXJzRmVhdHVyZSwge3N0YXRpYzogdHJ1ZX0pIG11bHRpQ29sdW1uSGVhZGVyczogSWdHcmlkTXVsdGlDb2x1bW5IZWFkZXJzRmVhdHVyZTtcblxuXHRhZGRGZWF0dXJlKG5hbWUsIHBhcmVudCl7XG5cdFx0dmFyIG5vZGVOYW1lID0gbmFtZS5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uIChnKSB7IHJldHVybiAnLScgKyBnWzBdLnRvTG93ZXJDYXNlKCkgfSk7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XG5cdFx0ZWwgPSBwYXJlbnQuYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdHZhciBjaGlsZCA9IG5ldyBFbGVtZW50UmVmKGVsKTtcdFxuXHRcdFxuXHRcdHN3aXRjaChub2RlTmFtZSkge1xuXHRcdFx0Y2FzZSBcImZpbHRlcmluZ1wiOiB0aGlzLmZpbHRlcmluZyA9IG5ldyBJZ0dyaWRGaWx0ZXJpbmdGZWF0dXJlKGNoaWxkKTticmVhaztcblx0XHRcdGNhc2UgXCJzb3J0aW5nXCI6XHR0aGlzLnNvcnRpbmcgPSBuZXcgSWdHcmlkU29ydGluZ0ZlYXR1cmUoY2hpbGQpOyBicmVhaztcblx0XHRcdGNhc2UgXCJwYWdpbmdcIjogdGhpcy5wYWdpbmcgPSBuZXcgSWdHcmlkUGFnaW5nRmVhdHVyZShjaGlsZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcInVwZGF0aW5nXCI6IHRoaXMudXBkYXRpbmcgPSBuZXcgSWdHcmlkVXBkYXRpbmdGZWF0dXJlKGNoaWxkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiZ3JvdXAtYnlcIjogdGhpcy5ncm91cEJ5ID0gbmV3IElnR3JpZEdyb3VwQnlGZWF0dXJlKGNoaWxkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiY29sdW1uLW1vdmluZ1wiOiB0aGlzLmNvbHVtbk1vdmluZyA9IG5ldyBJZ0dyaWRDb2x1bW5Nb3ZpbmdGZWF0dXJlKGNoaWxkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiaGlkaW5nXCI6IHRoaXMuaGlkaW5nID0gbmV3IElnR3JpZEhpZGluZ0ZlYXR1cmUoY2hpbGQpOyBicmVhaztcblx0XHRcdGNhc2UgXCJyZXNwb25zaXZlXCI6IHRoaXMucmVzcG9uc2l2ZSA9IG5ldyBJZ0dyaWRSZXNwb25zaXZlRmVhdHVyZShjaGlsZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImNlbGwtbWVyZ2luZ1wiOiB0aGlzLmNlbGxNZXJnaW5nID0gbmV3IElnR3JpZENlbGxNZXJnaW5nRmVhdHVyZShjaGlsZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcInJlc2l6aW5nXCI6IHRoaXMucmVzaXppbmcgPSBuZXcgSWdHcmlkUmVzaXppbmdGZWF0dXJlKGNoaWxkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwic2VsZWN0aW9uXCI6IHRoaXMuc2VsZWN0aW9uID0gbmV3IElnR3JpZFNlbGVjdGlvbkZlYXR1cmUoY2hpbGQpOyBicmVhaztcblx0XHRcdGNhc2UgXCJyb3ctc2VsZWN0b3JzXCI6IHRoaXMucm93U2VsZWN0b3JzID0gbmV3IElnR3JpZFJvd1NlbGVjdG9yc0ZlYXR1cmUoY2hpbGQpOyBicmVhaztcblx0XHRcdGNhc2UgXCJzdW1tYXJpZXNcIjogdGhpcy5zdW1tYXJpZXMgPSBuZXcgSWdHcmlkU3VtbWFyaWVzRmVhdHVyZShjaGlsZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImNvbHVtbi1maXhpbmdcIjogdGhpcy5jb2x1bW5GaXhpbmcgPSBuZXcgSWdHcmlkQ29sdW1uRml4aW5nRmVhdHVyZShjaGlsZCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcInRvb2x0aXBzXCI6IHRoaXMudG9vbHRpcHMgPSBuZXcgSWdHcmlkVG9vbHRpcHNGZWF0dXJlKGNoaWxkKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiYXBwZW5kLXJvd3Mtb24tZGVtYW5kXCI6IHRoaXMuYXBwZW5kUm93c09uRGVtYW5kID0gbmV3IElnR3JpZEFwcGVuZFJvd3NPbkRlbWFuZEZlYXR1cmUoY2hpbGQpOyBicmVhaztcblx0XHRcdGNhc2UgXCJtdWx0aS1jb2x1bW4taGVhZGVyc1wiOiB0aGlzLm11bHRpQ29sdW1uSGVhZGVycyA9IG5ldyBJZ0dyaWRNdWx0aUNvbHVtbkhlYWRlcnNGZWF0dXJlKGNoaWxkKTsgYnJlYWs7XG5cdFx0fVxuXHRcdHRoaXNbbmFtZV0ubmdPbkluaXQoKTtcblx0XHR0aGlzLmFsbEZlYXR1cmVzLnB1c2godGhpc1tuYW1lXSk7XG5cblx0fVxuICBcdG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcblx0XHQgIFx0XHR0aGlzLmZpbHRlcmluZyA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLmZpbHRlcmluZyk6IG51bGw7XG5cdFx0XHQgICBcdHRoaXMuc29ydGluZyA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLnNvcnRpbmcpOiBudWxsO1xuXHRcdFx0XHR0aGlzLnBhZ2luZyA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLnBhZ2luZyk6IG51bGw7XG5cdFx0XHRcdHRoaXMudXBkYXRpbmcgPyB0aGlzLmFsbEZlYXR1cmVzLnB1c2godGhpcy51cGRhdGluZyk6IG51bGw7XG5cdFx0XHRcdHRoaXMuZ3JvdXBCeSA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLmdyb3VwQnkpOiBudWxsO1xuXHRcdFx0XHR0aGlzLmNvbHVtbk1vdmluZyA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLmNvbHVtbk1vdmluZyk6IG51bGw7XG5cdFx0XHRcdHRoaXMuaGlkaW5nID8gdGhpcy5hbGxGZWF0dXJlcy5wdXNoKHRoaXMuaGlkaW5nKTogbnVsbDtcblx0XHRcdFx0dGhpcy5yZXNwb25zaXZlID8gdGhpcy5hbGxGZWF0dXJlcy5wdXNoKHRoaXMucmVzcG9uc2l2ZSk6IG51bGw7XG5cdFx0XHRcdHRoaXMuY2VsbE1lcmdpbmcgPyB0aGlzLmFsbEZlYXR1cmVzLnB1c2godGhpcy5jZWxsTWVyZ2luZyk6IG51bGw7XG5cdFx0XHRcdHRoaXMucmVzaXppbmcgPyB0aGlzLmFsbEZlYXR1cmVzLnB1c2godGhpcy5yZXNpemluZyk6IG51bGw7XG5cdFx0XHRcdHRoaXMuc2VsZWN0aW9uID8gdGhpcy5hbGxGZWF0dXJlcy5wdXNoKHRoaXMuc2VsZWN0aW9uKTogbnVsbDtcblx0XHRcdFx0dGhpcy5yb3dTZWxlY3RvcnMgPyB0aGlzLmFsbEZlYXR1cmVzLnB1c2godGhpcy5yb3dTZWxlY3RvcnMpOiBudWxsO1xuXHRcdFx0XHR0aGlzLnN1bW1hcmllcyA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLnN1bW1hcmllcyk6IG51bGw7XG5cdFx0XHRcdHRoaXMuY29sdW1uRml4aW5nID8gdGhpcy5hbGxGZWF0dXJlcy5wdXNoKHRoaXMuY29sdW1uRml4aW5nKTogbnVsbDtcblx0XHRcdFx0dGhpcy50b29sdGlwcyA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLnRvb2x0aXBzKTogbnVsbDtcblx0XHRcdFx0dGhpcy5hcHBlbmRSb3dzT25EZW1hbmQgPyB0aGlzLmFsbEZlYXR1cmVzLnB1c2godGhpcy5hcHBlbmRSb3dzT25EZW1hbmQpOiBudWxsO1xuXHRcdFx0XHR0aGlzLm11bHRpQ29sdW1uSGVhZGVycyA/IHRoaXMuYWxsRmVhdHVyZXMucHVzaCh0aGlzLm11bHRpQ29sdW1uSGVhZGVycyk6IG51bGw7XG4gIH1cbn0iXX0=