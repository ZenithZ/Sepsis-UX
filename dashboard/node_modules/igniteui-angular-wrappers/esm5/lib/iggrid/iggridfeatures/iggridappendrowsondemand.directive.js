/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Feature } from "../feature";
import { ElementRef, Directive } from "@angular/core";
var IgGridAppendRowsOnDemandFeature = /** @class */ (function (_super) {
    tslib_1.__extends(IgGridAppendRowsOnDemandFeature, _super);
    function IgGridAppendRowsOnDemandFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the append rows on demand widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the append rows on demand widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridAppendRowsOnDemandFeature.prototype.destroy = /**
     * Destroys the append rows on demand widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Loads the next chunk of data.
     */
    /* istanbul ignore next */
    /**
     * Loads the next chunk of data.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridAppendRowsOnDemandFeature.prototype.nextChunk = /**
     * Loads the next chunk of data.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgGridAppendRowsOnDemandFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'append-rows-on-demand',
                    inputs: ["type", "chunkSize", "recordCountKey", "chunkSizeUrlKey", "chunkIndexUrlKey", "defaultChunkIndex", "currentChunkIndex", "loadTrigger", "loadMoreDataButtonText"],
                    outputs: ["rowsRequesting", "rowsRequested"]
                },] }
    ];
    /** @nocollapse */
    IgGridAppendRowsOnDemandFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridAppendRowsOnDemandFeature;
}(Feature));
export { IgGridAppendRowsOnDemandFeature };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkYXBwZW5kcm93c29uZGVtYW5kLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZGFwcGVuZHJvd3NvbmRlbWFuZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXREO0lBS3FELDJEQUFpQztJQUNsRix5Q0FBWSxFQUFjO2VBQ3RCLGtCQUFNLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLGlEQUFPOzs7OztJQUFkLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVuQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLG1EQUFTOzs7OztJQUFoQixjQUEyQixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7O2dCQXBCeEMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsYUFBYSxFQUFFLHdCQUF3QixDQUFDO29CQUN6SyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxlQUFlLENBQUM7aUJBQy9DOzs7O2dCQU5RLFVBQVU7O0lBdUJuQixzQ0FBQztDQUFBLEFBckJELENBS3FELE9BQU8sR0FnQjNEO1NBaEJZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZlYXR1cmUgfSBmcm9tIFwiLi4vZmVhdHVyZVwiO1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdhcHBlbmQtcm93cy1vbi1kZW1hbmQnLFxuICAgIGlucHV0czogW1widHlwZVwiLCBcImNodW5rU2l6ZVwiLCBcInJlY29yZENvdW50S2V5XCIsIFwiY2h1bmtTaXplVXJsS2V5XCIsIFwiY2h1bmtJbmRleFVybEtleVwiLCBcImRlZmF1bHRDaHVua0luZGV4XCIsIFwiY3VycmVudENodW5rSW5kZXhcIiwgXCJsb2FkVHJpZ2dlclwiLCBcImxvYWRNb3JlRGF0YUJ1dHRvblRleHRcIl0sXG4gICAgb3V0cHV0czogW1wicm93c1JlcXVlc3RpbmdcIiwgXCJyb3dzUmVxdWVzdGVkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnR3JpZEFwcGVuZFJvd3NPbkRlbWFuZEZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlPElnR3JpZEFwcGVuZFJvd3NPbkRlbWFuZD4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgYXBwZW5kIHJvd3Mgb24gZGVtYW5kIHdpZGdldFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIExvYWRzIHRoZSBuZXh0IGNodW5rIG9mIGRhdGEuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgbmV4dENodW5rKCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19