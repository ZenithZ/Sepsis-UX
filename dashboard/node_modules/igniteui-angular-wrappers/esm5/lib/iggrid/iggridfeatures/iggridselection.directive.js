/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef } from "@angular/core";
import { Feature } from "../feature";
var IgGridSelectionFeature = /** @class */ (function (_super) {
    tslib_1.__extends(IgGridSelectionFeature, _super);
    function IgGridSelectionFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the selection widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the selection widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.destroy = /**
     * Destroys the selection widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     */
    /* istanbul ignore next */
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.clearSelection = /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Selects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.
     */
    /* istanbul ignore next */
    /**
     * Selects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectCell = /**
     * Selects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    function (row, col, isFixed) { return; };
    ;
    /**
     * Selects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    /* istanbul ignore next */
    /**
     * Selects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectCellById = /**
     * Selects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (id, colKey) { return; };
    ;
    /**
     * Deselects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.
     */
    /* istanbul ignore next */
    /**
     * Deselects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectCell = /**
     * Deselects a cell by row/col
     *
     * @param {?} row     Row index
     * @param {?} col     Column index
     * @param {?=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
     * @return {?}
     */
    /* istanbul ignore next */
    function (row, col, isFixed) { return; };
    ;
    /**
     * Deselects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    /* istanbul ignore next */
    /**
     * Deselects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectCellById = /**
     * Deselects a cell by row id/column key
     *
     * @param {?} id     Row Id
     * @param {?} colKey     Column key
     * @return {?}
     */
    /* istanbul ignore next */
    function (id, colKey) { return; };
    ;
    /**
     * Selects a row by index
     *
     * @param index     Row index
     */
    /* istanbul ignore next */
    /**
     * Selects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectRow = /**
     * Selects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    ;
    /**
     * Selects a row by row id
     *
     * @param id     Row Id
     */
    /* istanbul ignore next */
    /**
     * Selects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectRowById = /**
     * Selects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    function (id) { return; };
    ;
    /**
     * Deselects a row by index
     *
     * @param index     Row index
     */
    /* istanbul ignore next */
    /**
     * Deselects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectRow = /**
     * Deselects a row by index
     *
     * @param {?} index     Row index
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    ;
    /**
     * Deselects a row by row id
     *
     * @param id     Row Id
     */
    /* istanbul ignore next */
    /**
     * Deselects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.deselectRowById = /**
     * Deselects a row by row id
     *
     * @param {?} id     Row Id
     * @return {?}
     */
    /* istanbul ignore next */
    function (id) { return; };
    ;
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedCells = /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedRows = /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedCell = /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.selectedRow = /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.activeCell = /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     */
    /* istanbul ignore next */
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSelectionFeature.prototype.activeRow = /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgGridSelectionFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'selection',
                    inputs: ["disabled", "create", "multipleSelection", "mouseDragSelect", "mode", "activation", "wrapAround", "skipChildren", "multipleCellSelectOnClick", "touchDragSelect", "persist", "allowMultipleRangeSelection"],
                    outputs: ["rowSelectionChanging", "rowSelectionChanged", "cellSelectionChanging", "cellSelectionChanged", "activeCellChanging", "activeCellChanged", "activeRowChanging", "activeRowChanged"]
                },] }
    ];
    /** @nocollapse */
    IgGridSelectionFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridSelectionFeature;
}(Feature));
export { IgGridSelectionFeature };
//# sourceMappingURL=data:application/json;base64,