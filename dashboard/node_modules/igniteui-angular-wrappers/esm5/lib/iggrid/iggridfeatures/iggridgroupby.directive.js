/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
var IgGridGroupByFeature = /** @class */ (function (_super) {
    tslib_1.__extends(IgGridGroupByFeature, _super);
    function IgGridGroupByFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Open groupby modal dialog
     */
    /* istanbul ignore next */
    /**
     * Open groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.openGroupByDialog = /**
     * Open groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Close groupby modal dialog
     */
    /* istanbul ignore next */
    /**
     * Close groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.closeGroupByDialog = /**
     * Close groupby modal dialog
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Render groupby modal dialog and its content
     */
    /* istanbul ignore next */
    /**
     * Render groupby modal dialog and its content
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.renderGroupByModalDialog = /**
     * Render groupby modal dialog and its content
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Open layouts dropdown
     */
    /* istanbul ignore next */
    /**
     * Open layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.openDropDown = /**
     * Open layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Close layouts dropdown
     */
    /* istanbul ignore next */
    /**
     * Close layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.closeDropDown = /**
     * Close layouts dropdown
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Check whether column with specified key and layout is grouped
     *
     * @param key    key of the column
     * @param layout    layout name
     */
    /* istanbul ignore next */
    /**
     * Check whether column with specified key and layout is grouped
     *
     * @param {?} key    key of the column
     * @param {?} layout    layout name
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.checkColumnIsGrouped = /**
     * Check whether column with specified key and layout is grouped
     *
     * @param {?} key    key of the column
     * @param {?} layout    layout name
     * @return {?}
     */
    /* istanbul ignore next */
    function (key, layout) { return; };
    ;
    /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param data    data (sorted by colKey) that is used to get the records from.
     * @param colKey    key of the column for which grouping will be applied.
     * @param idval    value of the column by which grouping will be applied.
     */
    /* istanbul ignore next */
    /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param {?} data    data (sorted by colKey) that is used to get the records from.
     * @param {?} colKey    key of the column for which grouping will be applied.
     * @param {?=} idval    value of the column by which grouping will be applied.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.getGroupedData = /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param {?} data    data (sorted by colKey) that is used to get the records from.
     * @param {?} colKey    key of the column for which grouping will be applied.
     * @param {?=} idval    value of the column by which grouping will be applied.
     * @return {?}
     */
    /* istanbul ignore next */
    function (data, colKey, idval) { return; };
    ;
    /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     */
    /* istanbul ignore next */
    /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.groupByColumns = /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Groups by a column
     *
     * @param key    Column Key - group by the column with the specified key
     * @param layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param sortingDirection    if not set it is taken from option defaultSortingDirection
     */
    /* istanbul ignore next */
    /**
     * Groups by a column
     *
     * @param {?} key    Column Key - group by the column with the specified key
     * @param {?=} layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param {?=} sortingDirection    if not set it is taken from option defaultSortingDirection
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.groupByColumn = /**
     * Groups by a column
     *
     * @param {?} key    Column Key - group by the column with the specified key
     * @param {?=} layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param {?=} sortingDirection    if not set it is taken from option defaultSortingDirection
     * @return {?}
     */
    /* istanbul ignore next */
    function (key, layout, sortingDirection) { return; };
    ;
    /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param key    Column Key - ungroup by the column with the specified key
     * @param layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     */
    /* istanbul ignore next */
    /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param {?} key    Column Key - ungroup by the column with the specified key
     * @param {?=} layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.ungroupByColumn = /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param {?} key    Column Key - ungroup by the column with the specified key
     * @param {?=} layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     * @return {?}
     */
    /* istanbul ignore next */
    function (key, layout) { return; };
    ;
    /**
     * Expand group row with specified id
     *
     * @param rowId    data-id attribute of the group row in the DOM
     */
    /* istanbul ignore next */
    /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.expand = /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId) { return; };
    ;
    /**
     * Expand group row with specified id
     *
     * @param rowId    data-id attribute of the group row in the DOM
     */
    /* istanbul ignore next */
    /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.collapse = /**
     * Expand group row with specified id
     *
     * @param {?} rowId    data-id attribute of the group row in the DOM
     * @return {?}
     */
    /* istanbul ignore next */
    function (rowId) { return; };
    ;
    /**
     * Clears the group by columns list and updates the view.
     */
    /* istanbul ignore next */
    /**
     * Clears the group by columns list and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.ungroupAll = /**
     * Clears the group by columns list and updates the view.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys the group by feature object.
     */
    /* istanbul ignore next */
    /**
     * Destroys the group by feature object.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridGroupByFeature.prototype.destroy = /**
     * Destroys the group by feature object.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgGridGroupByFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'group-by',
                    inputs: ["disabled", "create", "groupByAreaVisibility", "initialExpand", "emptyGroupByAreaContent", "emptyGroupByAreaContentSelectColumns", "expansionIndicatorVisibility", "groupByLabelWidth", "labelDragHelperOpacity", "indentation", "defaultSortingDirection", "groupedColumns", "resultResponseKey", "groupedRowTextTemplate", "type", "groupByUrlKey", "groupByUrlKeyAscValue", "groupByUrlKeyDescValue", "summarySettings", "columnSettings", "expandTooltip", "collapseTooltip", "removeButtonTooltip", "modalDialogGroupByOnClick", "modalDialogGroupByButtonText", "modalDialogCaptionButtonDesc", "modalDialogCaptionButtonAsc", "modalDialogCaptionButtonUngroup", "modalDialogCaptionText", "modalDialogDropDownLabel", "modalDialogRootLevelHierarchicalGrid", "modalDialogDropDownButtonCaption", "modalDialogClearAllButtonLabel", "emptyGroupByAreaContentSelectColumnsCaption", "modalDialogDropDownWidth", "modalDialogDropDownAreaWidth", "modalDialogAnimationDuration", "modalDialogWidth", "modalDialogHeight", "modalDialogButtonApplyText", "modalDialogButtonCancelText", "useGridColumnFormatter", "persist", "groupByDialogContainment", "dialogWidget", "inherit"],
                    outputs: ["groupedColumnsChanging", "groupedColumnsChanged", "modalDialogMoving", "modalDialogClosing", "modalDialogClosed", "modalDialogOpening", "modalDialogOpened", "modalDialogContentsRendering", "modalDialogContentsRendered", "modalDialogButtonApplyClick", "modalDialogButtonResetClick", "modalDialogGroupingColumn", "modalDialogGroupColumn", "modalDialogUngroupingColumn", "modalDialogUngroupColumn", "modalDialogSortGroupedColumn"]
                },] }
    ];
    /** @nocollapse */
    IgGridGroupByFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridGroupByFeature;
}(Feature));
export { IgGridGroupByFeature };
//# sourceMappingURL=data:application/json;base64,