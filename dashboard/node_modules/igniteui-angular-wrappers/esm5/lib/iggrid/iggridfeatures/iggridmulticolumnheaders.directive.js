/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
var IgGridMultiColumnHeadersFeature = /** @class */ (function (_super) {
    tslib_1.__extends(IgGridMultiColumnHeadersFeature, _super);
    function IgGridMultiColumnHeadersFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Collapses an expanded group. If the group is collapsed, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     */
    /* istanbul ignore next */
    /**
     * Collapses an expanded group. If the group is collapsed, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.collapseGroup = /**
     * Collapses an expanded group. If the group is collapsed, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    function (groupKey, callback) { return; };
    ;
    /**
     * Expands a collapsed group. If the group is expanded, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     */
    /* istanbul ignore next */
    /**
     * Expands a collapsed group. If the group is expanded, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.expandGroup = /**
     * Expands a collapsed group. If the group is expanded, the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    function (groupKey, callback) { return; };
    ;
    /**
     * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined.
     */
    /* istanbul ignore next */
    /**
     * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.getMultiColumnHeaders = /**
     * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Toggles a collapsible group.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     */
    /* istanbul ignore next */
    /**
     * Toggles a collapsible group.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridMultiColumnHeadersFeature.prototype.toggleGroup = /**
     * Toggles a collapsible group.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     * @param {?} groupKey
     * @param {?=} callback
     * @return {?}
     */
    /* istanbul ignore next */
    function (groupKey, callback) { return; };
    ;
    IgGridMultiColumnHeadersFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'multi-column-headers',
                    inputs: ["inherit"],
                    outputs: ["groupCollapsing", "groupCollapsed", "groupExpanding", "groupExpanded"]
                },] }
    ];
    /** @nocollapse */
    IgGridMultiColumnHeadersFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridMultiColumnHeadersFeature;
}(Feature));
export { IgGridMultiColumnHeadersFeature };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkbXVsdGljb2x1bW5oZWFkZXJzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdncmlkL2lnZ3JpZGZlYXR1cmVzL2lnZ3JpZG11bHRpY29sdW1uaGVhZGVycy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSXJDO0lBS3FELDJEQUFpQztJQUNsRix5Q0FBWSxFQUFjO2VBQ3RCLGtCQUFNLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLGlEQUFPOzs7OztJQUFkLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVuQzs7O09BR0c7SUFDSCwwQkFBMEI7Ozs7Ozs7OztJQUNuQix1REFBYTs7Ozs7Ozs7SUFBcEIsVUFBcUIsUUFBZ0IsRUFBRSxRQUFtQixJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUM5RTs7O09BR0c7SUFDSCwwQkFBMEI7Ozs7Ozs7OztJQUNuQixxREFBVzs7Ozs7Ozs7SUFBbEIsVUFBbUIsUUFBZ0IsRUFBRSxRQUFtQixJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUM1RTs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLCtEQUFxQjs7Ozs7SUFBNUIsY0FBZ0QsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBQzFEOzs7T0FHRztJQUNILDBCQUEwQjs7Ozs7Ozs7O0lBQ25CLHFEQUFXOzs7Ozs7OztJQUFsQixVQUFtQixRQUFnQixFQUFFLFFBQW1CLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOztnQkF0Qy9FLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQ25CLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQztpQkFDcEY7Ozs7Z0JBVFEsVUFBVTs7SUE0Q25CLHNDQUFDO0NBQUEsQUF2Q0QsQ0FLcUQsT0FBTyxHQWtDM0Q7U0FsQ1ksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tIFwiLi4vZmVhdHVyZVwiO1xuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSBcIi4uL2NvbHVtbi5kaXJlY3RpdmVcIjtcblxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ211bHRpLWNvbHVtbi1oZWFkZXJzJyxcbiAgICBpbnB1dHM6IFtcImluaGVyaXRcIl0sXG4gICAgb3V0cHV0czogW1wiZ3JvdXBDb2xsYXBzaW5nXCIsIFwiZ3JvdXBDb2xsYXBzZWRcIiwgXCJncm91cEV4cGFuZGluZ1wiLCBcImdyb3VwRXhwYW5kZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdHcmlkTXVsdGlDb2x1bW5IZWFkZXJzRmVhdHVyZSBleHRlbmRzIEZlYXR1cmU8SWdHcmlkTXVsdGlDb2x1bW5IZWFkZXJzPiB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgc3VwZXIoZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSB3aWRnZXRcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZXMgYW4gZXhwYW5kZWQgZ3JvdXAuIElmIHRoZSBncm91cCBpcyBjb2xsYXBzZWQsIHRoZSBtZXRob2QgZG9lcyBub3RoaW5nLlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cyB3aGljaCBtZWFucyB0aGF0IGl0IHJldHVybnMgaW1tZWRpYXRlbHkgYW5kIGFueSBzdWJzZXF1ZW50IGNvZGUgd2lsbCBleGVjdXRlIGluIHBhcmFsbGVsLiBUaGlzIG1heSBsZWFkIHRvIHJ1bnRpbWUgZXJyb3JzLiBUbyBhdm9pZCB0aGVtIHB1dCB0aGUgc3Vic2VxdWVudCBjb2RlIGluIHRoZSBjYWxsYmFjayBwYXJhbWV0ZXIgcHJvdmlkZWQgYnkgdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBjb2xsYXBzZUdyb3VwKGdyb3VwS2V5OiBzdHJpbmcsIGNhbGxiYWNrPzogRnVuY3Rpb24pOiB2b2lkIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEV4cGFuZHMgYSBjb2xsYXBzZWQgZ3JvdXAuIElmIHRoZSBncm91cCBpcyBleHBhbmRlZCwgdGhlIG1ldGhvZCBkb2VzIG5vdGhpbmcuXG4gICAgICogTm90ZTogVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzIHdoaWNoIG1lYW5zIHRoYXQgaXQgcmV0dXJucyBpbW1lZGlhdGVseSBhbmQgYW55IHN1YnNlcXVlbnQgY29kZSB3aWxsIGV4ZWN1dGUgaW4gcGFyYWxsZWwuIFRoaXMgbWF5IGxlYWQgdG8gcnVudGltZSBlcnJvcnMuIFRvIGF2b2lkIHRoZW0gcHV0IHRoZSBzdWJzZXF1ZW50IGNvZGUgaW4gdGhlIGNhbGxiYWNrIHBhcmFtZXRlciBwcm92aWRlZCBieSB0aGUgbWV0aG9kLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGV4cGFuZEdyb3VwKGdyb3VwS2V5OiBzdHJpbmcsIGNhbGxiYWNrPzogRnVuY3Rpb24pOiB2b2lkIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgbXVsdGljb2x1bW4gaGVhZGVycyBhcnJheS4gaWYgdGhlcmUgYXJlblwidCBtdWx0aWNvbHVtbiBoZWFkZXJzIHJldHVybnMgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldE11bHRpQ29sdW1uSGVhZGVycygpOiBBcnJheTxDb2x1bW4+IHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgYSBjb2xsYXBzaWJsZSBncm91cC5cbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMgd2hpY2ggbWVhbnMgdGhhdCBpdCByZXR1cm5zIGltbWVkaWF0ZWx5IGFuZCBhbnkgc3Vic2VxdWVudCBjb2RlIHdpbGwgZXhlY3V0ZSBpbiBwYXJhbGxlbC4gVGhpcyBtYXkgbGVhZCB0byBydW50aW1lIGVycm9ycy4gVG8gYXZvaWQgdGhlbSBwdXQgdGhlIHN1YnNlcXVlbnQgY29kZSBpbiB0aGUgY2FsbGJhY2sgcGFyYW1ldGVyIHByb3ZpZGVkIGJ5IHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdG9nZ2xlR3JvdXAoZ3JvdXBLZXk6IHN0cmluZywgY2FsbGJhY2s/OiBGdW5jdGlvbik6IHZvaWQgeyByZXR1cm47IH07XG59Il19