/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
var IgGridResizingFeature = /** @class */ (function (_super) {
    tslib_1.__extends(IgGridResizingFeature, _super);
    function IgGridResizingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Destroys the resizing widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the resizing widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridResizingFeature.prototype.destroy = /**
     * Destroys the resizing widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
     */
    /* istanbul ignore next */
    /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param {?=} width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridResizingFeature.prototype.resize = /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param {?} column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param {?=} width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
     * @return {?}
     */
    /* istanbul ignore next */
    function (column, width) { return; };
    ;
    IgGridResizingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'resizing',
                    inputs: ["disabled", "create", "allowDoubleClickToResize", "deferredResizing", "columnSettings", "handleThreshold", "inherit"],
                    outputs: ["columnResizing", "columnResizingRefused", "columnResized"]
                },] }
    ];
    /** @nocollapse */
    IgGridResizingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridResizingFeature;
}(Feature));
export { IgGridResizingFeature };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkcmVzaXppbmcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ2dyaWQvaWdncmlkZmVhdHVyZXMvaWdncmlkcmVzaXppbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVyQztJQUsyQyxpREFBdUI7SUFDOUQsK0JBQVksRUFBYztlQUN0QixrQkFBTSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQ7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQix1Q0FBTzs7Ozs7SUFBZCxjQUF5QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFbkM7Ozs7O09BS0c7SUFDSCwwQkFBMEI7Ozs7Ozs7OztJQUNuQixzQ0FBTTs7Ozs7Ozs7SUFBYixVQUFjLE1BQWMsRUFBRSxLQUFjLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOztnQkF2Qm5FLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLENBQUM7b0JBQzlILE9BQU8sRUFBRSxDQUFDLGdCQUFnQixFQUFFLHVCQUF1QixFQUFFLGVBQWUsQ0FBQztpQkFDeEU7Ozs7Z0JBUFEsVUFBVTs7SUEyQm5CLDRCQUFDO0NBQUEsQUF4QkQsQ0FLMkMsT0FBTyxHQW1CakQ7U0FuQlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tIFwiLi4vZmVhdHVyZVwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3Jlc2l6aW5nJyxcbiAgICBpbnB1dHM6IFtcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwiYWxsb3dEb3VibGVDbGlja1RvUmVzaXplXCIsIFwiZGVmZXJyZWRSZXNpemluZ1wiLCBcImNvbHVtblNldHRpbmdzXCIsIFwiaGFuZGxlVGhyZXNob2xkXCIsIFwiaW5oZXJpdFwiXSxcbiAgICBvdXRwdXRzOiBbXCJjb2x1bW5SZXNpemluZ1wiLCBcImNvbHVtblJlc2l6aW5nUmVmdXNlZFwiLCBcImNvbHVtblJlc2l6ZWRcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdHcmlkUmVzaXppbmdGZWF0dXJlIGV4dGVuZHMgRmVhdHVyZTxJZ0dyaWRSZXNpemluZz4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcmVzaXppbmcgd2lkZ2V0XG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyBhIGNvbHVtbiB0byBhIHNwZWNpZmllZCB3aWR0aCBpbiBwaXhlbHMsIHBlcmNlbnRzIG9yIGF1dG8gaWYgbm8gd2lkdGggaXMgc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAgICBBbiBpZGVudGlmaWVyIGZvciB0aGUgY29sdW1uLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgYXMgYSBjb2x1bW5JbmRleCBlbHNlIGlmIGEgc3RyaW5ncyBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgYXMgYSBjb2x1bW5LZXkuXG4gICAgICogQHBhcmFtIHdpZHRoICAgIFdpZHRoIG9mIHRoZSBjb2x1bW4gaW4gcGl4ZWxzIG9yIHBlcmNlbnRzLiBJZiBubyB3aWR0aCBvciBcIipcIiBpcyBzcGVjaWZpZWQgdGhlIGNvbHVtbiB3aWxsIGJlIGF1dG8tc2l6ZWQgdG8gdGhlIHdpZHRoIG9mIHRoZSBkYXRhIGluIGl0IChpbmNsdWRpbmcgaGVhZGVyIGFuZCBmb290ZXIgY2VsbHMpLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHJlc2l6ZShjb2x1bW46IE9iamVjdCwgd2lkdGg/OiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xufSJdfQ==