/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Directive } from "@angular/core";
import { Feature } from "../feature";
var IgGridSortingFeature = /** @class */ (function (_super) {
    tslib_1.__extends(IgGridSortingFeature, _super);
    function IgGridSortingFeature(el) {
        return _super.call(this, el) || this;
    }
    /**
     * Sorts the data in a grid column  and updates the UI.
     *
     * @param index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param direction     Specifies sorting direction (ascending or descending)
     * @param header
     */
    /* istanbul ignore next */
    /**
     * Sorts the data in a grid column  and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} direction     Specifies sorting direction (ascending or descending)
     * @param {?} header
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.sortColumn = /**
     * Sorts the data in a grid column  and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} direction     Specifies sorting direction (ascending or descending)
     * @param {?} header
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, direction, header) { return; };
    ;
    /**
     * Sorts the data in grid columns and updates the UI.\
     */
    /* istanbul ignore next */
    /**
     * Sorts the data in grid columns and updates the UI.\
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.sortMultiple = /**
     * Sorts the data in grid columns and updates the UI.\
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Removes current sorting(for all sorted columns) and updates the UI.
     */
    /* istanbul ignore next */
    /**
     * Removes current sorting(for all sorted columns) and updates the UI.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.clearSorting = /**
     * Removes current sorting(for all sorted columns) and updates the UI.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
     *
     * @param index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param header     - if specified client events should be fired
     */
    /* istanbul ignore next */
    /**
     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} header     - if specified client events should be fired
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.unsortColumn = /**
     * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
     *
     * @param {?} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param {?} header     - if specified client events should be fired
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, header) { return; };
    ;
    /**
     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
     */
    /* istanbul ignore next */
    /**
     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.destroy = /**
     * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Opens the multiple sorting dialog.
     */
    /* istanbul ignore next */
    /**
     * Opens the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.openMultipleSortingDialog = /**
     * Opens the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Closes the multiple sorting dialog.
     */
    /* istanbul ignore next */
    /**
     * Closes the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.closeMultipleSortingDialog = /**
     * Closes the multiple sorting dialog.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param isToCallEvents
     */
    /* istanbul ignore next */
    /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param {?} isToCallEvents
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.renderMultipleSortingDialogContent = /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param {?} isToCallEvents
     * @return {?}
     */
    /* istanbul ignore next */
    function (isToCallEvents) { return; };
    ;
    /**
     * Remove clear button for multiple sorting dialog
     */
    /* istanbul ignore next */
    /**
     * Remove clear button for multiple sorting dialog
     * @return {?}
     */
    /* istanbul ignore next */
    IgGridSortingFeature.prototype.removeDialogClearButton = /**
     * Remove clear button for multiple sorting dialog
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgGridSortingFeature.decorators = [
        { type: Directive, args: [{
                    selector: 'sorting',
                    inputs: ["disabled", "create", "type", "caseSensitive", "applySortedColumnCss", "sortUrlKey", "sortUrlKeyAscValue", "sortUrlKeyDescValue", "mode", "customSortFunction", "firstSortDirection", "sortedColumnTooltip", "modalDialogSortOnClick", "modalDialogSortByButtonText", "modalDialogResetButtonLabel", "modalDialogCaptionButtonDesc", "modalDialogCaptionButtonAsc", "modalDialogCaptionButtonUnsort", "modalDialogWidth", "modalDialogHeight", "modalDialogAnimationDuration", "featureChooserText", "unsortedColumnTooltip", "columnSettings", "modalDialogCaptionText", "modalDialogButtonApplyText", "modalDialogButtonCancelText", "featureChooserSortAsc", "featureChooserSortDesc", "persist", "sortingDialogContainment", "dialogWidget", "inherit"],
                    outputs: ["columnSorting", "columnSorted", "modalDialogOpening", "modalDialogOpened", "modalDialogMoving", "modalDialogClosing", "modalDialogClosed", "modalDialogContentsRendering", "modalDialogContentsRendered", "modalDialogSortingChanged", "modalDialogButtonUnsortClick", "modalDialogSortClick", "modalDialogButtonApplyClick", "modalDialogButtonResetClick"]
                },] }
    ];
    /** @nocollapse */
    IgGridSortingFeature.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return IgGridSortingFeature;
}(Feature));
export { IgGridSortingFeature };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdncmlkc29ydGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnZ3JpZC9pZ2dyaWRmZWF0dXJlcy9pZ2dyaWRzb3J0aW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFckM7SUFLMEMsZ0RBQXNCO0lBQzVELDhCQUFZLEVBQWM7ZUFDdEIsa0JBQU0sRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILDBCQUEwQjs7Ozs7Ozs7OztJQUNuQix5Q0FBVTs7Ozs7Ozs7O0lBQWpCLFVBQWtCLEtBQWEsRUFBRSxTQUFpQixFQUFFLE1BQWMsSUFBVSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFdEY7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQiwyQ0FBWTs7Ozs7SUFBbkIsY0FBOEIsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRXhDOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsMkNBQVk7Ozs7O0lBQW5CLGNBQThCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUV4Qzs7Ozs7T0FLRztJQUNILDBCQUEwQjs7Ozs7Ozs7O0lBQ25CLDJDQUFZOzs7Ozs7OztJQUFuQixVQUFvQixLQUFhLEVBQUUsTUFBYyxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVyRTs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLHNDQUFPOzs7OztJQUFkLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVuQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLHdEQUF5Qjs7Ozs7SUFBaEMsY0FBMkMsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRXJEOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIseURBQTBCOzs7OztJQUFqQyxjQUE0QyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFdEQ7Ozs7T0FJRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIsaUVBQWtDOzs7Ozs7O0lBQXpDLFVBQTBDLGNBQXNCLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRXBGOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsc0RBQXVCOzs7OztJQUE5QixjQUF5QyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7O2dCQXZFdEQsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxTQUFTO29CQUNuQixNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsc0JBQXNCLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBRSx3QkFBd0IsRUFBRSw2QkFBNkIsRUFBRSw2QkFBNkIsRUFBRSw4QkFBOEIsRUFBRSw2QkFBNkIsRUFBRSxnQ0FBZ0MsRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSw4QkFBOEIsRUFBRSxvQkFBb0IsRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSw0QkFBNEIsRUFBRSw2QkFBNkIsRUFBRSx1QkFBdUIsRUFBRSx3QkFBd0IsRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztvQkFDcHVCLE9BQU8sRUFBRSxDQUFDLGVBQWUsRUFBRSxjQUFjLEVBQUUsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsOEJBQThCLEVBQUUsNkJBQTZCLEVBQUUsMkJBQTJCLEVBQUUsOEJBQThCLEVBQUUsc0JBQXNCLEVBQUUsNkJBQTZCLEVBQUUsNkJBQTZCLENBQUM7aUJBQzFXOzs7O2dCQVBRLFVBQVU7O0lBMkVuQiwyQkFBQztDQUFBLEFBeEVELENBSzBDLE9BQU8sR0FtRWhEO1NBbkVZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIERpcmVjdGl2ZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSBcIi4uL2ZlYXR1cmVcIjtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdzb3J0aW5nJyxcbiAgICBpbnB1dHM6IFtcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwidHlwZVwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJhcHBseVNvcnRlZENvbHVtbkNzc1wiLCBcInNvcnRVcmxLZXlcIiwgXCJzb3J0VXJsS2V5QXNjVmFsdWVcIiwgXCJzb3J0VXJsS2V5RGVzY1ZhbHVlXCIsIFwibW9kZVwiLCBcImN1c3RvbVNvcnRGdW5jdGlvblwiLCBcImZpcnN0U29ydERpcmVjdGlvblwiLCBcInNvcnRlZENvbHVtblRvb2x0aXBcIiwgXCJtb2RhbERpYWxvZ1NvcnRPbkNsaWNrXCIsIFwibW9kYWxEaWFsb2dTb3J0QnlCdXR0b25UZXh0XCIsIFwibW9kYWxEaWFsb2dSZXNldEJ1dHRvbkxhYmVsXCIsIFwibW9kYWxEaWFsb2dDYXB0aW9uQnV0dG9uRGVzY1wiLCBcIm1vZGFsRGlhbG9nQ2FwdGlvbkJ1dHRvbkFzY1wiLCBcIm1vZGFsRGlhbG9nQ2FwdGlvbkJ1dHRvblVuc29ydFwiLCBcIm1vZGFsRGlhbG9nV2lkdGhcIiwgXCJtb2RhbERpYWxvZ0hlaWdodFwiLCBcIm1vZGFsRGlhbG9nQW5pbWF0aW9uRHVyYXRpb25cIiwgXCJmZWF0dXJlQ2hvb3NlclRleHRcIiwgXCJ1bnNvcnRlZENvbHVtblRvb2x0aXBcIiwgXCJjb2x1bW5TZXR0aW5nc1wiLCBcIm1vZGFsRGlhbG9nQ2FwdGlvblRleHRcIiwgXCJtb2RhbERpYWxvZ0J1dHRvbkFwcGx5VGV4dFwiLCBcIm1vZGFsRGlhbG9nQnV0dG9uQ2FuY2VsVGV4dFwiLCBcImZlYXR1cmVDaG9vc2VyU29ydEFzY1wiLCBcImZlYXR1cmVDaG9vc2VyU29ydERlc2NcIiwgXCJwZXJzaXN0XCIsIFwic29ydGluZ0RpYWxvZ0NvbnRhaW5tZW50XCIsIFwiZGlhbG9nV2lkZ2V0XCIsIFwiaW5oZXJpdFwiXSxcbiAgICBvdXRwdXRzOiBbXCJjb2x1bW5Tb3J0aW5nXCIsIFwiY29sdW1uU29ydGVkXCIsIFwibW9kYWxEaWFsb2dPcGVuaW5nXCIsIFwibW9kYWxEaWFsb2dPcGVuZWRcIiwgXCJtb2RhbERpYWxvZ01vdmluZ1wiLCBcIm1vZGFsRGlhbG9nQ2xvc2luZ1wiLCBcIm1vZGFsRGlhbG9nQ2xvc2VkXCIsIFwibW9kYWxEaWFsb2dDb250ZW50c1JlbmRlcmluZ1wiLCBcIm1vZGFsRGlhbG9nQ29udGVudHNSZW5kZXJlZFwiLCBcIm1vZGFsRGlhbG9nU29ydGluZ0NoYW5nZWRcIiwgXCJtb2RhbERpYWxvZ0J1dHRvblVuc29ydENsaWNrXCIsIFwibW9kYWxEaWFsb2dTb3J0Q2xpY2tcIiwgXCJtb2RhbERpYWxvZ0J1dHRvbkFwcGx5Q2xpY2tcIiwgXCJtb2RhbERpYWxvZ0J1dHRvblJlc2V0Q2xpY2tcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdHcmlkU29ydGluZ0ZlYXR1cmUgZXh0ZW5kcyBGZWF0dXJlPElnR3JpZFNvcnRpbmc+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZikge1xuICAgICAgICBzdXBlcihlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU29ydHMgdGhlIGRhdGEgaW4gYSBncmlkIGNvbHVtbiAgYW5kIHVwZGF0ZXMgdGhlIFVJLlxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4ICAgICBDb2x1bW4ga2V5IChzdHJpbmcpIG9yIGluZGV4IChudW1iZXIpIC0gZm9yIG11bHRpLXJvdyBncmlkIG9ubHkgY29sdW1uIGtleSBjYW4gYmUgdXNlZC4gU3BlY2lmaWVzIHRoZSBjb2x1bW4gd2hpY2ggd2Ugd2FudCB0byBzb3J0LiBJZiB0aGUgbW9kZSBpcyBtdWx0aXBsZSwgcHJldmlvdXMgc29ydGluZyBzdGF0ZXMgYXJlIG5vdCBjbGVhcmVkLlxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gICAgIFNwZWNpZmllcyBzb3J0aW5nIGRpcmVjdGlvbiAoYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcpXG4gICAgICogQHBhcmFtIGhlYWRlciAgICAgXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc29ydENvbHVtbihpbmRleDogT2JqZWN0LCBkaXJlY3Rpb246IE9iamVjdCwgaGVhZGVyOiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogU29ydHMgdGhlIGRhdGEgaW4gZ3JpZCBjb2x1bW5zIGFuZCB1cGRhdGVzIHRoZSBVSS5cXFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHNvcnRNdWx0aXBsZSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBjdXJyZW50IHNvcnRpbmcoZm9yIGFsbCBzb3J0ZWQgY29sdW1ucykgYW5kIHVwZGF0ZXMgdGhlIFVJLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGNsZWFyU29ydGluZygpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzb3J0aW5nIGZvciB0aGUgZ3JpZCBjb2x1bW4gd2l0aCB0aGUgc3BlY2lmaWVkIGNvbHVtbktleS9jb2x1bW5JbmRleCBhbmQgdXBkYXRlcyB0aGUgVUkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXggICAgIENvbHVtbiBrZXkgKHN0cmluZykgb3IgaW5kZXggKG51bWJlcikgLSBmb3IgbXVsdGktcm93IGdyaWQgb25seSBjb2x1bW4ga2V5IGNhbiBiZSB1c2VkLiBTcGVjaWZpZXMgdGhlIGNvbHVtbiBmb3Igd2hpY2ggd2Ugd2FudCB0byByZW1vdmUgc29ydGluZy4gSWYgdGhlIG1vZGUgaXMgbXVsdGlwbGUsIHByZXZpb3VzIHNvcnRpbmcgc3RhdGVzIGFyZSBub3QgY2xlYXJlZC5cbiAgICAgKiBAcGFyYW0gaGVhZGVyICAgICAtIGlmIHNwZWNpZmllZCBjbGllbnQgZXZlbnRzIHNob3VsZCBiZSBmaXJlZFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHVuc29ydENvbHVtbihpbmRleDogT2JqZWN0LCBoZWFkZXI6IE9iamVjdCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgc29ydGluZyBmZWF0dXJlLiBVbmJpbmRzIGV2ZW50cywgcmVtb3ZlcyBhZGRlZCBzb3J0aW5nIGVsZW1lbnRzLCBldGMuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIG11bHRpcGxlIHNvcnRpbmcgZGlhbG9nLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIG9wZW5NdWx0aXBsZVNvcnRpbmdEaWFsb2coKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgbXVsdGlwbGUgc29ydGluZyBkaWFsb2cuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgY2xvc2VNdWx0aXBsZVNvcnRpbmdEaWFsb2coKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgY29udGVudCBvZiBtdWx0aXBsZSBzb3J0aW5nIGRpYWxvZyAtIHNvcnRlZCBhbmQgdW5zb3J0ZWQgY29sdW1ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc1RvQ2FsbEV2ZW50cyBcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyByZW5kZXJNdWx0aXBsZVNvcnRpbmdEaWFsb2dDb250ZW50KGlzVG9DYWxsRXZlbnRzOiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGNsZWFyIGJ1dHRvbiBmb3IgbXVsdGlwbGUgc29ydGluZyBkaWFsb2dcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyByZW1vdmVEaWFsb2dDbGVhckJ1dHRvbigpOiB2b2lkIHsgcmV0dXJuOyB9O1xufSJdfQ==