/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgPopoverComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgPopoverComponent, _super);
    function IgPopoverComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgPopoverComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * @return {?}
     */
    IgPopoverComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elem = jQuery(document).find("#" + this.widgetId);
        if (elem.length === 1) {
            this._el = elem;
            this._events = new Map();
            //events binding
            /** @type {?} */
            var that_1 = this;
            /** @type {?} */
            var evtName;
            for (var propt in jQuery.ui[this._widgetName].prototype.events) {
                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
                this._events[evtName] = propt;
                jQuery(this._el).on(evtName, (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that_1[that_1._events[evt.type]].emit({ event: evt, ui: ui });
                }));
            }
            jQuery(this._el)[this._widgetName](this.options);
        }
        else {
            _super.prototype.ngOnInit.call(this);
        }
    };
    /**
     * Destroys the popover widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the popover widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.destroy = /**
     * Destroys the popover widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the ID of the element the popover is attached to
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of the element the popover is attached to
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.id = /**
     * Returns the ID of the element the popover is attached to
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the container for the popover contents
     */
    /* istanbul ignore next */
    /**
     * Returns the container for the popover contents
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.container = /**
     * Returns the container for the popover contents
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Shows the popover for the specified target
     *
     * @param trg     The element to show popover for.
     * @param content     The string to set for the popover to show.
     */
    /* istanbul ignore next */
    /**
     * Shows the popover for the specified target
     *
     * @param {?=} trg     The element to show popover for.
     * @param {?=} content     The string to set for the popover to show.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.show = /**
     * Shows the popover for the specified target
     *
     * @param {?=} trg     The element to show popover for.
     * @param {?=} content     The string to set for the popover to show.
     * @return {?}
     */
    /* istanbul ignore next */
    function (trg, content) { return; };
    ;
    /**
     * Hides the popover for the specified target
     */
    /* istanbul ignore next */
    /**
     * Hides the popover for the specified target
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.hide = /**
     * Hides the popover for the specified target
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets the currently set content for the popover container
     */
    /* istanbul ignore next */
    /**
     * Gets the currently set content for the popover container
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.getContent = /**
     * Gets the currently set content for the popover container
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Sets the content for the popover container
     *
     * @param newCnt     The popover content to set.
     */
    /* istanbul ignore next */
    /**
     * Sets the content for the popover container
     *
     * @param {?} newCnt     The popover content to set.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.setContent = /**
     * Sets the content for the popover container
     *
     * @param {?} newCnt     The popover content to set.
     * @return {?}
     */
    /* istanbul ignore next */
    function (newCnt) { return; };
    ;
    /**
     * Gets the popover current target
     */
    /* istanbul ignore next */
    /**
     * Gets the popover current target
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.target = /**
     * Gets the popover current target
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets the current coordinates of the popover
     */
    /* istanbul ignore next */
    /**
     * Gets the current coordinates of the popover
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.getCoordinates = /**
     * Gets the current coordinates of the popover
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Sets the popover to specific coordinates.
     *
     * @param pos     The popover coordinates in pixels.
     */
    /* istanbul ignore next */
    /**
     * Sets the popover to specific coordinates.
     *
     * @param {?} pos     The popover coordinates in pixels.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPopoverComponent.prototype.setCoordinates = /**
     * Sets the popover to specific coordinates.
     *
     * @param {?} pos     The popover coordinates in pixels.
     * @return {?}
     */
    /* istanbul ignore next */
    function (pos) { return; };
    ;
    IgPopoverComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-popover",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "closeOnBlur", "direction", "position", "width", "height", "minWidth", "maxWidth", "maxHeight", "animationDuration", "contentTemplate", "selectors", "headerTemplate", "showOn", "containment", "appendTo"],
                    outputs: ["showing", "shown", "hiding", "hidden"]
                }] }
    ];
    /** @nocollapse */
    IgPopoverComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgPopoverComponent;
}(IgControlBase));
export { IgPopoverComponent };
//# sourceMappingURL=data:application/json;base64,