/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgContentControlBase } from "../igcontrolbase/igcontentcontrolbase";
var IgLayoutManagerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgLayoutManagerComponent, _super);
    function IgLayoutManagerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    /* istanbul ignore next */
    /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    IgLayoutManagerComponent.prototype.reflow = /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param {?=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param {?=} animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param {?=} event Indicates the browser even which triggered this action (not API).
     * @return {?}
     */
    /* istanbul ignore next */
    function (forceReflow, animationDuration, event) { return; };
    ;
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                     1. Remove custom CSS classes that were added.
     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     *                     3. Unbind all events that were bound.
     */
    /* istanbul ignore next */
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                     1. Remove custom CSS classes that were added.
     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     *                     3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    IgLayoutManagerComponent.prototype.destroy = /**
     * Destroy is part of the jQuery UI widget API and does the following:
     *                     1. Remove custom CSS classes that were added.
     *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     *                     3. Unbind all events that were bound.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgLayoutManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-layout-manager",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "borderLayout", "gridLayout", "height", "itemCount", "items", "layoutMode", "width"],
                    outputs: ["internalResized", "internalResizing", "itemRendered", "itemRendering", "rendered"]
                }] }
    ];
    /** @nocollapse */
    IgLayoutManagerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgLayoutManagerComponent;
}(IgContentControlBase));
export { IgLayoutManagerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdsYXlvdXRtYW5hZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdsYXlvdXRtYW5hZ2VyL2lnbGF5b3V0bWFuYWdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUU3RTtJQU04QyxvREFBcUM7SUFDL0Usa0NBQVksRUFBYyxFQUFFLFFBQWtCLEVBQUUsT0FBd0IsRUFBRSxXQUE0QixFQUFFLEdBQXNCO2VBQUksa0JBQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQztJQUFFLENBQUM7SUFHbkw7Ozs7Ozs7T0FPRztJQUNILDBCQUEwQjs7Ozs7Ozs7Ozs7SUFDbkIseUNBQU07Ozs7Ozs7Ozs7SUFBYixVQUFjLFdBQXFCLEVBQUUsaUJBQTBCLEVBQUUsS0FBYyxJQUFVLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVuRzs7Ozs7T0FLRztJQUNILDBCQUEwQjs7Ozs7Ozs7O0lBQ25CLDBDQUFPOzs7Ozs7OztJQUFkLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Z0JBNUJ0QyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQztvQkFDckssT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxVQUFVLENBQUM7aUJBQ2hHOzs7O2dCQVJRLFVBQVU7Z0JBQUUsUUFBUTtnQkFBRSxlQUFlO2dCQUFhLGVBQWU7Z0JBQUUsaUJBQWlCOztJQWdDN0YsK0JBQUM7Q0FBQSxBQTdCRCxDQU04QyxvQkFBb0IsR0F1QmpFO1NBdkJZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIENvbXBvbmVudCwgS2V5VmFsdWVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRlbnRDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udGVudGNvbnRyb2xiYXNlXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcImlnLWxheW91dC1tYW5hZ2VyXCIsXG4gICAgdGVtcGxhdGU6IFwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlwiLFxuICAgIGlucHV0czogW1wid2lkZ2V0SWRcIiwgXCJvcHRpb25zXCIsIFwiY2hhbmdlRGV0ZWN0aW9uSW50ZXJ2YWxcIiwgXCJkaXNhYmxlZFwiLCBcImNyZWF0ZVwiLCBcImJvcmRlckxheW91dFwiLCBcImdyaWRMYXlvdXRcIiwgXCJoZWlnaHRcIiwgXCJpdGVtQ291bnRcIiwgXCJpdGVtc1wiLCBcImxheW91dE1vZGVcIiwgXCJ3aWR0aFwiXSxcbiAgICBvdXRwdXRzOiBbXCJpbnRlcm5hbFJlc2l6ZWRcIiwgXCJpbnRlcm5hbFJlc2l6aW5nXCIsIFwiaXRlbVJlbmRlcmVkXCIsIFwiaXRlbVJlbmRlcmluZ1wiLCBcInJlbmRlcmVkXCJdXG59KVxuZXhwb3J0IGNsYXNzIElnTGF5b3V0TWFuYWdlckNvbXBvbmVudCBleHRlbmRzIElnQ29udGVudENvbnRyb2xCYXNlPElnTGF5b3V0TWFuYWdlcj4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpOyB9XG5cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIHJlY2FsY3VsYXRpb24gb2YgdGhlIGxheW91dCBkaW1lbnNpb25zLiBMYXlvdXRzIG1heSBub3QgbmVlZCB0byBiZSByZWZsb3dlZCBtYW51YWxseSwgaWYgdGhlaXIgc2l6ZXMgYXJlIGluIHBlcmNlbnRhZ2VzIChpLmUuIHRoZXkgYXJlIHJlc3BvbnNpdmUgYnkgZGVmYXVsdClcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIHRoaXMgY2FuIGJlIHBhcnRpY3VsYXJseSB1c2VmdWwgd2l0aCBhIGdyaWQgbGF5b3V0LCB3aGVuIHRoZSBjb250YWluZXIgaGFzIHBlcmNlbnRhZ2Ugc2l6ZXMsIGJ1dCBpdGVtcyBhcmUgY2FsY3VsYXRlZCBpbiBwaXhlbHMgYW5kIHBvc2l0aW9uZWQgYWJzb2x1dGVseSBpbiB0aGUgY29udGFpbmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvcmNlUmVmbG93IEluZGljYXRlcyB3aGV0aGVyIHRoZSByZWZsb3cgc2hvdWxkIGJlIGZvcmNlZC4gVXNlZnVsIGluIGNhc2VzIHdoZXJlIHRoZSBpdGVtcyBzaXplIGFuZCBwb3NpdGlvbiB3YXMgY2hhbmdlZCBtYW51YWxseS5cbiAgICAgKiBAcGFyYW0gYW5pbWF0aW9uRHVyYXRpb24gVGhlIGFuaW1hdGlvbiBkdXJhdGlvbiB0byBiZSB1c2VkIGZvciB0aGlzIHJlZmxvdyBvbmx5LiBTdXBwb3J0ZWQgb25seSBmb3IgR3JpZCBMYXlvdXQgbW9kZS5cbiAgICAgKiBAcGFyYW0gZXZlbnQgSW5kaWNhdGVzIHRoZSBicm93c2VyIGV2ZW4gd2hpY2ggdHJpZ2dlcmVkIHRoaXMgYWN0aW9uIChub3QgQVBJKS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyByZWZsb3coZm9yY2VSZWZsb3c/OiBib29sZWFuLCBhbmltYXRpb25EdXJhdGlvbj86IG51bWJlciwgZXZlbnQ/OiBPYmplY3QpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSBpcyBwYXJ0IG9mIHRoZSBqUXVlcnkgVUkgd2lkZ2V0IEFQSSBhbmQgZG9lcyB0aGUgZm9sbG93aW5nOlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgMS4gUmVtb3ZlIGN1c3RvbSBDU1MgY2xhc3NlcyB0aGF0IHdlcmUgYWRkZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAyLiBSZW1vdmUgYW55IGVsZW1lbnRzIHRoYXQgd2VyZSBhZGRlZCBhdCB3aWRnZXQncyBpbml0aWFsaXphdGlvbiBhbmQgYWZ0ZXIgdGhhdCwgd2hpY2ggZGlkbid0IGJlbG93IHRvIHRoZSBvcmlnaW5hbCBtYXJrdXBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIDMuIFVuYmluZCBhbGwgZXZlbnRzIHRoYXQgd2VyZSBib3VuZC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19