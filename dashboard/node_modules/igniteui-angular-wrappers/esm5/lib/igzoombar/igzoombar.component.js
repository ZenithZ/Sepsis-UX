/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgZoombarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgZoombarComponent, _super);
    function IgZoombarComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Destroys the Zoombar widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the Zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.destroy = /**
     * Destroys the Zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the main zoombar element
     */
    /* istanbul ignore next */
    /**
     * Returns the main zoombar element
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.widget = /**
     * Returns the main zoombar element
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the ID of the element the zoombar is initialized on
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of the element the zoombar is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.id = /**
     * Returns the ID of the element the zoombar is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the DIV that is the topmost container of the zoombar widget
     */
    /* istanbul ignore next */
    /**
     * Returns the DIV that is the topmost container of the zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.container = /**
     * Returns the DIV that is the topmost container of the zoombar widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the element the clone widget is initialized on
     */
    /* istanbul ignore next */
    /**
     * Returns the element the clone widget is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.clone = /**
     * Returns the element the clone widget is initialized on
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets or sets the current zoom window
     *
     * @param left     The left parameter of the new zoom window in percentages
     * @param width     The width parameter of the new zoom window in percentages
     */
    /* istanbul ignore next */
    /**
     * Gets or sets the current zoom window
     *
     * @param {?=} left     The left parameter of the new zoom window in percentages
     * @param {?=} width     The width parameter of the new zoom window in percentages
     * @return {?}
     */
    /* istanbul ignore next */
    IgZoombarComponent.prototype.zoom = /**
     * Gets or sets the current zoom window
     *
     * @param {?=} left     The left parameter of the new zoom window in percentages
     * @param {?=} width     The width parameter of the new zoom window in percentages
     * @return {?}
     */
    /* istanbul ignore next */
    function (left, width) { return; };
    ;
    IgZoombarComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-zoombar",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "target", "clone", "width", "height", "zoomAction", "zoomWindowMoveDistance", "defaultZoomWindow", "zoomWindowMinWidth", "hoverStyleAnimationDuration", "windowPanDuration", "tabIndex"],
                    outputs: ["zoomChanging", "zoomChanged", "providerCreated", "windowDragStarting", "windowDragStarted", "windowDragging", "windowDragEnding", "windowDragEnded", "windowResizing", "windowResized"]
                }] }
    ];
    /** @nocollapse */
    IgZoombarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgZoombarComponent;
}(IgControlBase));
export { IgZoombarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWd6b29tYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWd6b29tYmFyL2lnem9vbWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0Q7SUFNd0MsOENBQXdCO0lBQzVELDRCQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUMxSCxrQkFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLG9DQUFPOzs7OztJQUFkLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVuQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLG1DQUFNOzs7OztJQUFiLGNBQXdCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVsQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLCtCQUFFOzs7OztJQUFULGNBQXNCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVoQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLHNDQUFTOzs7OztJQUFoQixjQUE4QixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFeEM7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQixrQ0FBSzs7Ozs7SUFBWixjQUEwQixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFcEM7Ozs7O09BS0c7SUFDSCwwQkFBMEI7Ozs7Ozs7OztJQUNuQixpQ0FBSTs7Ozs7Ozs7SUFBWCxVQUFZLElBQWEsRUFBRSxLQUFjLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDOztnQkFoRGxFLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsd0JBQXdCLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsNkJBQTZCLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxDQUFDO29CQUN6USxPQUFPLEVBQUUsQ0FBQyxjQUFjLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLG9CQUFvQixFQUFFLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQztpQkFDck07Ozs7Z0JBUm1CLFVBQVU7Z0JBQUUsUUFBUTtnQkFBRSxlQUFlO2dCQUFFLGVBQWU7Z0JBQUUsaUJBQWlCOztJQW9EN0YseUJBQUM7Q0FBQSxBQWpERCxDQU13QyxhQUFhLEdBMkNwRDtTQTNDWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udHJvbGJhc2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctem9vbWJhclwiLFxuICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICBpbnB1dHM6IFtcIndpZGdldElkXCIsIFwib3B0aW9uc1wiLCBcImNoYW5nZURldGVjdGlvbkludGVydmFsXCIsIFwiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJ0YXJnZXRcIiwgXCJjbG9uZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwiem9vbUFjdGlvblwiLCBcInpvb21XaW5kb3dNb3ZlRGlzdGFuY2VcIiwgXCJkZWZhdWx0Wm9vbVdpbmRvd1wiLCBcInpvb21XaW5kb3dNaW5XaWR0aFwiLCBcImhvdmVyU3R5bGVBbmltYXRpb25EdXJhdGlvblwiLCBcIndpbmRvd1BhbkR1cmF0aW9uXCIsIFwidGFiSW5kZXhcIl0sXG4gICAgb3V0cHV0czogW1wiem9vbUNoYW5naW5nXCIsIFwiem9vbUNoYW5nZWRcIiwgXCJwcm92aWRlckNyZWF0ZWRcIiwgXCJ3aW5kb3dEcmFnU3RhcnRpbmdcIiwgXCJ3aW5kb3dEcmFnU3RhcnRlZFwiLCBcIndpbmRvd0RyYWdnaW5nXCIsIFwid2luZG93RHJhZ0VuZGluZ1wiLCBcIndpbmRvd0RyYWdFbmRlZFwiLCBcIndpbmRvd1Jlc2l6aW5nXCIsIFwid2luZG93UmVzaXplZFwiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ1pvb21iYXJDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnWm9vbWJhcj4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBab29tYmFyIHdpZGdldFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1haW4gem9vbWJhciBlbGVtZW50XG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgd2lkZ2V0KCk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBJRCBvZiB0aGUgZWxlbWVudCB0aGUgem9vbWJhciBpcyBpbml0aWFsaXplZCBvblxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGlkKCk6IHN0cmluZyB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIERJViB0aGF0IGlzIHRoZSB0b3Btb3N0IGNvbnRhaW5lciBvZiB0aGUgem9vbWJhciB3aWRnZXRcbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBjb250YWluZXIoKTogRWxlbWVudCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGVsZW1lbnQgdGhlIGNsb25lIHdpZGdldCBpcyBpbml0aWFsaXplZCBvblxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGNsb25lKCk6IEVsZW1lbnQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGN1cnJlbnQgem9vbSB3aW5kb3dcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsZWZ0ICAgICBUaGUgbGVmdCBwYXJhbWV0ZXIgb2YgdGhlIG5ldyB6b29tIHdpbmRvdyBpbiBwZXJjZW50YWdlc1xuICAgICAqIEBwYXJhbSB3aWR0aCAgICAgVGhlIHdpZHRoIHBhcmFtZXRlciBvZiB0aGUgbmV3IHpvb20gd2luZG93IGluIHBlcmNlbnRhZ2VzXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgem9vbShsZWZ0PzogbnVtYmVyLCB3aWR0aD86IG51bWJlcik6IE9iamVjdCB7IHJldHVybjsgfTtcbn0iXX0=