/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgQRCodeBarcodeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgQRCodeBarcodeComponent, _super);
    function IgQRCodeBarcodeComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgQRCodeBarcodeComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * Returns information about how the barcode is rendered.
     */
    /* istanbul ignore next */
    /**
     * Returns information about how the barcode is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.exportVisualData = /**
     * Returns information about how the barcode is rendered.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
     */
    /* istanbul ignore next */
    /**
     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.flush = /**
     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.destroy = /**
     * Destroys widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    /* istanbul ignore next */
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    IgQRCodeBarcodeComponent.prototype.styleUpdated = /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgQRCodeBarcodeComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-q-r-code-barcode",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "backingBrush", "backingOutline", "backingStrokeThickness", "barBrush", "fontBrush", "font", "data", "errorMessageText", "stretch", "barsFillMode", "widthToHeightRatio", "xDimension", "errorCorrectionLevel", "sizeVersion", "encodingMode", "eciNumber", "eciHeaderDisplayMode", "fnc1Mode", "applicationIndicator"],
                    outputs: ["errorMessageDisplaying", "dataChanged"]
                }] }
    ];
    /** @nocollapse */
    IgQRCodeBarcodeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgQRCodeBarcodeComponent;
}(IgControlBase));
export { IgQRCodeBarcodeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdxcmNvZGViYXJjb2RlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXItd3JhcHBlcnMvIiwic291cmNlcyI6WyJsaWIvaWdxcmNvZGViYXJjb2RlL2lncXJjb2RlYmFyY29kZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0Q7SUFNOEMsb0RBQThCO0lBQ3hFLGtDQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUFJLGtCQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUM7SUFBRSxDQUFDOzs7O0lBQVEseUNBQU07OztJQUFiLGNBQXdCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUV0Tjs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLG1EQUFnQjs7Ozs7SUFBdkIsY0FBb0MsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRTlDOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsd0NBQUs7Ozs7O0lBQVosY0FBdUIsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRWpDOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsMENBQU87Ozs7O0lBQWQsY0FBeUIsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRW5DOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsK0NBQVk7Ozs7O0lBQW5CLGNBQThCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Z0JBL0IzQyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLG9CQUFvQixFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxVQUFVLEVBQUUsc0JBQXNCLENBQUM7b0JBQzNaLE9BQU8sRUFBRSxDQUFDLHdCQUF3QixFQUFFLGFBQWEsQ0FBQztpQkFDckQ7Ozs7Z0JBUm1CLFVBQVU7Z0JBQUUsUUFBUTtnQkFBRSxlQUFlO2dCQUFFLGVBQWU7Z0JBQUUsaUJBQWlCOztJQW1DN0YsK0JBQUM7Q0FBQSxBQWhDRCxDQU04QyxhQUFhLEdBMEIxRDtTQTFCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSWdDb250cm9sQmFzZSB9IGZyb20gXCIuLi9pZ2NvbnRyb2xiYXNlL2lnY29udHJvbGJhc2VcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctcS1yLWNvZGUtYmFyY29kZVwiLFxuICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICBpbnB1dHM6IFtcIndpZGdldElkXCIsIFwib3B0aW9uc1wiLCBcImNoYW5nZURldGVjdGlvbkludGVydmFsXCIsIFwiZGlzYWJsZWRcIiwgXCJjcmVhdGVcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcImJhY2tpbmdCcnVzaFwiLCBcImJhY2tpbmdPdXRsaW5lXCIsIFwiYmFja2luZ1N0cm9rZVRoaWNrbmVzc1wiLCBcImJhckJydXNoXCIsIFwiZm9udEJydXNoXCIsIFwiZm9udFwiLCBcImRhdGFcIiwgXCJlcnJvck1lc3NhZ2VUZXh0XCIsIFwic3RyZXRjaFwiLCBcImJhcnNGaWxsTW9kZVwiLCBcIndpZHRoVG9IZWlnaHRSYXRpb1wiLCBcInhEaW1lbnNpb25cIiwgXCJlcnJvckNvcnJlY3Rpb25MZXZlbFwiLCBcInNpemVWZXJzaW9uXCIsIFwiZW5jb2RpbmdNb2RlXCIsIFwiZWNpTnVtYmVyXCIsIFwiZWNpSGVhZGVyRGlzcGxheU1vZGVcIiwgXCJmbmMxTW9kZVwiLCBcImFwcGxpY2F0aW9uSW5kaWNhdG9yXCJdLFxuICAgIG91dHB1dHM6IFtcImVycm9yTWVzc2FnZURpc3BsYXlpbmdcIiwgXCJkYXRhQ2hhbmdlZFwiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ1FSQ29kZUJhcmNvZGVDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnUVJDb2RlQmFyY29kZT4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpOyB9IHB1YmxpYyBvcHRpb24oKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRoZSBiYXJjb2RlIGlzIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGV4cG9ydFZpc3VhbERhdGEoKTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogQ2F1c2VzIGFsbCBwZW5kaW5nIGNoYW5nZXMgb2YgdGhlIGJhcmNvZGUgZS5nLiBieSBjaGFuZ2VkIHByb3BlcnR5IHZhbHVlcyB0byBiZSByZW5kZXJlZCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBmbHVzaCgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgd2lkZ2V0LlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIFJlLXBvbGxzIHRoZSBjc3Mgc3R5bGVzIGZvciB0aGUgd2lkZ2V0LiBVc2UgdGhpcyBtZXRob2Qgd2hlbiB0aGUgY3NzIHN0eWxlcyBoYXZlIGJlZW4gbW9kaWZpZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgc3R5bGVVcGRhdGVkKCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19