/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer, IterableDiffers, ElementRef, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgMapComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgMapComponent, _super);
    function IgMapComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgMapComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    ;
    Object.defineProperty(IgMapComponent.prototype, "dataSource", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var map = jQuery(this._el).data(this._widgetName);
            if (map) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the ID of parent element holding the map.
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of parent element holding the map.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.id = /**
     * Returns the ID of parent element holding the map.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Exports the map to a PNG image.
     *
     * @param width The width of the image.
     * @param height The height of the image.
     */
    /* istanbul ignore next */
    /**
     * Exports the map to a PNG image.
     *
     * @param {?=} width The width of the image.
     * @param {?=} height The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.exportImage = /**
     * Exports the map to a PNG image.
     *
     * @param {?=} width The width of the image.
     * @param {?=} height The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    function (width, height) { return; };
    ;
    /**
     * Notify the map that styles it draws colors from may have been updated.
     */
    /* istanbul ignore next */
    /**
     * Notify the map that styles it draws colors from may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.styleUpdated = /**
     * Notify the map that styles it draws colors from may have been updated.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Resets the zoom level of the map to default.
     */
    /* istanbul ignore next */
    /**
     * Resets the zoom level of the map to default.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.resetZoom = /**
     * Resets the zoom level of the map to default.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Adds a new item to the data source and notifies the map.
     *
     * @param item     The item that we want to add to the data source.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Adds a new item to the data source and notifies the map.
     *
     * @param {?} item     The item that we want to add to the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.addItem = /**
     * Adds a new item to the data source and notifies the map.
     *
     * @param {?} item     The item that we want to add to the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, targetName) { return; };
    ;
    /**
     * Inserts a new item to the data source and notifies the map.
     *
     * @param item     the new item that we want to insert in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Inserts a new item to the data source and notifies the map.
     *
     * @param {?} item     the new item that we want to insert in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.insertItem = /**
     * Inserts a new item to the data source and notifies the map.
     *
     * @param {?} item     the new item that we want to insert in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, index, targetName) { return; };
    ;
    /**
     * Deletes an item from the data source and notifies the map.
     *
     * @param index     The index in the data source from where the item will be been removed.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Deletes an item from the data source and notifies the map.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.removeItem = /**
     * Deletes an item from the data source and notifies the map.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, targetName) { return; };
    ;
    /**
     * Updates an item in the data source and notifies the map.
     *
     * @param index     The index of the item in the data source that we want to change.
     * @param item     The new item object that will be set in the data source.
     * @param targetName     The name of the series bound to the data source.
     */
    /* istanbul ignore next */
    /**
     * Updates an item in the data source and notifies the map.
     *
     * @param {?} index     The index of the item in the data source that we want to change.
     * @param {?} item     The new item object that will be set in the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.setItem = /**
     * Updates an item in the data source and notifies the map.
     *
     * @param {?} index     The index of the item in the data source that we want to change.
     * @param {?} item     The new item object that will be set in the data source.
     * @param {?} targetName     The name of the series bound to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, item, targetName) { return; };
    ;
    /**
     * Notifies the the map that an item has been set in an associated data source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source that has been changed.
     * @param newItem the new item that has been set in the collection.
     * @param oldItem the old item that has been overwritten in the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the map that an item has been set in an associated data source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source that has been changed.
     * @param {?} newItem the new item that has been set in the collection.
     * @param {?} oldItem the old item that has been overwritten in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifySetItem = /**
     * Notifies the the map that an item has been set in an associated data source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source that has been changed.
     * @param {?} newItem the new item that has been set in the collection.
     * @param {?} oldItem the old item that has been overwritten in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, newItem, oldItem) { return; };
    ;
    /**
     * Notifies the the map that the items have been cleared from an associated data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the map that the items have been cleared from an associated data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyClearItems = /**
     * Notifies the the map that the items have been cleared from an associated data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource) { return; };
    ;
    /**
     * Notifies the the target series that an item has been inserted at the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source where the new item has been inserted.
     * @param newItem the new item that has been set in the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the target series that an item has been inserted at the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source where the new item has been inserted.
     * @param {?} newItem the new item that has been set in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyInsertItem = /**
     * Notifies the the target series that an item has been inserted at the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source where the new item has been inserted.
     * @param {?} newItem the new item that has been set in the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, newItem) { return; };
    ;
    /**
     * Notifies the the target series that an item has been removed from the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source from where the old item has been removed.
     * @param oldItem the old item that has been removed from the collection.
     */
    /* istanbul ignore next */
    /**
     * Notifies the the target series that an item has been removed from the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source from where the old item has been removed.
     * @param {?} oldItem the old item that has been removed from the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyRemoveItem = /**
     * Notifies the the target series that an item has been removed from the specified index in its data source.
     *                 It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param {?} dataSource The data source in which the change happened.
     * @param {?} index The index in the items source from where the old item has been removed.
     * @param {?} oldItem the old item that has been removed from the collection.
     * @return {?}
     */
    /* istanbul ignore next */
    function (dataSource, index, oldItem) { return; };
    ;
    /**
     * Notifies the target series or axis that it should scroll the requested data item into view.
     *
     * @param targetName The name of the series or axis notify.
     * @param item The data item to bring into view, if possible.
     */
    /* istanbul ignore next */
    /**
     * Notifies the target series or axis that it should scroll the requested data item into view.
     *
     * @param {?} targetName The name of the series or axis notify.
     * @param {?} item The data item to bring into view, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.scrollIntoView = /**
     * Notifies the target series or axis that it should scroll the requested data item into view.
     *
     * @param {?} targetName The name of the series or axis notify.
     * @param {?} item The data item to bring into view, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, item) { return; };
    ;
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
     * 				For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
     *
     * @param targetName Either xAxis or yAxis to notify.
     * @param unscaledValue The value in axis space to translate into map space.
     */
    /* istanbul ignore next */
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
     * 				For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} unscaledValue The value in axis space to translate into map space.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.scaleValue = /**
     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
     * 				For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} unscaledValue The value in axis space to translate into map space.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, unscaledValue) { return; };
    ;
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
     * 				For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
     *
     * @param targetName Either xAxis or yAxis to notify.
     * @param scaledValue The value in map space to translate into axis space.
     */
    /* istanbul ignore next */
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
     * 				For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} scaledValue The value in map space to translate into axis space.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.unscaleValue = /**
     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
     * 				For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
     *
     * @param {?} targetName Either xAxis or yAxis to notify.
     * @param {?} scaledValue The value in map space to translate into axis space.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, scaledValue) { return; };
    ;
    /**
     * Manually starts a tiled zoom if one isn't already running.
     */
    /* istanbul ignore next */
    /**
     * Manually starts a tiled zoom if one isn't already running.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.startTiledZoomingIfNecessary = /**
     * Manually starts a tiled zoom if one isn't already running.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Manually ends a tiled zoom if one is running.
     */
    /* istanbul ignore next */
    /**
     * Manually ends a tiled zoom if one is running.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.endTiledZoomingIfRunning = /**
     * Manually ends a tiled zoom if one is running.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
     */
    /* istanbul ignore next */
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.clearTileZoomCache = /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Forces any pending deferred work to render on the map before continuing
     */
    /* istanbul ignore next */
    /**
     * Forces any pending deferred work to render on the map before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.flush = /**
     * Forces any pending deferred work to render on the map before continuing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Exports visual data from the map to aid in unit testing
     */
    /* istanbul ignore next */
    /**
     * Exports visual data from the map to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.exportVisualData = /**
     * Exports visual data from the map to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets the actual minimum value of the target xAxis or yAxis
     *
     * @param targetName
     */
    /* istanbul ignore next */
    /**
     * Gets the actual minimum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getActualMinimumValue = /**
     * Gets the actual minimum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    ;
    /**
     * Gets the actual maximum value of the target xAxis or yAxis
     *
     * @param targetName
     */
    /* istanbul ignore next */
    /**
     * Gets the actual maximum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getActualMaximumValue = /**
     * Gets the actual maximum value of the target xAxis or yAxis
     *
     * @param {?} targetName
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName) { return; };
    ;
    /**
     * Notifies the map that the container was resized
     */
    /* istanbul ignore next */
    /**
     * Notifies the map that the container was resized
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.notifyContainerResized = /**
     * Notifies the map that the container was resized
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
     *
     * @param rect The geographic area rectangle.
     */
    /* istanbul ignore next */
    /**
     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.zoomToGeographic = /**
     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rect) { return; };
    ;
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param rect The geographic area rectangle.
     */
    /* istanbul ignore next */
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getGeographicFromZoom = /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rect) { return; };
    ;
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param rect The geographic area rectangle.
     */
    /* istanbul ignore next */
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.getZoomFromGeographic = /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param {?} rect The geographic area rectangle.
     * @return {?}
     */
    /* istanbul ignore next */
    function (rect) { return; };
    ;
    /**
     * Creates a print preview page with the map, hiding all other elements on the page.
     */
    /* istanbul ignore next */
    /**
     * Creates a print preview page with the map, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.print = /**
     * Creates a print preview page with the map, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param targetName     The name of the series to render.
     * @param animate     Whether the change should be animated, if possible.
     */
    /* istanbul ignore next */
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param {?} targetName     The name of the series to render.
     * @param {?} animate     Whether the change should be animated, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    IgMapComponent.prototype.renderSeries = /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param {?} targetName     The name of the series to render.
     * @param {?} animate     Whether the change should be animated, if possible.
     * @return {?}
     */
    /* istanbul ignore next */
    function (targetName, animate) { return; };
    ;
    IgMapComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-map",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "autoMarginWidth", "autoMarginHeight", "crosshairVisibility", "crosshairPoint", "plotAreaBackground", "defaultInteraction", "dragModifier", "panModifier", "previewRect", "windowRect", "zoomable", "windowScale", "windowResponse", "windowRectMinWidth", "windowPositionHorizontal", "windowPositionVertical", "circleMarkerTemplate", "triangleMarkerTemplate", "pyramidMarkerTemplate", "squareMarkerTemplate", "diamondMarkerTemplate", "pentagonMarkerTemplate", "hexagonMarkerTemplate", "tetragramMarkerTemplate", "pentagramMarkerTemplate", "hexagramMarkerTemplate", "overviewPlusDetailPaneBackgroundImageUri", "useTiledZooming", "preferHigherResolutionTiles", "zoomTileCacheSize", "backgroundContent", "series", "theme"],
                    outputs: ["tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "seriesCursorMouseMove", "seriesMouseLeftButtonDown", "seriesMouseLeftButtonUp", "seriesMouseMove", "seriesMouseEnter", "seriesMouseLeave", "windowRectChanged", "gridAreaRectChanged", "refreshCompleted", "triangulationStatusChanged"]
                }] }
    ];
    /** @nocollapse */
    IgMapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgMapComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgMapComponent;
}(IgControlBase));
export { IgMapComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgMapComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,