/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
import { ElementRef, Renderer, IterableDiffers, Component, KeyValueDiffers, ChangeDetectorRef, Input } from "@angular/core";
var IgPieChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgPieChartComponent, _super);
    function IgPieChartComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgPieChartComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    ;
    Object.defineProperty(IgPieChartComponent.prototype, "dataSource", {
        //public option(): void { return; } ;
        set: 
        //public option(): void { return; } ;
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dataSource = value;
            /** @type {?} */
            var chart = jQuery(this._el).data(this._widgetName);
            if (chart) {
                jQuery(this._el)[this._widgetName]("option", "dataSource", this._dataSource);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    IgPieChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._dataSource === null || this._dataSource === undefined) {
            this._dataSource = this.options["dataSource"];
        }
        if (!this.options["dataSource"] && this._dataSource) {
            this.options["dataSource"] = this._dataSource;
        }
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param item     the new item that will be added to the data source.
     */
    /* istanbul ignore next */
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be added to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.addItem = /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be added to the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item) { return; };
    ;
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param item     the new item that will be inserted in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     */
    /* istanbul ignore next */
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be inserted in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.insertItem = /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param {?} item     the new item that will be inserted in the data source.
     * @param {?} index     The index in the data source where the new item will be inserted.
     * @return {?}
     */
    /* istanbul ignore next */
    function (item, index) { return; };
    ;
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param index     The index in the data source from where the item will be been removed.
     */
    /* istanbul ignore next */
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.removeItem = /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source from where the item will be been removed.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index) { return; };
    ;
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param index     The index in the data source that we want to change.
     * @param item     the new item that we want to set in the data source.
     */
    /* istanbul ignore next */
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source that we want to change.
     * @param {?} item     the new item that we want to set in the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.setItem = /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param {?} index     The index in the data source that we want to change.
     * @param {?} item     the new item that we want to set in the data source.
     * @return {?}
     */
    /* istanbul ignore next */
    function (index, item) { return; };
    ;
    /**
     * Exports the chart to a PNG image.
     *
     * @param width     The width of the image.
     * @param height     The height of the image.
     */
    /* istanbul ignore next */
    /**
     * Exports the chart to a PNG image.
     *
     * @param {?=} width     The width of the image.
     * @param {?=} height     The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.exportImage = /**
     * Exports the chart to a PNG image.
     *
     * @param {?=} width     The width of the image.
     * @param {?=} height     The height of the image.
     * @return {?}
     */
    /* istanbul ignore next */
    function (width, height) { return; };
    ;
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the ID of parent element holding the chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the ID of parent element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.id = /**
     * Returns the ID of parent element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Returns the element holding the chart.
     */
    /* istanbul ignore next */
    /**
     * Returns the element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.widget = /**
     * Returns the element holding the chart.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     */
    /* istanbul ignore next */
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.print = /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Exports visual data from the pie chart to aid in unit testing
     */
    /* istanbul ignore next */
    /**
     * Exports visual data from the pie chart to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    IgPieChartComponent.prototype.exportVisualData = /**
     * Exports visual data from the pie chart to aid in unit testing
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgPieChartComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-pie-chart",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "width", "height", "dataSource", "dataSourceUrl", "dataSourceType", "responseDataKey", "valueMemberPath", "labelMemberPath", "dataValue", "dataLabel", "labelsPosition", "labelOuterColor", "labelInnerColor", "selectionMode", "selectedItem", "selectedItems", "leaderLineVisibility", "leaderLineType", "leaderLineMargin", "othersCategoryThreshold", "formatLabel", "othersCategoryStyle", "othersCategoryType", "othersCategoryText", "explodedRadius", "radiusFactor", "allowSliceSelection", "allowSliceExplosion", "explodedSlices", "selectedSlices", "showTooltip", "tooltipTemplate", "legend", "labelExtent", "startAngle", "sweepDirection", "selectedStyle", "brushes", "outlines", "legendItemTemplate", "legendItemBadgeTemplate", "textStyle", "theme"],
                    outputs: ["tooltipShowing", "tooltipShown", "tooltipHiding", "tooltipHidden", "browserNotSupported", "sliceClick", "labelClick", "selectedItemChanging", "selectedItemChanged", "selectedItemsChanging", "selectedItemsChanged"]
                }] }
    ];
    /** @nocollapse */
    IgPieChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    IgPieChartComponent.propDecorators = {
        dataSource: [{ type: Input }]
    };
    return IgPieChartComponent;
}(IgControlBase));
export { IgPieChartComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgPieChartComponent.prototype._dataSource;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,