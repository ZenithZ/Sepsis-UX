/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgNotifierComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgNotifierComponent, _super);
    function IgNotifierComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * @return {?}
     */
    IgNotifierComponent.prototype.option = /**
     * @return {?}
     */
    function () { return; };
    ;
    /**
     * @return {?}
     */
    IgNotifierComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elem = jQuery(document).find("#" + this.widgetId);
        if (elem.length === 1) {
            this._el = elem;
            this._events = new Map();
            //events binding
            /** @type {?} */
            var that_1 = this;
            /** @type {?} */
            var evtName;
            for (var propt in jQuery.ui[this._widgetName].prototype.events) {
                evtName = this._widgetName.toLowerCase() + propt.toLowerCase();
                this._events[evtName] = propt;
                jQuery(this._el).on(evtName, (/**
                 * @param {?} evt
                 * @param {?} ui
                 * @return {?}
                 */
                function (evt, ui) {
                    that_1[that_1._events[evt.type]].emit({ event: evt, ui: ui });
                }));
            }
            jQuery(this._el)[this._widgetName](this.options);
        }
        else {
            _super.prototype.ngOnInit.call(this);
        }
    };
    /**
     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
     *
     * @param state    The state to show notification for.
     * @param message    Optional message to show, overrides defaults.
     */
    /* istanbul ignore next */
    /**
     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
     *
     * @param {?} state    The state to show notification for.
     * @param {?=} message    Optional message to show, overrides defaults.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNotifierComponent.prototype.notify = /**
     * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
     *
     * @param {?} state    The state to show notification for.
     * @param {?=} message    Optional message to show, overrides defaults.
     * @return {?}
     */
    /* istanbul ignore next */
    function (state, message) { return; };
    ;
    /**
     * Returns true if the notification is currently visible
     */
    /* istanbul ignore next */
    /**
     * Returns true if the notification is currently visible
     * @return {?}
     */
    /* istanbul ignore next */
    IgNotifierComponent.prototype.isVisible = /**
     * Returns true if the notification is currently visible
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys the widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgNotifierComponent.prototype.destroy = /**
     * Destroys the widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgNotifierComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-notifier",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "closeOnBlur", "direction", "position", "width", "height", "minWidth", "maxWidth", "maxHeight", "animationDuration", "contentTemplate", "selectors", "headerTemplate", "showOn", "containment", "appendTo", "state", "notifyLevel", "mode", "allowCSSOnTarget", "messages", "showIcon", "animationSlideDistance"],
                    outputs: ["showing", "shown", "hiding", "hidden"]
                }] }
    ];
    /** @nocollapse */
    IgNotifierComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgNotifierComponent;
}(IgControlBase));
export { IgNotifierComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdub3RpZmllci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLXdyYXBwZXJzLyIsInNvdXJjZXMiOlsibGliL2lnbm90aWZpZXIvaWdub3RpZmllci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFJL0Q7SUFPeUMsK0NBQXlCO0lBQzlELDZCQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUFJLGtCQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUM7SUFBRSxDQUFDOzs7O0lBQVEsb0NBQU07OztJQUFiLGNBQXdCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7OztJQUd0TixzQ0FBUTs7O0lBQVI7O1lBQ1EsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDckQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDOzs7Z0JBRXJDLE1BQUksR0FBRyxJQUFJOztnQkFDWCxPQUFPO1lBQ1gsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUM1RCxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPOzs7OztnQkFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFO29CQUMxQyxNQUFJLENBQUMsTUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUM5RCxDQUFDLEVBQUMsQ0FBQzthQUNOO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztTQUNwQjtJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILDBCQUEwQjs7Ozs7Ozs7O0lBQ25CLG9DQUFNOzs7Ozs7OztJQUFiLFVBQWMsS0FBYSxFQUFFLE9BQWdCLElBQVUsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRWpFOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsdUNBQVM7Ozs7O0lBQWhCLGNBQTJCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUVyQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLHFDQUFPOzs7OztJQUFkLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQzs7Z0JBcER0QyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLHdCQUF3QixDQUFDO29CQUNsWSxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7aUJBQ3BEOzs7O2dCQVZtQixVQUFVO2dCQUFFLFFBQVE7Z0JBQUUsZUFBZTtnQkFBRSxlQUFlO2dCQUFFLGlCQUFpQjs7SUEwRDdGLDBCQUFDO0NBQUEsQUFyREQsQ0FPeUMsYUFBYSxHQThDckQ7U0E5Q1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlciwgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcnMsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IElnQ29udHJvbEJhc2UgfSBmcm9tIFwiLi4vaWdjb250cm9sYmFzZS9pZ2NvbnRyb2xiYXNlXCI7XG5cbmRlY2xhcmUgdmFyIGpRdWVyeTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiaWctbm90aWZpZXJcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLCBcImRpc2FibGVkXCIsIFwiY3JlYXRlXCIsIFwiY2xvc2VPbkJsdXJcIiwgXCJkaXJlY3Rpb25cIiwgXCJwb3NpdGlvblwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwibWluV2lkdGhcIiwgXCJtYXhXaWR0aFwiLCBcIm1heEhlaWdodFwiLCBcImFuaW1hdGlvbkR1cmF0aW9uXCIsIFwiY29udGVudFRlbXBsYXRlXCIsIFwic2VsZWN0b3JzXCIsIFwiaGVhZGVyVGVtcGxhdGVcIiwgXCJzaG93T25cIiwgXCJjb250YWlubWVudFwiLCBcImFwcGVuZFRvXCIsIFwic3RhdGVcIiwgXCJub3RpZnlMZXZlbFwiLCBcIm1vZGVcIiwgXCJhbGxvd0NTU09uVGFyZ2V0XCIsIFwibWVzc2FnZXNcIiwgXCJzaG93SWNvblwiLCBcImFuaW1hdGlvblNsaWRlRGlzdGFuY2VcIl0sXG4gICAgb3V0cHV0czogW1wic2hvd2luZ1wiLCBcInNob3duXCIsIFwiaGlkaW5nXCIsIFwiaGlkZGVuXCJdXG59KVxuLy9UT0RPOiBjaGFuZ2UgdGhlIG1vZGVsIGZyb20gYW55IHRvIElnTm90aWZpZXIgd2hlbiBhZGRlZCB0byBpZ25pdGV1aSB0eXBlc2NyaXB0IGRlZmluaXRpb25zXG5leHBvcnQgY2xhc3MgSWdOb3RpZmllckNvbXBvbmVudCBleHRlbmRzIElnQ29udHJvbEJhc2U8SWdOb3RpZmllcj4ge1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBzdXBlcihlbCwgcmVuZGVyZXIsIGRpZmZlcnMsIGt2YWxEaWZmZXJzLCBjZHIpOyB9IHB1YmxpYyBvcHRpb24oKTogdm9pZCB7IHJldHVybjsgfTtcblxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHZhciBlbGVtID0galF1ZXJ5KGRvY3VtZW50KS5maW5kKFwiI1wiICsgdGhpcy53aWRnZXRJZCk7XG4gICAgICAgIGlmIChlbGVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5fZWwgPSBlbGVtO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgICAgICAgICAgIC8vZXZlbnRzIGJpbmRpbmdcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBldnROYW1lO1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcHQgaW4galF1ZXJ5LnVpW3RoaXMuX3dpZGdldE5hbWVdLnByb3RvdHlwZS5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICBldnROYW1lID0gdGhpcy5fd2lkZ2V0TmFtZS50b0xvd2VyQ2FzZSgpICsgcHJvcHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZ0TmFtZV0gPSBwcm9wdDtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGhpcy5fZWwpLm9uKGV2dE5hbWUsIGZ1bmN0aW9uIChldnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXRbdGhhdC5fZXZlbnRzW2V2dC50eXBlXV0uZW1pdCh7IGV2ZW50OiBldnQsIHVpOiB1aSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgalF1ZXJ5KHRoaXMuX2VsKVt0aGlzLl93aWRnZXROYW1lXSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIGEgbm90aWZpY2F0aW9uIHdpdGggYSBjZXJ0YWluIHN0YXRlIGFuZCBvcHRpb25hbCBtZXNzYWdlLiBUaGUgW25vdGlmeUxldmVsXSh1aS5pZ25vdGlmaWVyI29wdGlvbnM6bm90aWZ5TGV2ZWwpIG9wdGlvbiBkZXRlcm1pbmVzIGlmIHRoZSBub3RpZmljYXRpb24gd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhdGUgICAgVGhlIHN0YXRlIHRvIHNob3cgbm90aWZpY2F0aW9uIGZvci5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAgICBPcHRpb25hbCBtZXNzYWdlIHRvIHNob3csIG92ZXJyaWRlcyBkZWZhdWx0cy5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBub3RpZnkoc3RhdGU6IE9iamVjdCwgbWVzc2FnZT86IHN0cmluZyk6IHZvaWQgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG5vdGlmaWNhdGlvbiBpcyBjdXJyZW50bHkgdmlzaWJsZVxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGlzVmlzaWJsZSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHdpZGdldC5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQgeyByZXR1cm47IH07XG59Il19