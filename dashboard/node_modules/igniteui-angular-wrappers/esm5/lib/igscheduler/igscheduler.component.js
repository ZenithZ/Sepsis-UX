/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgSchedulerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgSchedulerComponent, _super);
    function IgSchedulerComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Gets reference to appointment by id
     *
     * @param id
     */
    /* istanbul ignore next */
    /**
     * Gets reference to appointment by id
     *
     * @param {?} id
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.getAppointmentById = /**
     * Gets reference to appointment by id
     *
     * @param {?} id
     * @return {?}
     */
    /* istanbul ignore next */
    function (id) { return; };
    ;
    /**
     * Creates a new appointment and renders it to the scheduler
     *
     * @param appointment
     */
    /* istanbul ignore next */
    /**
     * Creates a new appointment and renders it to the scheduler
     *
     * @param {?} appointment
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.createAppointment = /**
     * Creates a new appointment and renders it to the scheduler
     *
     * @param {?} appointment
     * @return {?}
     */
    /* istanbul ignore next */
    function (appointment) { return; };
    ;
    /**
     * Deletes appointment from the appointment collection
     *
     * @param appointment	appointment
     */
    /* istanbul ignore next */
    /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.deleteAppointment = /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @return {?}
     */
    /* istanbul ignore next */
    function (appointment) { return; };
    ;
    /**
     * Deletes appointment from the appointment collection
     *
     * @param appointment	appointment
     * @param updateAppoinment	updateAppoinment
     */
    /* istanbul ignore next */
    /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @param {?} updateAppoinment 	updateAppoinment
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.editAppointment = /**
     * Deletes appointment from the appointment collection
     *
     * @param {?} appointment 	appointment
     * @param {?} updateAppoinment 	updateAppoinment
     * @return {?}
     */
    /* istanbul ignore next */
    function (appointment, updateAppoinment) { return; };
    ;
    /**
     * Destroys the widget
     */
    /* istanbul ignore next */
    /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.destroy = /**
     * Destroys the widget
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets reference to the today UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the today UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.todayButton = /**
     * Gets reference to the today UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets reference to the previous UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the previous UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.previousButton = /**
     * Gets reference to the previous UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets reference to the date range UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the date range UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.dateRangeButton = /**
     * Gets reference to the date range UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets reference to the next UI button.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the next UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.nextButton = /**
     * Gets reference to the next UI button.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets reference to the jQuery calendar UI control.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to the jQuery calendar UI control.
     * @return {?}
     */
    /* istanbul ignore next */
    IgSchedulerComponent.prototype.getCalendar = /**
     * Gets reference to the jQuery calendar UI control.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgSchedulerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-scheduler",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "views", "viewMode", "selectedDate", "enableTodayButton", "width", "height", "agendaViewSettings", "monthViewSettings", "appointmentDialogSuppress"],
                    outputs: ["agendaRangeChanging", "agendaRangeChanged", "daySelected", "monthChanging", "monthChanged", "rendering", "rendered", "viewChanging", "viewChanged", "appointmentDialogOpening", "appointmentDialogOpened", "appointmentDialogClosing", "appointmentDialogClosed", "appointmentCreating", "appointmentCreated", "appointmentDeleting", "appointmentDeleted", "appointmentEditing", "appointmentEdited"]
                }] }
    ];
    /** @nocollapse */
    IgSchedulerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgSchedulerComponent;
}(IgControlBase));
export { IgSchedulerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdzY2hlZHVsZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ3NjaGVkdWxlci9pZ3NjaGVkdWxlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0Q7SUFNMEMsZ0RBQTBCO0lBQ2hFLDhCQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUMxSCxrQkFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQixpREFBa0I7Ozs7Ozs7SUFBekIsVUFBMEIsRUFBVSxJQUFZLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUUxRDs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQixnREFBaUI7Ozs7Ozs7SUFBeEIsVUFBeUIsV0FBbUIsSUFBWSxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFbEU7Ozs7T0FJRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIsZ0RBQWlCOzs7Ozs7O0lBQXhCLFVBQXlCLFdBQW1CLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRWxFOzs7OztPQUtHO0lBQ0gsMEJBQTBCOzs7Ozs7Ozs7SUFDbkIsOENBQWU7Ozs7Ozs7O0lBQXRCLFVBQXVCLFdBQW1CLEVBQUUsZ0JBQXdCLElBQVksT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRTFGOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsc0NBQU87Ozs7O0lBQWQsY0FBeUIsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRW5DOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIsMENBQVc7Ozs7O0lBQWxCLGNBQStCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUV6Qzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLDZDQUFjOzs7OztJQUFyQixjQUFrQyxPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7SUFFNUM7O09BRUc7SUFDSCwwQkFBMEI7Ozs7OztJQUNuQiw4Q0FBZTs7Ozs7SUFBdEIsY0FBbUMsT0FBTyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBRTdDOztPQUVHO0lBQ0gsMEJBQTBCOzs7Ozs7SUFDbkIseUNBQVU7Ozs7O0lBQWpCLGNBQThCLE9BQU8sQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUV4Qzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLDBDQUFXOzs7OztJQUFsQixjQUErQixPQUFPLENBQUMsQ0FBQztJQUFBLENBQUM7O2dCQTlFNUMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxNQUFNLEVBQUMsQ0FBQyxVQUFVLEVBQUMsU0FBUyxFQUFDLHlCQUF5QixFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLFVBQVUsRUFBQyxjQUFjLEVBQUMsbUJBQW1CLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxvQkFBb0IsRUFBQyxtQkFBbUIsRUFBQywyQkFBMkIsQ0FBQztvQkFDdk4sT0FBTyxFQUFDLENBQUMscUJBQXFCLEVBQUMsb0JBQW9CLEVBQUMsYUFBYSxFQUFDLGVBQWUsRUFBQyxjQUFjLEVBQUMsV0FBVyxFQUFDLFVBQVUsRUFBQyxjQUFjLEVBQUMsYUFBYSxFQUFDLDBCQUEwQixFQUFDLHlCQUF5QixFQUFDLDBCQUEwQixFQUFDLHlCQUF5QixFQUFDLHFCQUFxQixFQUFDLG9CQUFvQixFQUFDLHFCQUFxQixFQUFDLG9CQUFvQixFQUFDLG9CQUFvQixFQUFDLG1CQUFtQixDQUFDO2lCQUNqWTs7OztnQkFSbUIsVUFBVTtnQkFBRSxRQUFRO2dCQUFFLGVBQWU7Z0JBQUUsZUFBZTtnQkFBRSxpQkFBaUI7O0lBa0Y3RiwyQkFBQztDQUFBLEFBL0VELENBTTBDLGFBQWEsR0F5RXREO1NBekVZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgUmVuZGVyZXIsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJpZy1zY2hlZHVsZXJcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOltcIndpZGdldElkXCIsXCJvcHRpb25zXCIsXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLFwiZGlzYWJsZWRcIixcImNyZWF0ZVwiLFwidmlld3NcIixcInZpZXdNb2RlXCIsXCJzZWxlY3RlZERhdGVcIixcImVuYWJsZVRvZGF5QnV0dG9uXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCIsXCJhZ2VuZGFWaWV3U2V0dGluZ3NcIixcIm1vbnRoVmlld1NldHRpbmdzXCIsXCJhcHBvaW50bWVudERpYWxvZ1N1cHByZXNzXCJdLFxuICAgIG91dHB1dHM6W1wiYWdlbmRhUmFuZ2VDaGFuZ2luZ1wiLFwiYWdlbmRhUmFuZ2VDaGFuZ2VkXCIsXCJkYXlTZWxlY3RlZFwiLFwibW9udGhDaGFuZ2luZ1wiLFwibW9udGhDaGFuZ2VkXCIsXCJyZW5kZXJpbmdcIixcInJlbmRlcmVkXCIsXCJ2aWV3Q2hhbmdpbmdcIixcInZpZXdDaGFuZ2VkXCIsXCJhcHBvaW50bWVudERpYWxvZ09wZW5pbmdcIixcImFwcG9pbnRtZW50RGlhbG9nT3BlbmVkXCIsXCJhcHBvaW50bWVudERpYWxvZ0Nsb3NpbmdcIixcImFwcG9pbnRtZW50RGlhbG9nQ2xvc2VkXCIsXCJhcHBvaW50bWVudENyZWF0aW5nXCIsXCJhcHBvaW50bWVudENyZWF0ZWRcIixcImFwcG9pbnRtZW50RGVsZXRpbmdcIixcImFwcG9pbnRtZW50RGVsZXRlZFwiLFwiYXBwb2ludG1lbnRFZGl0aW5nXCIsXCJhcHBvaW50bWVudEVkaXRlZFwiXVxufSlcbmV4cG9ydCBjbGFzcyBJZ1NjaGVkdWxlckNvbXBvbmVudCBleHRlbmRzIElnQ29udHJvbEJhc2U8SWdTY2hlZHVsZXI+IHtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGt2YWxEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgXG4gICAgICAgIHN1cGVyKGVsLCByZW5kZXJlciwgZGlmZmVycywga3ZhbERpZmZlcnMsIGNkcik7XG4gICAgfVx0XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHJlZmVyZW5jZSB0byBhcHBvaW50bWVudCBieSBpZFxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldEFwcG9pbnRtZW50QnlJZChpZDogT2JqZWN0KTogT2JqZWN0IHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcHBvaW50bWVudCBhbmQgcmVuZGVycyBpdCB0byB0aGUgc2NoZWR1bGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXBwb2ludG1lbnQgXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgY3JlYXRlQXBwb2ludG1lbnQoYXBwb2ludG1lbnQ6IE9iamVjdCk6IE9iamVjdCB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYXBwb2ludG1lbnQgZnJvbSB0aGUgYXBwb2ludG1lbnQgY29sbGVjdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcG9pbnRtZW50XHRhcHBvaW50bWVudFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGRlbGV0ZUFwcG9pbnRtZW50KGFwcG9pbnRtZW50OiBPYmplY3QpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGFwcG9pbnRtZW50IGZyb20gdGhlIGFwcG9pbnRtZW50IGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHBvaW50bWVudFx0YXBwb2ludG1lbnRcbiAgICAgKiBAcGFyYW0gdXBkYXRlQXBwb2lubWVudFx0dXBkYXRlQXBwb2lubWVudFxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGVkaXRBcHBvaW50bWVudChhcHBvaW50bWVudDogT2JqZWN0LCB1cGRhdGVBcHBvaW5tZW50OiBPYmplY3QpOiBPYmplY3QgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgd2lkZ2V0XG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyByZWZlcmVuY2UgdG8gdGhlIHRvZGF5IFVJIGJ1dHRvbi5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB0b2RheUJ1dHRvbigpOiBzdHJpbmcgeyByZXR1cm47IH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHJlZmVyZW5jZSB0byB0aGUgcHJldmlvdXMgVUkgYnV0dG9uLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHByZXZpb3VzQnV0dG9uKCk6IHN0cmluZyB7IHJldHVybjsgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgcmVmZXJlbmNlIHRvIHRoZSBkYXRlIHJhbmdlIFVJIGJ1dHRvbi5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyBkYXRlUmFuZ2VCdXR0b24oKTogc3RyaW5nIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyByZWZlcmVuY2UgdG8gdGhlIG5leHQgVUkgYnV0dG9uLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIG5leHRCdXR0b24oKTogc3RyaW5nIHsgcmV0dXJuOyB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyByZWZlcmVuY2UgdG8gdGhlIGpRdWVyeSBjYWxlbmRhciBVSSBjb250cm9sLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGdldENhbGVuZGFyKCk6IHN0cmluZyB7IHJldHVybjsgfTtcbn0iXX0=