/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
var IgRatingComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgRatingComponent, _super);
    function IgRatingComponent(el, renderer, differs, kvalDiffers, cdr) {
        return _super.call(this, el, renderer, differs, kvalDiffers, cdr) || this;
    }
    /**
     * Gets reference to [igValidator](ui.igvalidator) used by igRating.
     *
     * @param destroy     Request to destroy validator.
     */
    /* istanbul ignore next */
    /**
     * Gets reference to [igValidator](ui.igvalidator) used by igRating.
     *
     * @param {?=} destroy     Request to destroy validator.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.validator = /**
     * Gets reference to [igValidator](ui.igvalidator) used by igRating.
     *
     * @param {?=} destroy     Request to destroy validator.
     * @return {?}
     */
    /* istanbul ignore next */
    function (destroy) { return; };
    ;
    /**
     * Triggers validation.
     */
    /* istanbul ignore next */
    /**
     * Triggers validation.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.validate = /**
     * Triggers validation.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Gets/Sets (selected) value.
     *
     * @param val     New value which is rendered with selected css.
     * @return number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets (selected) value.
     *
     * @param {?} val     New value which is rendered with selected css.
     * @return {?} number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.value = /**
     * Gets/Sets (selected) value.
     *
     * @param {?} val     New value which is rendered with selected css.
     * @return {?} number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    function (val) { return; };
    ;
    /**
     * Gets/Sets hover value.
     *
     * @param val     New value which will be rendered with hover css when rating gets mouse.
     * @return number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    /**
     * Gets/Sets hover value.
     *
     * @param {?=} val     New value which will be rendered with hover css when rating gets mouse.
     * @return {?} number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.valueHover = /**
     * Gets/Sets hover value.
     *
     * @param {?=} val     New value which will be rendered with hover css when rating gets mouse.
     * @return {?} number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     */
    /* istanbul ignore next */
    function (val) { return; };
    ;
    /**
     * Checks if igRating has focus.
     */
    /* istanbul ignore next */
    /**
     * Checks if igRating has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.hasFocus = /**
     * Checks if igRating has focus.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     */
    /* istanbul ignore next */
    /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.focus = /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    /**
     * Destroys igRating widget.
     */
    /* istanbul ignore next */
    /**
     * Destroys igRating widget.
     * @return {?}
     */
    /* istanbul ignore next */
    IgRatingComponent.prototype.destroy = /**
     * Destroys igRating widget.
     * @return {?}
     */
    /* istanbul ignore next */
    function () { return; };
    ;
    IgRatingComponent.decorators = [
        { type: Component, args: [{
                    selector: "ig-rating",
                    template: "<ng-content></ng-content>",
                    inputs: ["widgetId", "options", "changeDetectionInterval", "disabled", "create", "vertical", "value", "valueHover", "voteCount", "voteWidth", "voteHeight", "swapDirection", "valueAsPercent", "focusable", "precision", "precisionZeroVote", "roundedDecimalPlaces", "theme", "validatorOptions", "cssVotes"],
                    outputs: ["hoverChange", "valueChange"]
                }] }
    ];
    /** @nocollapse */
    IgRatingComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: IterableDiffers },
        { type: KeyValueDiffers },
        { type: ChangeDetectorRef }
    ]; };
    return IgRatingComponent;
}(IgControlBase));
export { IgRatingComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWdyYXRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci13cmFwcGVycy8iLCJzb3VyY2VzIjpbImxpYi9pZ3JhdGluZy9pZ3JhdGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0Q7SUFNdUMsNkNBQXVCO0lBQzFELDJCQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFFLE9BQXdCLEVBQUUsV0FBNEIsRUFBRSxHQUFzQjtlQUMxSCxrQkFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQixxQ0FBUzs7Ozs7OztJQUFoQixVQUFpQixPQUFpQixJQUFZLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUV6RDs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLG9DQUFROzs7OztJQUFmLGNBQTZCLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUV4Qzs7Ozs7T0FLRztJQUNILDBCQUEwQjs7Ozs7Ozs7SUFDbkIsaUNBQUs7Ozs7Ozs7SUFBWixVQUFhLEdBQVcsSUFBbUIsT0FBTyxDQUFDLENBQUM7SUFBQyxDQUFDO0lBRXREOzs7OztPQUtHO0lBQ0gsMEJBQTBCOzs7Ozs7OztJQUNuQixzQ0FBVTs7Ozs7OztJQUFqQixVQUFrQixHQUFZLElBQW1CLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUU1RDs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLG9DQUFROzs7OztJQUFmLGNBQTZCLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUV4Qzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLGlDQUFLOzs7OztJQUFaLGNBQXlCLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUVwQzs7T0FFRztJQUNILDBCQUEwQjs7Ozs7O0lBQ25CLG1DQUFPOzs7OztJQUFkLGNBQTJCLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQzs7Z0JBM0R6QyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsT0FBTyxFQUFDLFlBQVksRUFBQyxXQUFXLEVBQUMsV0FBVyxFQUFDLFlBQVksRUFBQyxlQUFlLEVBQUMsZ0JBQWdCLEVBQUMsV0FBVyxFQUFDLFdBQVcsRUFBQyxtQkFBbUIsRUFBQyxzQkFBc0IsRUFBQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsVUFBVSxDQUFDO29CQUM3UixPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUMsYUFBYSxDQUFDO2lCQUN6Qzs7OztnQkFSbUIsVUFBVTtnQkFBRSxRQUFRO2dCQUFFLGVBQWU7Z0JBQUUsZUFBZTtnQkFBRSxpQkFBaUI7O0lBK0Q3Rix3QkFBQztDQUFBLEFBNURELENBTXVDLGFBQWEsR0FzRG5EO1NBdERZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgUmVuZGVyZXIsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJZ0NvbnRyb2xCYXNlIH0gZnJvbSBcIi4uL2lnY29udHJvbGJhc2UvaWdjb250cm9sYmFzZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJpZy1yYXRpbmdcIixcbiAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgaW5wdXRzOiBbXCJ3aWRnZXRJZFwiLCBcIm9wdGlvbnNcIiwgXCJjaGFuZ2VEZXRlY3Rpb25JbnRlcnZhbFwiLFwiZGlzYWJsZWRcIixcImNyZWF0ZVwiLFwidmVydGljYWxcIixcInZhbHVlXCIsXCJ2YWx1ZUhvdmVyXCIsXCJ2b3RlQ291bnRcIixcInZvdGVXaWR0aFwiLFwidm90ZUhlaWdodFwiLFwic3dhcERpcmVjdGlvblwiLFwidmFsdWVBc1BlcmNlbnRcIixcImZvY3VzYWJsZVwiLFwicHJlY2lzaW9uXCIsXCJwcmVjaXNpb25aZXJvVm90ZVwiLFwicm91bmRlZERlY2ltYWxQbGFjZXNcIixcInRoZW1lXCIsXCJ2YWxpZGF0b3JPcHRpb25zXCIsXCJjc3NWb3Rlc1wiXSxcbiAgICBvdXRwdXRzOiBbXCJob3ZlckNoYW5nZVwiLFwidmFsdWVDaGFuZ2VcIl1cbn0pXG5leHBvcnQgY2xhc3MgSWdSYXRpbmdDb21wb25lbnQgZXh0ZW5kcyBJZ0NvbnRyb2xCYXNlPElnUmF0aW5nPiB7IFxuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga3ZhbERpZmZlcnM6IEtleVZhbHVlRGlmZmVycywgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyBcbiAgICAgICAgc3VwZXIoZWwsIHJlbmRlcmVyLCBkaWZmZXJzLCBrdmFsRGlmZmVycywgY2RyKTtcbiAgICB9XHRcblxuICAgIC8qKlxuICAgICAqIEdldHMgcmVmZXJlbmNlIHRvIFtpZ1ZhbGlkYXRvcl0odWkuaWd2YWxpZGF0b3IpIHVzZWQgYnkgaWdSYXRpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVzdHJveSAgICAgUmVxdWVzdCB0byBkZXN0cm95IHZhbGlkYXRvci5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB2YWxpZGF0b3IoZGVzdHJveT86IGJvb2xlYW4pOiBPYmplY3QgeyByZXR1cm47IH0gO1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdmFsaWRhdGlvbi5cbiAgICAgKi9cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHB1YmxpYyB2YWxpZGF0ZSgpOiBib29sZWFuIHsgcmV0dXJuOyB9IDtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyAoc2VsZWN0ZWQpIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbCAgICAgTmV3IHZhbHVlIHdoaWNoIGlzIHJlbmRlcmVkIHdpdGggc2VsZWN0ZWQgY3NzLlxuICAgICAqIEByZXR1cm4gbnVtYmVyfG9iamVjdCAgICAgSWYgcGFyYW1ldGVyIGlzIG5vdCAnbnVtYmVyJywgdGhlbiBleGFjdCB2YWx1ZSByZW5kZXJlZCB3aXRoIHNlbGVjdGVkIGNzcyBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlLCByZWZlcmVuY2UgdG8gaWdSYXRpbmcgaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgdmFsdWUodmFsOiBudW1iZXIpOiBudW1iZXJ8T2JqZWN0IHsgcmV0dXJuOyB9IDtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyBob3ZlciB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWwgICAgIE5ldyB2YWx1ZSB3aGljaCB3aWxsIGJlIHJlbmRlcmVkIHdpdGggaG92ZXIgY3NzIHdoZW4gcmF0aW5nIGdldHMgbW91c2UuXG4gICAgICogQHJldHVybiBudW1iZXJ8b2JqZWN0ICAgICBJZiBwYXJhbWV0ZXIgaXMgbm90IFwibnVtYmVyXCIsIHRoZW4gbGFzdCB2YWx1ZSB3aGljaCB3YXMgcmVuZGVyZWQgd2l0aCBob3ZlciBjc3MgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSwgcmVmZXJlbmNlIHRvIGlnUmF0aW5nIGlzIHJldHVybmVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIHZhbHVlSG92ZXIodmFsPzogbnVtYmVyKTogbnVtYmVyfE9iamVjdCB7IHJldHVybjsgfSA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgaWdSYXRpbmcgaGFzIGZvY3VzLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGhhc0ZvY3VzKCk6IGJvb2xlYW4geyByZXR1cm47IH0gO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyBmb2N1cyB0byBpZ1JhdGluZy4gVGhhdCBoYXMgZWZmZWN0IG9ubHkgd2hlbiBvcHRpb25zLmZvY3VzYWJsZSBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcHVibGljIGZvY3VzKCk6IE9iamVjdCB7IHJldHVybjsgfSA7XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBpZ1JhdGluZyB3aWRnZXQuXG4gICAgICovXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpOiBPYmplY3QgeyByZXR1cm47IH0gO1xufSJdfQ==