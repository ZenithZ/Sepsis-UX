/// <reference types="ignite-ui" />
import { ElementRef, Renderer, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgEditorBase } from "./igeditorbase";
import { NgModel } from "@angular/forms";
export declare class IgCheckboxEditorComponent extends IgEditorBase<IgCheckboxEditor> {
    model: NgModel;
    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef, model: NgModel);
    /**
     * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
     */
    isValid(): boolean;
    /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
     * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
     * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
     *
     * @param newValue
     */
    value(newValue: Object): string;
    /**
     * Toggles the state of the checkbox.
     */
    toggle(): void;
    /**
     * Gets/Sets name attribute applied to the editor element.
     *
     * @param newValue The new input name.
     */
    inputName(newValue?: string): string;
    /**
     * Gets the input element of the editor.
     */
    field(): string;
    /**
     * Gets a reference to the jQuery element that wraps the editor.
     */
    editorContainer(): string;
    /**
     * Gets whether the editor has focus.
     */
    hasFocus(): boolean;
    /**
     * Sets focus to the editor after the specified delay.
     *
     * @param delay The delay before focusing the editor.
     */
    setFocus(delay?: number): void;
    /**
     * Hides the editor.
     */
    hide(): void;
    /**
     * Shows the editor.
     */
    show(): void;
    /**
     * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
     */
    validator(): Object;
    /**
     * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
     */
    validate(): boolean;
    /**
     * Destroys the widget
     */
    destroy(): void;
}
