/// <reference types="ignite-ui" />
import { ElementRef } from "@angular/core";
import { Feature } from "../feature";
export declare class IgGridUpdatingFeature extends Feature<IgGridUpdating> {
    constructor(el: ElementRef);
    /**
     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
     * 			If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
     *
     * @param rowId    The primary key of the row the cell is a child of.
     * @param colKey    The column key of the cell.
     * @param value    The new value for the cell.
     */
    setCellValue(rowId: Object, colKey: string, value: Object): void;
    /**
     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
     * 			If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
     *
     * @param rowId    The primary key of the row to update.
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    updateRow(rowId: Object, values: Object): void;
    /**
     * Adds a new row to the grid. It also creates a transaction and updates the UI.
     *
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    addRow(values: Object): void;
    /**
     * Deletes a row from the grid. It also creates a transaction and updates the UI.
     *
     * @param rowId    The primary key of the row to delete.
     */
    deleteRow(rowId: Object): void;
    /**
     * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
     *
     * @param rowId    The row id.
     * @param column    The column key or index.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    startEdit(rowId: Object, column: Object, raiseEvents?: boolean): boolean;
    /**
     * Starts editing for adding a new row.
     *
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    startAddRowEdit(raiseEvents?: boolean): boolean;
    /**
     * Ends the currently active edit mode.
     *
     * @param update    Specifies if the edit process should accept the current changes. Default is 'false'.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    endEdit(update?: boolean, raiseEvents?: boolean): boolean;
    /**
     * Finds and returns the key of the first column the editor for which has invalid value.
     */
    findInvalid(): string;
    /**
     * Checks if the grid is in edit mode.
     */
    isEditing(): boolean;
    /**
     * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
     *
     * @param key    The key of the column.
     */
    editorForKey(key: string): Object;
    /**
     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
     *
     * @param cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
     * @param create    Requests to create the editor if it has not been created yet.
     */
    editorForCell(cell: string, create?: boolean): Object;
    /**
     * Destroys igGridUpdating.
     */
    destroy(): Object;
    /**
     * Shows the delete button for specific row.
     *
     * @param row    A jQuery object of the targeted row.
     */
    showDeleteButtonFor(row: Object): void;
    /**
     * Hides the delete button.
     */
    hideDeleteButton(): void;
}
