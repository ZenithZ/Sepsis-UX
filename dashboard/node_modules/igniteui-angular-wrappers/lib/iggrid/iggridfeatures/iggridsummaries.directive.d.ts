/// <reference types="ignite-ui" />
import { ElementRef } from "@angular/core";
import { Feature } from "../feature";
export declare class IgGridSummariesFeature extends Feature<IgGridSummaries> {
    constructor(el: ElementRef);
    destroy(): void;
    /**
     * Returns whether summaries rows are hidden
     */
    isSummariesRowsHidden(): void;
    /**
     * Calculate summaries
     */
    calculateSummaries(): void;
    /**
     * Remove all summaries dropdown buttons.
     */
    clearAllFooterIcons(): void;
    /**
     * Toggle drop down
     *
     * @param columnKey    toggle drop down for the column with the specified key
     * @param event    event object. Its data should contain current columnKey, isAnimating, buttonId
     */
    toggleDropDown(columnKey: string, event: Object): void;
    /**
     * Show/Hide dialog
     *
     * @param $dialog     jQuery object representation of dropdown div element
     */
    showHideDialog($dialog: Object): void;
    /**
     * Toggle summaries rows
     *
     * @param isToShow    Specifies whether to show or not summaries
     * @param isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.
     */
    toggleSummariesRows(isToShow: boolean, isInternalCall: boolean): void;
    /**
     * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param $checkbox     Specifies the jQuery object of the checkbox.
     */
    toggleCheckstate($checkbox: Object): void;
    /**
     * Select/Unselect specified checkbox
     *
     * @param $checkbox     Specifies the jQuery object for checkbox
     * @param isToSelect     Specify whether to select or not checkbox
     */
    selectCheckBox($checkbox: Object, isToSelect: boolean): void;
    /**
     * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)
     *
     * @param ck    ColumnKey
     * @param columnMethods    Array of column methods objects
     * @param data    Object which represents result
 represents dataType for the current column
    * @param dataType
    */
    calculateSummaryColumn(ck: string, columnMethods: any[], data: Object, dataType: Object): void;
    /**
     * Return a JQUERY object which holds all summaries for all columns
     */
    summaryCollection(): void;
    /**
     * Return a JQUERY object which holds all summaries for column with the specified column key
     *
     * @param columnKey
     */
    summariesFor(columnKey: Object): void;
}
