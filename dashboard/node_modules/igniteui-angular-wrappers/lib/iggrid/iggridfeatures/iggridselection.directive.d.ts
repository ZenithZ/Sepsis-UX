/// <reference types="ignite-ui" />
import { ElementRef } from "@angular/core";
import { Feature } from "../feature";
export declare class IgGridSelectionFeature extends Feature<IgGridSelection> {
    constructor(el: ElementRef);
    /**
     * Destroys the selection widget.
     */
    destroy(): void;
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     */
    clearSelection(): void;
    /**
     * Selects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.
     */
    selectCell(row: number, col: number, isFixed?: boolean): void;
    /**
     * Selects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    selectCellById(id: Object, colKey: string): void;
    /**
     * Deselects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed     If the cell is part of the fixed or unfixed area of the grid.
     */
    deselectCell(row: number, col: number, isFixed?: boolean): void;
    /**
     * Deselects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    deselectCellById(id: Object, colKey: string): void;
    /**
     * Selects a row by index
     *
     * @param index     Row index
     */
    selectRow(index: number): void;
    /**
     * Selects a row by row id
     *
     * @param id     Row Id
     */
    selectRowById(id: Object): void;
    /**
     * Deselects a row by index
     *
     * @param index     Row index
     */
    deselectRow(index: number): void;
    /**
     * Deselects a row by row id
     *
     * @param id     Row Id
     */
    deselectRowById(id: Object): void;
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     *
     * 				If multiple selection is disabled the function will return null.
     */
    selectedCells(): any[];
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     *
     * 				If multiple selection is disabled the function will return null.
     */
    selectedRows(): any[];
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     */
    selectedCell(): Object;
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     *
     * 				If multiple selection is enabled the function will return null.
     */
    selectedRow(): Object;
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     */
    activeCell(): Object;
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     */
    activeRow(): Object;
}
