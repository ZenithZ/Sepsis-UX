/// <reference types="ignite-ui" />
import { Renderer, ElementRef, IterableDiffers, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
export declare class IgVideoPlayerComponent extends IgControlBase<IgVideoPlayer> {
    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef);
    /**
     * Returns the element on which the widget was instantiated
     */
    widget(): void;
    /**
     * Hide the add message if shown.
     */
    hideAdMessage(): void;
    /**
     * Play a linked commercial for this video.
     *
     * @param commercial     Specify the linked commercial to play.
     */
    playCommercial(commercial: Object): void;
    /**
     * Shows the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    showBanner(index: number): void;
    /**
     * Hide the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    hideBanner(index: number): void;
    /**
     * Resets the commercials, to be shown again.
     */
    resetCommercialsShow(): void;
    /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     */
    togglePlay(): void;
    /**
     * Start playing current loaded video if any.
     */
    play(): void;
    /**
     * Pause the currently playing video if any.
     */
    pause(): void;
    /**
     * Gets/Sets the current time of the playing video.
     *
     * @param val     Specify the playback position in seconds to navigate to.
     */
    currentTime(val: number): number;
    /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param scaleFactor    Specify scale factor between 0 and 1.
     */
    screenshot(scaleFactor?: number): Object;
    /**
     * Get whether the current browser supports video tag.
     */
    supportsVideo(): boolean;
    /**
     * Get whether the current browser supports H.264 codec.
     */
    supportsH264BaselineVideo(): boolean;
    /**
     * Get whether the current browser supports Theora codec.
     */
    supportsOggTheoraVideo(): boolean;
    /**
     * Get whether the current browser supports WEBM codec.
     */
    supportsWebmVideo(): boolean;
    /**
     * Returns whether the currently played video is paused.
     */
    paused(): boolean;
    /**
     * Get whether the current played video has ended.
     */
    ended(): boolean;
    /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     */
    duration(): number;
    /**
     * Get whether the player is seeking to find the new playback position specified.
     */
    seeking(): boolean;
    /**
     * Destroys the widget.
     */
    destroy(): void;
}
