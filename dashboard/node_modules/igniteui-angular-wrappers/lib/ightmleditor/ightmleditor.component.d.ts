/// <reference types="ignite-ui" />
import { ElementRef, Renderer, IterableDiffers, NgZone, KeyValueDiffers, ChangeDetectorRef } from "@angular/core";
import { IgControlBase } from "../igcontrolbase/igcontrolbase";
import { ControlValueAccessor, NgModel } from "@angular/forms";
export declare class IgHtmlEditorComponent extends IgControlBase<IgHtmlEditor> implements ControlValueAccessor {
    model: NgModel;
    private zone;
    protected _model: any;
    protected _zone: any;
    constructor(el: ElementRef, renderer: Renderer, differs: IterableDiffers, model: NgModel, zone: NgZone, kvalDiffers: KeyValueDiffers, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    writeValue(value: any): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    /**
     * Returns the element on which the widget was instantiated
     */
    widget(): void;
    /**
     * Resizes the height of the workspace
     */
    resizeWorkspace(): void;
    /**
     * Gets the content of the html editor.
     *
     * @param format Returns the content as html or plain text. Values can be "text" or "html".
     */
    getContent(format: string): string;
    /**
     * Sets the content of the html editor.
     *
     * @param content The content which will be set.
     * @param format The content type: "text" or "html".
     */
    setContent(content: string, format: string): void;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Executes htmleditor commands.
     *
     * @param actionName The command name.
     * @param args Additional parameter for the command.
     */
    executeAction(actionName: string, args?: Object): void;
    /**
     * Returns true/false if the editor contents were modified or not.
     */
    isDirty(): Object;
    /**
     * Returns the window object associated with the Html Editor's content editable area
     */
    contentWindow(): Object;
    /**
     * Returns the document object associated with the Html Editor's content editable area
     */
    contentDocument(): Object;
    /**
     * Returns the content editable associated with this Html Editor
     */
    contentEditable(): Object;
    /**
     * Returns Selection object that represent the current selection in the content editable
     */
    selection(): Object;
    /**
     * Returns Range object that represent the current range in the content editable
     */
    range(): Object;
    /**
     * Inserts the provided content at the position of the caret.
     *
     * @param element Accepts html string, DOM element or a jQuery object.
     */
    insertAtCaret(element: Object): void;
}
